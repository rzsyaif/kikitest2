%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.4
%%For: Арина
%%CreationDate: 8/22/2022
%%BoundingBox: 0 0 1348 450
%%HiResBoundingBox: 0 0 1347.7021 450
%%CropBox: 0 0 1347.7021 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.4.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.4.1 x498 R agm 4.7767 ct 6.0%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.217bca6, 2021/06/14-18:28:11        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:MetadataDate="2022-08-22T21:27:02+02:00"
   xmp:ModifyDate="2022-08-22T21:27:02+02:00"
   xmp:CreateDate="2022-08-22T21:27:02+02:00"
   xmp:CreatorTool="Adobe Illustrator 25.4 (Windows)"
   xmpMM:InstanceID="xmp.iid:2e2b49e9-5c1f-e24a-896d-7a751544afe6"
   xmpMM:DocumentID="xmp.did:2e2b49e9-5c1f-e24a-896d-7a751544afe6"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Web</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">undefined</rdf:li>
    </rdf:Alt>
   </dc:description>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="88"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEBAAEAAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABAAAAAAEA&#xA;AQEAAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUt8x+ZND8t6Nc6&#xA;1rl2ljplooae5k5ECpCgBVDMxJNAFBJxV8z/AJof85VedDZC88jaNNp/luSYwW/me/tmYXMi1JFu&#xA;rj0VHwn7XJqdQp2xV9O6Jqceq6NYapEKRX9tDcoPBZow46/62Ko3FXYqkv6fjuPNn6BtW5PZWovd&#xA;SZQrBPWYx28TH9ln4u/jRR2OKp1iqV6h5l0ew1fT9GnnB1bVC/1KxWhldIhylkptRI13Zj8hVqDF&#xA;U0xV2KuxVhNn+Z2max5tHl3RYbi4WC7ltbzVUjBsw9rCZbiNJCfiZHaONqDYt7YqzbFWndERndgq&#xA;KCWYmgAG5JJxVAadrVpqF26WkiT231W2u4p0IKsl0ZCpBB6FYwRt3xVMMVdirsVdUUrXbrXtTFWE&#xA;eXvzX8u+Z/O975X8uyi+GkQGfVdSQcrcMXEaQQuCOb1PIuKqAKCpPwqs3xVxIUEk0A3JPQDFUv0D&#xA;U/0rpcOpoytb3tZrNk3U27H9y1f8uOj/AE4qv1fWtJ0eza91W7isrVTQzTMEXx6nwAqfbfFUgn/M&#xA;GziGj3zWzRaBrF0LOHVLh/QIeWN3gk9F15elK0YjVnKtyZfhoa4qySHUbGe9uLKGdJLq0EbXUSmp&#xA;j9XkU5U6FghNOtPmMVRGKpdr+vadoWlzalfyBIYhRVqAzufsote5/DqdhiqzS21K9dNQuw9pAQfq&#xA;unnZgrAUkuNq86dE6LXerfZVTTFXYq7FXyD+YvmbWvOH5r3ekLpx8yRadqMtpougxM31O7u7NT/v&#xA;TIwiAhtEfnKlal3YcvTIIVeteb/JmsX/AOTupaR5ksEuYorRr25la5S2kt5bVBIv1O1t4preOOJU&#xA;osYl3AoxPItirLvyWuppfyu8swzjjPaaZYwSKRQgfVIpIwR2/dyLirNsVec3/wCZHmDW4p7byFpk&#xA;VxIsfqtr2qS+hpsETcuMr8OUsnILyVFA2+JuKleSqM/J7QPqHlY6vdXlxqOteYpBqWr392ixyPOy&#xA;LHwRV+FYY1SkQUleO67HFWa3d1b2drNd3LiK2t42lmkPRUQFmY08AMVfNvm30vLv5leUfzW1RrrU&#xA;zqUGsXr2D8OdtbR2I+oW9ugoP92UNTuzFqVrir6E8vWN1bacJL52k1G7JuL0sahZJN/STwjiHwIP&#xA;AVO5JKqZ4qwLzt52VtSuPJWk+vJr15bAL9UYJLEJWUSS+qVZIRBAebO9N2QJyY7KpB+UWk/l1oV3&#xA;rOr6Rqtt9X1K4a30yKSaJPTtoZCvGCOq8I3kHw15NIFWQseVAq9cBBJANSNj7HrirFvP0sd/pw8o&#xA;xSMt/wCZY5bT92QHisyAt5cVP2fTiein+dlGKsT/AOce7xr7y/q0qI8Vnp97Hodikh5c4dItIbQT&#xA;1IFDKVJK9BTxrir0+6vbO19H6zMkRuJFggDkAvK/2UUd2NCaDtviq2zvre8EzQEskMrQmSnws8ez&#xA;8T3CtVT/AJQIxVI/OHmiz017HRxMV1TWWeO1hhNbj0kFZpIl6lhyCqeiswZqIrEKsX1Hy/5tu4vM&#xA;l75m1H6n5StYg2meXrFYlVre1g5yC5lZeZR35AqrLyUbnj8OKsA/5xfM0h1HXGZZNT833095KaEm&#xA;PSrAvDG3xEled1KY1B3IVu67KvovFWA/nh5kg0X8vb+FjMbnWyukWiWtDOXu6pI0de8cPN/oxVmi&#xA;jT9I0sAslrp2nwU5MeKRQQp1JPRVReuKvEfKFtb/AJy+fp/OmsWcg8m6CqweVLCbl6V83rSB7ydD&#xA;8LBZIPhSnhy+zuqyv/nIzy1rfmb8rb3RNEtGvdTvLmzW3t0oCSLhGYksQqhVBJJNAMVS7/nGptMm&#xA;8mNcWAM7sUi1DVGqDdXMdQzUPxfDX4eXVClKDbFXr2KvBvNX5r+Tp/zYeG4e61o+V+NrpPlzToWu&#xA;JLjV3Yme5KiiBbVeCKznZ+RXdd1Wa6l+YnmKsSQ6PJYLKVrLcG3Eio1C1Ibmezm9RV6KkMgY9/FV&#xA;C+WJ/Mj+d9C1F/M19quia/pN7dRaVd21tbegIXtSrssCIQwM/E8/iWtCe2KvTsVQ2p/X/wBG3f6P&#xA;4/pD0ZPqfP7HrcD6fL25UrirB/y28jeXvLRhkt15zNC1npcjrWV7eNudzdOQD8d3cH1XetCvpL2A&#xA;xVk3ndmHlDV4o+JuLq1ltLRH+y9xdL6EEf8Az0lkVfpxVC/l/wCXtU0LQ3s9TkhkuTM3H6sGEQhi&#xA;RIIFUOWYfuoV2qaYqk356+dH8n/ljq+sQy+neH0razUNwd5J5VRlRhuG9Lm1V3FKjcYqwzyn5v8A&#xA;JuteQdSsTqv+hJxuvNWpWtld/V0tmiQKlqfRpCvoxKihqNGg+EfZfFXtVheRX1lBeQrIkVwiyRrK&#xA;jRScWFV5RuFdDT9lgCO4BxV5/rHmdtY0nWdA1SFoJ01y10hxESgnsL2+jSOVW8GgZ4np+2rdMVQf&#xA;mXyouv8A516DFIqto+haM91dW3H4Ocl2v1VKdBye2J/1UI74q9TxVbNKkUTyvXhGpZqAsaKKmgUE&#xA;n5DFXh2j/khf+dPPN35//MxQ0c37vR/Kys3CC1Q/uBdMpHI7lmjG3I1bugVQ3nXzv5X8t+a9I8n/&#xA;AJW6PZ3nma9eSK606wX0rGKOeEqJLlIR6DheQkbaoC/Ey91XtHlfy/b+XtAstHglkuFtIwj3Mx5S&#xA;yud3kc+LsSadB0G2KvEpdO8/a7+ar6rq01zbW3rRtY+WrIoJjpVo7z2y3slQIPrdwiuys3QMj/sD&#xA;FXtNja6H5R8sCMullpWlwNLcTyHYBQZJZZGoKszcmY03JxV8+a95o/MzzT+ZvoaXps9pq72RXy3b&#xA;SFQNJsL0mObU7ygIiunijIjRiSBIBxqtHVfRPlzRIdE0e202JzIIEVWkIpyKqF2H7KgKAo7DFWJW&#xA;1lpdn+cCT3Uj3fmPVdMu5FG7x2un289ukKR1/u1LszOeryMewAVV35s6pZ6jos/kKw1GCLzL5oRt&#xA;PgtuXqSxwTIxnnkhSsgiEKuOVKVIxVMPy7/LLy/5Gtr1NMjX6xfvF684UIfRtohBbRbdeEa/Ex3Z&#xA;yzH7VAq35x86waLrmiaUXCC8a5u9RkALtFZWNtLcM3FaH43iCd++x7KvGvJv5n+Yfzejh8uw6fJD&#xA;xvpLnWtYUCttYNfGeCyVwDwZ4oeLFvtBOPVuQVTX/nMbzveaJ5DsfL9m5il8xzOly6mhNrahWlQE&#xA;fzvJGD/k1HfFUJ5E84ebNYtdEsPyr0a403Qbawt9LvtZ8wWqpZ0gY8Li1Ec4aWUmWQsorzJHLj1x&#xA;VX0GL8xdY83+ctU/SsuuSaNbt5Z8tXvpC2tTqdyy/WrlIIyyoLT7MjVJKg7k7BV7L5G8naX5N8qa&#xA;d5b0wE2unxBDKwo0sh+KSV/8p3Jb26DbFU6nkjjgkkkkEMaKWeUkAIoFSxLbCnXfFXnv5U/l7ofk&#xA;DRX0qzaG9833cYu9bu3dmklnep/eScWdIgxIjqu+5py5YqzHSdD+p3VxqF3cNe6rdqqT3LDgixxl&#xA;mSGGIEiONS7dyx/aZtsVYb5ZvVu/zd8xacnxReXIWEbtSqnWltbqWJSSSQJLUyN4cwPDFXo2Ksd8&#xA;2fmD5U8p273GuXq20UXAzN19MSEhOXuxU8VFWahIBCsQqh4L3XdVurXXNDjtk0eW2ZE+vCWKaZWI&#xA;eKZAAxSMgbBlDEGpGy4qgvLOtxeer6PVY42XQ9GmIs3RyYbq+UPHJKtVUyQxK37ptgzHlT4VIVZW&#xA;+pxDVY9MiHqXHpG4uKEfuoiSqMw3NZHUhB34tv8ADTFUs83X1jbwWkDWEWp6vdyumiWUqoQ10kLy&#xA;cucnwxhI0ZmataVC1YgFV5f5zuLf8wtVvNMsuL6fYtDpCX6R1a8vXmE1xDBIoJMcS2zGQgqF4MCS&#xA;rGir2/FXgHkXyh5l16DSpNdvCPMejaxB5giuEdvRvdNvpY5LiMg0/uri3YgU+Eon8/IqvYr3U7aP&#xA;zPBplgiPrN1Ck1/Id/RsLeRuLOARu8krJEPEs24QjFU9JA64qwX81pvPQsNOh8l6f+kdWNwZDFNw&#xA;SzVUjbhLcSO8f91KySIi1LMvSgOKvEL6Dz15xlHkDULqXXdflKx6nq/6Tkt9OtDbqHmKQW0UMFya&#xA;yFGVeTLxo3FjXFXu/wCXH5VeU/ImlwQ6ZYWw1UQ+le6skXGaclubVZ2lkCcuilz0HWmKpp598x3X&#xA;lvydq2uWlqb27sbdntbQVPqTGixq1KHjzYcqdsVY5+Sei+fbDytNeeeZ1fX9WuZL2a3UKDCsn2Vk&#xA;K1BkpttsqBEH2cVY55f85/438w6pe37C18keXFSXVrm4ISB7+IiaO0qxpwshR52/blp/usKCqmGg&#xA;/nX5W1Pz5pnlvy/o18w8wyXNxNrlxbva28q21szmSJpR6s/93HH0AVSKGgAxVnnmm7v4rGKz02aO&#xA;31LU5fqlpcTbpGTG8sslBuzJDFIyDuwFdqnFXiFmfMiebZr8abLq99rc8mk+X9beaSyt7nT5WFw9&#xA;w1usk000NquwqUjkjVTyZnGKvWPK35aeRPJr3Gq2VhbxalKHkvtbmSFJ25byHkixxwoabpEqJ7Yq&#xA;mdxqsmoaudG05iFt1SXVrxTT0VcBo7dTT+9lXc90T4tiyVVfP2veZZvOf/ORuo2GicZP0RpkuhKZ&#xA;HHoSuTI90v7RBd39E8VJCBn/AGMVe1flT+V+j/l15Z/Q9jK15dTytc6jqUoAkuJm25EVNFUCirX3&#xA;6knFWQ6n5a8u6rdW13qml2l/dWfIWk9zBHM8POnL02dWKcuIrTFXm/5q635ifzdpXl/y1PbtfxWc&#xA;00NkzGNxe3NYrRy9QqKkUVw5G/KNXGzFDir0Hyd5YsvK3ljTtAsyXhsIQjTN9uWUnlLM/wDlSyMz&#xA;t7nFUVca3ptst9JczLDb6che7uHICJxjMzjx+CKjnbocVfJMn56/mh5s8w6v5is7a7g/Li3ifT9R&#xA;SGNpIbOC5jeIXUnH4pJYfU9UgdgB8IocVfVnlKXytPokNz5Zkgm0u6/fpPbtz9VpN2kkcku0jftl&#xA;zyr13xVKvPn5o+UvJuh3eo399DNdQKRbaZFKjXNxMdkijjBLVZuppsNzirD/APnHrQPM0VjrfmXz&#xA;XZzWev65eSTXMVyjRvyY8nKK3xJFx9OJV/4rqNjir113REZ3YKiglmJoABuSScVfJBt7Lzz+ZZ89&#xA;+YJza/lVZajPd2sF7I7Jci3Eds92FNaxvc+ghr/uuqDaM0Vej+Y9d1j85dUHljyTfT2XkG3Yr5o8&#xA;zxIY/rRBH+hWTsAW2+21Kb71XZ1Wf3fmfyV5B8m3siKtn5f8sQrboEI4vMq7W0RJrJLy4hj/ADNu&#xA;ahqKoz8vra6by/FrOoj/AHL68E1HUK9IzMimK3Su4jgi4xr40LH4mOKsS/Pa7iv9KsvKVhZ3F95n&#xA;1abhpX1ZuC2pnhngknnc7CJrY3CMKElOdKU5BVmem+V1sdageD07fQ9Ms1ttG0uCNYoYWc0legJq&#xA;4VFVTsArEU3YlVkFRUiu43I70OKsVv8AVtG8reWtR1zVQEi0D643M0DiKST1I4UY0B9RWiAFd2pX&#xA;cYqxRNcsPKQ1PzhPAdTv9ctbZWngf1DdX1q1wJLG1iQSXH7qoRVENAAS52Y4qwLyj5h/NXzp+fWi&#xA;L5ssZNB0rSbS51i28ufGvCNka0hmnJC+o5kl2J8GAA+IYq9+8xK01g1mllJfPc/AIFkaCMjv60yk&#xA;cY/5huWGwVsVSDyp5L8p+Q7e41CT6lZ3t+UjurtEjs4Aqk+lbW0QPGONKnitSzH4mLNviqS+bPz3&#xA;0HSJbOx0jTb7XtX1aVrbR7WCIwxz3CFQyGWULwEfMeoeJ4+FMVTzVbue4n03Tb64gj1lFhluSlfq&#xA;tvPJXi8MclTcTVVvQVqhePqMNlBVZHrNrqVxol5aabdC21Ga3kitL2QcvSlZCqylV48uBPKm1fbF&#xA;WI/l5+THkvyRpUNpawHUbyMEyahfUmkLuauY1PwRBieiDf8AaLdcVVx5T0FfzZg1yC3hiv7XRZIX&#xA;CKFNJ7heDkADcLE618DirHPzk8zadaeZPK2m310bbSYJpbzzFdKkji3tJIZIIVf0wzKbtvUgUgVo&#xA;WoQcVZJ5J80+X/N+ofp7RFNxZLamGC4eMwmGMy/AgRhyrOEMprQqnpfD8VSqw3/nIjz1qejv5d8t&#xA;6DcRHzDr9yILCzY7rNJIkVtcyVBXhFI5KhusgVtwjAqvQ/J/lOHyf5Qg0bTq3l1bRNJNcTOQ93eM&#xA;OUkssjczWWTua0G3QYqlP5YflPoHkXT3eKKG58w3rSTarrAjCySSTsHdI61ZIQwHFK9qnepxVnOK&#xA;oKTWdOTSJdXaX/cdDFJcPPQ0MUQLNIu3xKVWqkdRuNsVYJ+XH5c3Fr5g1H8wfMTPJ5q8worG0f7G&#xA;nwH+7tkFSC6RcI3f/JNOpqq9CuL21t1kaaVU9KNppB1IjT7TUG9Birw/VtV1zzF+S+ueYJbQWM3m&#xA;O2uodGt7qT03aG+kZ5LiZ/sqq2saiKv+6461+OgVZF+QvljQdL0Ke58vQovl24ht7S0u2i9ObUXt&#xA;DKJ9QkrvwmklKxqw+woPQgBVH+Zf+cevyg8wyTzXnl2C3u5weVzZM9qwY/thYmWMt7shr3xVhel/&#xA;kB+Vn5a69Z63DJcarrF3PHaeW9P1N45FW+dgUlURRxE+kAXZiDxUEj4qYq95FaCpqe5GwrirHPPl&#xA;vPqWhP5etpXguNeJsDPH9qK3dSbqUHsVgDhT/OVHfFWH+ZP+cd/JnmTzHpd/q7yvoWiWMNhpnlyD&#xA;9zbKkLMayupLvXn+zx6CpOKsk83yPoflN9G8qm30u9Fu6afDEiKttCinlKkfwxRqn88hCLWp5GiM&#xA;q8g1byaieTLTzZ55ill0609WysPKwUG3S0vIXgWRFmWS4e+uJnWT15CsvI7qp+HFXuPkTRr/AEPy&#xA;VoWjahMLi+06wt7W4mFSC8USoaEgEgUoCRU4qv0ry1bWuoy63d0l1m5QiabYpGGILJFUKQvFI0J/&#xA;aCKTvXFUt1n8ydC0y2d0D395MJTo+m2QM11fejRHMUajZBKeHNvh2LV474qm/luwv7XThLqjLJq9&#xA;4frGosm6LKw/uo/+K4VpGniByPxEnFUv86eUrLzW2maVqYSXRoLj69f2LE/6SbdaQROo+1EJXEje&#xA;6KOhOKu8o+QNC8sxxG19S5u4Yfq0V3cEM0VvUN6ECqFSGKqj4I1FaAtyIriq3y7ptvN5j1zzY1C1&#xA;6ItOs5G7WdgXBIr0D3MszbbMvE4q8y89eYvzY89aW835aSJpejW8iTyavdSrbmVIG9WP0SQzcZV4&#xA;ytyAX0+IrVpECq7yR5a8wat5bj86/nHq0+qek0kmn6AiotiiNygjf6vaqBdvOr0jUhgyvSjFsVYh&#xA;5a8kfmnrf5ralqtlZ23lmxqsct6qxu+mWxRPSsrWJR6X1n0FjMvGqVNHNKxlV7Pdaf5e8haV6tkT&#xA;c+ZNYmjsLK/1GVrm8vL244xRerNIeZReIZ1Wiqi7DbFWbWsH1e2ig5tJ6SKnqPuzcRSre5xVgH5z&#xA;fm7b/lzotlLFYnVtc1af6tpWlq5QyNtzckK7cV5KKAVJYD3CrHfyg8o/m+nnnVfO3n1rO3/S9kLa&#xA;PTLeQtLBxn9aFGVFaPjGrMgPqM3jXFVO+8n6V5w1fzW/ll7qTWLmdbLUvN091NDDb8Pha305IQyT&#xA;fVo6xup4ipozklsVegh/K/kTR9O0axWDTrONG9ONjQLa2cXqXM8hHxNwhTdzX4iteuKvmjyBpn5n&#xA;/mD+aGoed73TYbKK/gZ9I1bVOQjsIIZEaCeyti0bzmLiAGFEqSWYFsVewedNG/MLXvLMup6P5yne&#xA;zvrIXGk3ekJHYQxOyepHJKKTXEkEo+Ess4MYIJVviYKsr/Ji51W6/Kzy1c6tcS3WozWSPcXNxIZp&#xA;XZiSGeRixYkU3riqH/MHX74x3emB49K8ux+jH5g8zTXKW4t4JFeSeGFT8RmeIRorD7PqgjdcVY75&#xA;S/P3y5568+xeTvKmmPfaVBFLcahq9wvpQrDAAEMMBUswaVo1BfhTwOKvTPMWu2uh6TNqFwC/pikU&#xA;KlVaSQ9FBYhV6VZmPFVBZiFBOKvnzyV+Y+peZPN3nX8xdUgktfLlhpkeladCgeRGs5nnZbiPmkTu&#xA;ZLm2ArxH26EfDUKs58yeRL/zt+Ufl7QtRkMN9YS2dtqkNp8Q9WI/o67owOyRJLLJSn7I7Vqq9Wsb&#xA;K0sLK3sbOJYLS1jSC3hTZUjjUKir7KopiqtirzP8/Liz07ylZ66rpDr+kahBc+X52DMTdKSzW9E+&#xA;JhcxK8PHuWHhir0TTbm4utPtrm4tXsrieJJJrOUozxOygtGzIWQlTtsaYq2bNGv1vGNXjiMMQp9k&#xA;OwaTfvy4J/wOKpb5r80WXlzSZb6dHurkqwsdNtwXubuenwwwRqGZ2Y+A2G52BxV59+Tf5b31tpFx&#xA;rnm26uL3X9Vv5ry8tGuJWto3hlaOKMgt+/WPhVPVLKuxUDriqY+bLiHXfzL8s6QLqN9P0S9NxqWn&#xA;kn95c/U5Zrd3AIA+rSeg6BtmaTbdDir0S6ura0tpLm5kWG3hUvLK5oqqNySTirzfzH+Z1ncC68tX&#xA;ljfaPdazHJBpcksMrXMlo0bLPfLbwpI8Yj6Ij0csRyVBviqj+WHmPTvNkCa55Ws2h095ksPrs/p8&#xA;rbTdP5LHaKOTOXldfUYU2WWpYlVGKvU8VYvp/mTSzrutXF3dR20MN5BolqZHCiWaGAXT8Kndg106&#xA;mn8h8MVY3+dX5jXGg+TrxPLM0N1r0y8VWKSrwQuwjMoEYc+o0kkcUQ/346ncA4qi/NOvXHlH8pI9&#xA;Q8wxx2/1a3t4tWgs1IihSQqj28O5IX4vQRq13DdcVRmmDS0/LPSJ9culs7OW1t7zVaceE8k6ieaI&#xA;rR+Qmmc1RN2rxHXFURr11qGpanpVjpNtJFdvR9R1CQKf0bA8ZZuKn1ITdyU9NNm4hix+HZlWS6fp&#xA;9rp9qlraoUiQs3xMzszOxZ3d2JZmZiWZmNSdzirxr8xNW0xPzG0/zlKJtY03yPZ3E95ptuDW2eeQ&#xA;263KgBkdqQzM4kdPhRClf2lXr3l46mdA006r/wAdM2sH1/an7/019Xb/AF64q840ry3pPnf81E8/&#xA;3v7/AE3Rrc2XlOBqtHM8ErfWNSA3Xj6kvpwn9rjzHRTir0bW7OS9s2tWuDaWMit9enjcxy+kB8SI&#xA;4/u+QrykB5KPs0JDKqwK7/MpbDzfB+X3kPQLXWZbGxS5uzFex2VpYQ8+AR6RTbgFW4oCd+nfFVfy&#xA;Pompav5h1rzF5plt9UmnghsdPhggk/R0FoSZpEtZJ/8AelZW4NJNxAYqKCgGKsO8/a1rus2Op+Sv&#xA;LZuLzzLq13JB5o1e0iZ1sdNSeWNIVFfgLRAKkZYA82blUu4Vb8uflb5s0jyFcv8Alp5p1azmk9aK&#xA;x0/XningZI29MmFFjUWrO6MY3XkOJBPWqqs28vXN95E/JzRodTgX9M6ZpCJ9ReRVU3FtaNM8Tzbo&#xA;oRYm5vXiADucVUfK35aaPrGgafqfnVF8yateRi+lW7Aezgluv3rLbW1TEvDnxWQgvT9riAoVSb8n&#xA;9Ne080efdcvbRLSzsr1tNsJnDNMtlbVuFjBqwWKNJkARdwaq32QoVTrWPLr/AJo2Vs999Z0ryiwY&#xA;/VjSO81GGQAqxIYm2gkUDanqspIPpiodVgP5oaDb2Woj8r/KulSPbebLe0ub61s1X1Lex01yJeEk&#xA;riNfVEaRo0tAHJq2/wAKr2jydo99pWiiK/ZPrtzNLeXMEJJhhkuXMrxRFviZVZjV23dizbV4hVCf&#xA;mF5+0byR5ek1XUKzXDn0dM02OpnvLph+7giUBmJY9TQ0G+KoHS/zJg1+0iXy7YXN5qJHC/ieGSKK&#xA;xnUKZYLmSURp68RahhDcqjcrUHFXnvlW1t/zC/Nsa1qNxdX1l5RLraWssifVl1FJWV5xFFWNVT4V&#xA;ipUsyOTI/piqr3bFXEgCp2A6nFXjOkat+Yf+L/NPnPT/ACbLqdpqDQWGkxXM8en3H1GwVz6yC4Bf&#xA;jcyysypwX9muKofyD+cHmi48/wAvka78vpDG1jNq2nSLdJNJ6bgSxRuyRQxgFmKiqqV2DVIJKqdf&#xA;lla6jq/kjytq19BGda/TV/fayTyUfWRJe28/Km9YzRFB2+FR0Aoqivzm8z+ZrKfyt5X8rXUdlrvm&#xA;jUfQW7kiSb0bS3T1LiZEcMvKPkjCoxVS86eWPLfk7yleaxY6a2q+Y3eAfX7oC71K7ZJklkVriapC&#xA;+nGzEVVEUbAAYqnf5O+T7Tyn+XWj6ZApEssK3l5UU/0m6AllCr+yqs3FR2AxVlmo6ha6dYzXt0xW&#xA;CBSzcQWY9gqKKszsfhVRuTsN8VfOVx5L8zecPNV/578z/wC43TJVuF8m2i+ldWcM0MJKz3sUytE6&#xA;XCxH4l2c7qwHpMyr0X8t5YPOWk6Lfen9Z0HRlheDVJYjC2palAp5zxxlU420EruYxxFZPshVT4lV&#xA;X/nJG0u738mPMFnZ2zXl3dNYw29tGpd3kk1C3RQqruWqdvfFXlGteTfzF0fWPLGtapEt1rtxNAun&#xA;WMl1JNpmjtJPBZQrb28rzGa4i+t+ozHjEhAK1C8Sq+oQqgkgAFjViO5pSp+gYqkXnzzBa+XvJmta&#xA;zc3YsUs7OZ0uiAxWUoVi4qdmYyFQq9ztirxb/nHmaebRbnSItNllu9YvP0h5ie5LSw6fY0EVpZO8&#xA;9WuJJILfjxBJQN8VCCoVep6qbvzjqeteWIZ5bHy7ZRJa6rf23w3FxczrzktYJTyVEjhK+qwXlV+K&#xA;lSGxVkOheXdN0S1S3s0qY40hEzhOfpRbRxDgqKscYNFRVCjwqTVV53+aS3nmXTJLY2kdxo8azepY&#xA;TyOjXS1McBjEasTLcTx8LdVoSnNg6sUoqkv5LeUPJKNd6XEj2+q2r3N5qWjRRTQwJa6q0LwW00ki&#xA;/vljS0VKCQhuLc61IxV6z5uv9e0/y5e3Hl7TxqetqgTTrEssaNM5CKZGYoojSvN/iHwig3pirwvQ&#xA;/wAxPzA0rz1Yfl3a6RZr5l1+RdS8zasAWlt2mY/WXaFUihrFDF+6Id1K8N2JNVX0YAFAAFANgB0A&#xA;xV5b/wA5B+V7nWPKlvfWt29rc6ZKfTiRGmNy10BBFaLAGjWRp52iQcmoATsa0xVi35YR/mDLd+X9&#xA;Ju9TuovKt2t6W0y6uIbu9NrprCBGFzb21uYopJHj29V6qaKQDirI/wAw70QeYvLX5Z6Av6ItvMi3&#xA;K3y2cSQotlxaa5MVAFVysLISu49SoIamKq2q/m3e+X/LWkWo0K71XzZcrBYvp9qI3RL70qyrJ6bs&#xA;6heLPTjXjvsKkKp1+Xen6xfXuo+cvMVtHbazqQWxtLaOjC30+0d+EYYNIGMkzySFlajAr4YqlP53&#xA;fm/H5E0y2sNMjW881auwi0uyqKirBTIwNfH4ajjXr0oVWOfl9rEX6Um8yea3PmjzXdXiaboVxp0B&#xA;mtUU2sUlymmuT6CQQzO8U0/PcoS7b0xV6L53826P5I8q3epTqlpKyySpDBH6n76Q8pZ2SMKzpGz+&#xA;pK1On+UQCqr/AJe6D5a0ryvYPoNm1rbXttBO0kycLmWsS8XuK/F6hBq1f2ie5OKslxVQv762sLG4&#xA;vbluFvbRtLMwBYhUHI0A3J26DFXguhfnPrGv/nBpGoPG2l+Q5bfVbCya4BUTNa+k8t00oBhblKiR&#xA;xqjtSh7tuqyryT5cbRNf13z5q9pNJ5m80yumj6IvE3MGnq4dIiGKqjOxWScs3FNgTUbqs08jeXNQ&#xA;0Kwv1v54pLjUtQutTaC3VhFbteMJHhRmPKQCQs3MheRP2RirzX85/NV3pnnnyvNoemPeeZLW6lsL&#xA;EhgFnF1betNCaB2UR8IGc8D8DkAgmoVT4WnnrUtY0G383mzgk1RpfrWm2DM8UNrBB6ksPKQ8pGnl&#xA;ZVmenEIPTFebEqvTwABQbAdBirD9a1HT/MOu3HlkIzWWj+nc6/dnaJecbPFaLv8AFI6H1H2+BKHZ&#xA;2Qqq1fnRPP8Aotzolosknl+VkjvL9UaOGVIZFZ4LZyUZvscTIg4ruA3MbKsrs7O0srSCzs4Ut7S2&#xA;jWK3gjAVEjQcVVVGwAAoMVYn+Z3n3S/JWlW+san6zWVs7XFzDAAXkjRPTVQGKAk3E8PU/qxVJvK7&#xA;DzprGj+adZjVbmCF59N0S3n9WKwjLMPXupFoslxI6BQlAq8TTkycgqzfzTr0Hl7y5qeuTp6sOm20&#xA;t08YYJyESlqcm2HTrir5xv8Azh5e/NvUdL01JNV8w6baSvea5ounWcyC5nXmlusly7Rx21vUj0kY&#xA;j4ebO/qUqq93/Lfycnlfy2bU28NpfXs897dw23xRQvcSM6W8ZIFUt4ysSmgrxrQVxVkGlaXa6XYR&#xA;2VqD6UfJmdjV3d2LySO37Tu7FmPcnFVW+vbSwsri+vJVgtLWN57iZ9lSONSzs3sqiuKvL9A8wXd9&#xA;qeoa5qHlrUdU1iK9n/w9BH9W5QWRjVIfVDSwxWsrh3JE9JeLUNemKof8v/zIvNY/MXUV1vSf0HeX&#xA;zvoNrbeql0Hm0ZXvHH1iOiFgt7JzUCg4jiT8VFXrxIAqdgOpxV5h+U2nafq/mPzR+YbsJ9Q1u5Fr&#xA;YsASINMtlVLZFJFA06qs7gH9pa71xV6firzT887qGfy2ukQLd3erSyRyWWmWXKM3E0ha3tkmuAU9&#xA;KL15FduLhiqH9kOQq78lvIPmPy3pay+Y/Sivo4BZWllbMDDDAjcjRYwsY5sAQAC37TuzMeKrDPz/&#xA;APK8X+JbPzhq+ovLJai30zyp5TtHeObUp5pQbiOSRCHVZfU4Nw/ZAqd6FV6v5V8pyabOmoXZiil+&#xA;pxWtrpFrGkdlp68jJPHahQpPqNw5u32uAPwj4Qqi/O3mOTyz5U1HWoLGbUbizhJttPtkeSSaViFj&#xA;QKgZqFmHIgbCpxV8leQInl8z6p5y/NXydrXmDXtTctpFpc2QismMatK9DePDHIUSPjHCoeig0U9l&#xA;X05ea/eafpFmlrpVpY+btXUW2h6K5VmijA5f6S0NP3VuvKSXgeI+wpLEFlXmHmT8rrnzJ5utrnzR&#xA;qp1K90m/00a1VWWylhubiAwWUNux4opJl5MDU/DUFmYhV9CAACg2A6DFXYqw78xrC6163sfKtnO0&#xA;DapL6moSx7NFYwUaWUP+y3IqsVN/UKt9lWxVM28i+Vmu9DuDYR08uRPDotvT9zbhxGOSp05qIVCs&#xA;fs9t8VTwRxiQyBR6hAUvQcioJIFfAVOKriQoJJoBuSegGKvOPIfl271Pztrf5iX7lrPUaW/la0ck&#xA;+jZhI4pboA7Kb36tHIvfhxr1pirPE0y2GqPqbVe6aIW8bNuI4q8mWMfs82oX/motfsiiqLxV5L5K&#xA;/L7Vb/W77UfMOovNYxSXCtp9qWht59QupC97K8gJklES8LRTyUUR048agqvWsVdirBvNfly081ee&#xA;tDsrxDLpnl6KTVL2IkiOS4nb0rJGH7XExSy/5LKnjirKtE0DRdCshY6PZQ2NryLmOFQvJyAC7nqz&#xA;Gm7Nvirzr/nIDRrzWtBsNMnleLy1JK8mrRWweW9u5kUCys7W3j+KZ3mb1OOw+CpYDFWP/k5+WHmm&#xA;fVoPNvm6W506zsh6Pl/ycQsUFrHCWWCSVIvTR3jV248oweR5VOxxV7pirsVed/mJpGuecNX/AMFW&#xA;9zJYaDcWaTa7fQECX6vLK/7hK14yStbqqmlOBkrvxGKp/Y6B5f8AJHli7OlWdEtoZJXof39w4BYK&#xA;X2JZ2+FQOlaKMVQPlXyKumalptzOiCPQtKTTNORQBWefjJf3Wx+1M0ca1PxVVyftYqr/AJh66ltY&#xA;W/l6BZJNW80evpunrFWsReB+dy5XcRw1UuQa77YqnHlfy3pflny/Y6FpUfpWNhEsUQ/aYjdnc93d&#xA;iWY9ycVTGaaKCGSaZ1jhiUvJIxAVVUVLEnoAMVYt5Jj1LV4380a1E0NxqDCTS7BwAtrZKJBbNxqT&#xA;68kU7NKzUYFilAF3VZZirALDQh5k8/HzHqMQa38vM8GmROA3G6ZeLUPT9zG1SR/uyQqamFcVZ/iq&#xA;C1nVrfSdNnv51eRYQOEMQ5SyyOQscUa7cnkdgqjuTirzjTPy589eYfNejecPPmrQw/osGSz8p6dG&#xA;31WJ2+JTPO8jmaRH4MaDjyQU2xV6LHpMA1mbVXVDctEtvCwUBljB5NVurFmp7UAp3qqxmOSOf8yt&#xA;U0eO1llspLKw1K/vENIob63uD6EbEnd5Yo0YqvRUFft4qzXFXYqoRWNvHeT3irW5uFRJJDueEdeC&#xA;D/JBZmp4k4qr4q7FVC/soL6zms7ipt7hTHMoNOSNsyE+DL8J9sVVwAoAAoBsAOgGKuxVp1LIyglS&#xA;QRyHUV7iuKqdpaW9naxWtsgjt4FCRIKmiqKDc7n6cVVcVdiqHtLKO3luZQeUt3L6srUp0VY1H0Ig&#xA;H44qiMVQg0y3OpnUZKy3IT0rcvuIUP2hGOgLndm6nYdAMVReKuxV2KoXT7H6qsrO3qXFzIZriWlO&#xA;TEBVAFTQIiqo9h44qvu7OK6WNJa+nHKkxTajNEwdK/J1VtvDwxVXxVCjTLP9INqDoJLoqqRyOAfT&#xA;VAwAj2+GvqNU9TWnSgCqKxVD6hY29/Zy2dwC1vMAsyA05pUckb/JcfCw7g4qiMVdiqhYWMFjaR2s&#xA;APpxg7ndmZiWd3PdnYlmPcmuKq+Koeext57q3uZQWe15NApPwq7jiXp/MFJUHsCfHFURirsVQ9lp&#xA;9tZif0V+O5me4nkbdnkfux78VCovgqgdBiqIxV2Kv//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:32e4086c-2e9e-9c4b-a3fd-5ff580b60f15"
    stRef:documentID="xmp.did:32e4086c-2e9e-9c4b-a3fd-5ff580b60f15"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:D27F11740720681191099C3B601C4548"
       stEvt:when="2008-04-17T14:19:15+05:30"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T16:23:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T17:10:45-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:EF7F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T22:53:33-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F07F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T23:07:07-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:35:43-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:40:59-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:26:55-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FB7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FC7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:20-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FD7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:30:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FE7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:31:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B233668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T12:23:46-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B333668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:27:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B433668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:46:13-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:47:57-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:51:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:52:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T13:28:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FF7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T16:23:53-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:07C3BD25102DDD1181B594070CEB88D9"
       stEvt:when="2008-05-28T16:45:26-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F1174072068119098B097FDA39BEF"
       stEvt:when="2008-06-02T13:25:25-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BB1DBF8F242B6F84"
       stEvt:when="2008-06-09T14:58:36-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811ACAFB8DA80854E76"
       stEvt:when="2008-06-11T14:31:27-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:0180117407206811834383CD3A8D2303"
       stEvt:when="2008-06-11T22:37:35-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811818C85DF6A1A75C3"
       stEvt:when="2008-06-27T14:40:42-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0618BF4A82B7E0118BD1B6EF16736070"
      stEvt:when="2011-07-26T15:25:04+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F8E5580CEBB8E011BC39B7002B71B5D7"
      stEvt:when="2011-07-28T11:08:06+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:556BD34B07B9E01190AB87DBC0389FCC"
      stEvt:when="2011-07-28T13:49:40+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1E8EA8CFB9B9E011AED1C9908ACAA603"
      stEvt:when="2011-07-29T11:07:32+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FE978989D9B9E0118C64CE7A4C6A2930"
      stEvt:when="2011-07-29T15:33:58+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FF978989D9B9E0118C64CE7A4C6A2930"
      stEvt:when="2011-07-29T15:36:21+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:00988989D9B9E0118C64CE7A4C6A2930"
      stEvt:when="2011-07-29T15:36:37+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:B3CDBBC7DFB9E011A84CDE3C15D7F779"
      stEvt:when="2011-07-29T15:39:20+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:B5CDBBC7DFB9E011A84CDE3C15D7F779"
      stEvt:when="2011-07-29T15:40:16+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9D581254E3B9E011940CAB14FE5027F7"
      stEvt:when="2011-07-29T16:04:44+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9D7CE9C506BCE011ADDBDBC27509C377"
      stEvt:when="2011-08-01T09:23:29+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:C17B29310FBCE0119F5EA14730D8BF16"
      stEvt:when="2011-08-01T11:08:39+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:4A353C1616BCE0119F5EA14730D8BF16"
      stEvt:when="2011-08-01T11:18:50+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1505C91517BCE0118021DFDB500A5AE8"
      stEvt:when="2011-08-01T12:27:03+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1605C91517BCE0118021DFDB500A5AE8"
      stEvt:when="2011-08-01T12:27:29+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1705C91517BCE0118021DFDB500A5AE8"
      stEvt:when="2011-08-01T12:27:40+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5FD3B99820BCE0118021DFDB500A5AE8"
      stEvt:when="2011-08-01T12:52:47+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:D5320B2D63D8E0119A29EF17915C927F"
      stEvt:when="2011-09-06T11:51:59+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:09129FB294D8E0119329EC31AD884D4D"
      stEvt:when="2011-09-06T17:29:58+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:687CF0413FD9E011A062CB1CF29666AD"
      stEvt:when="2011-09-07T13:50:53+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:7DAAB3FB21DAE0118A84E5E2C8D0102C"
      stEvt:when="2011-09-08T16:53:51+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0C180472358DE9118315D1DBD17A5719"
      stEvt:when="2019-06-12T20:13:49+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0D180472358DE9118315D1DBD17A5719"
      stEvt:when="2019-06-12T20:14:12+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9AE6DB91418DE91188B5C6E4A7068B54"
      stEvt:when="2019-06-12T21:40:37+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1CCB8DCB5D8DE911B60FB82034D7B925"
      stEvt:when="2019-06-13T01:44:51+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:15d28ea8-253d-c14f-a20a-66507867ba41"
      stEvt:when="2019-06-20T12:47:44+02:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5c4676f3-4665-d74a-9b51-1a5de34fc642"
      stEvt:when="2019-06-20T12:48:06+02:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9074c982-30b5-144f-94ab-33b3180ccf4d"
      stEvt:when="2019-11-28T17:38:57+02:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:32e4086c-2e9e-9c4b-a3fd-5ff580b60f15"
      stEvt:when="2019-11-28T17:47:02+02:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2e2b49e9-5c1f-e24a-896d-7a751544afe6"
      stEvt:when="2022-08-22T21:27:02+02:00"
      stEvt:softwareAgent="Adobe Illustrator 25.4 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1347.702100"
    stDim:h="450.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="0"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="CMYK Red"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="236"
         xmpG:green="28"
         xmpG:blue="36"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="190"
         xmpG:green="30"
         xmpG:blue="45"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="35"
         xmpG:green="31"
         xmpG:blue="32"/>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="236"
         xmpG:green="28"
         xmpG:blue="36"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                               
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
1347.7 450 li
1347.7 0 li
cp
clp
1347.7 450 mo
0 450 li
0 0 li
1347.7 0 li
1347.7 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
730.617 107.649 mo
730.617 107.649 725.741 112.453 724.455 112.392 cv
731.4 103.996 736.932 97.705 736.932 97.705 cv
736.872 100.096 736.508 102.698 735.945 105.38 cv
734.831 106.037 732.521 107.298 730.617 107.649 cv
cp
686.325 172.371 mo
686.325 172.371 695.263 171.213 697.995 171.814 cv
690.117 174.481 681.056 177.263 681.056 177.263 cv
682.3 174.937 683.985 172.249 685.798 169.541 cv
686.181 170.156 686.826 171.422 686.325 172.371 cv
cp
686.65 276.878 mo
686.25 277.892 685.859 278.862 685.478 279.781 cv
686.65 276.878 li
cp
669.765 302.573 mo
671.846 298.547 685.37 279.971 685.438 279.878 cv
680.201 292.493 676.602 296.526 669.765 302.573 cv
cp
734.12 211.772 mo
733.02 217.488 732.037 220.919 732.037 220.919 cv
732.037 220.919 730.185 222.82 723.858 225.935 cv
723.892 225.82 726.804 216.132 734.12 211.772 cv
cp
737.105 180.747 mo
737.11 182.372 737.086 183.971 737.039 185.545 cv
737.105 180.747 li
cp
734.91 170.071 mo
731.573 168.938 731.744 167.853 731.744 167.853 cv
721.417 168.671 716.308 167.462 714.168 166.662 cv
727.237 162.174 735.617 161.563 735.617 161.563 cv
736.661 168.085 737.083 174.569 737.105 180.727 cv
734.397 175.43 734.91 170.071 734.91 170.071 cv
cp
733.169 119.963 mo
735.047 109.82 750.408 77.1602 750.408 77.1602 cv
733.032 92.7185 706.77 129.169 706.77 129.169 cv
706.77 129.169 726.424 106.716 724.6 110.175 cv
722.776 113.635 690.443 155.676 690.047 152.598 cv
689.649 149.521 700.093 139.226 700.093 139.226 cv
690.577 147.837 683.728 157.096 678.839 165.448 cv
679.04 162.905 679.35 155.336 675.878 155.719 cv
675.878 155.719 679.649 147.528 696.173 129.674 cv
696.173 129.674 679.657 146.527 674.004 156.352 cv
674.004 156.352 682.964 153.081 675.728 171.115 cv
669.447 183.408 667.617 192.58 667.617 192.58 cv
682.666 180.675 696.905 173.32 708.433 168.777 cv
708.721 168.759 730.465 167.37 732.812 170.108 cv
734.803 172.432 736.44 181.942 736.904 184.868 cv
736.987 185.385 737.031 185.688 737.035 185.717 cv
736.759 194.768 735.7 202.867 734.625 209.015 cv
732.024 212.242 724.94 221.015 724.253 221.656 cv
724.253 221.656 724.943 225.549 720.716 227.408 cv
720.575 227.471 720.428 227.535 720.284 227.599 cv
720.227 227.624 720.177 227.647 720.125 227.67 cv
719.229 228.065 718.293 228.469 717.269 228.891 cv
706.645 233.266 706.728 231.978 706.84 231.694 cv
706.435 232.525 698.128 249.602 691.241 265.694 cv
691.204 264.46 691.167 262.778 691.197 261.825 cv
691.249 260.196 703.42 235.561 703.42 235.561 cv
691.144 258.827 li
691.144 258.827 690.514 267.4 689.53 269.743 cv
689.492 269.839 li
688.804 271.491 688.141 273.116 687.513 274.694 cv
680.777 288.123 662.37 308.916 662.367 308.92 cv
654.115 315.417 652.941 312.625 652.941 312.625 cv
652.941 312.625 649.455 319.027 646.795 323.701 cv
644.136 328.374 631.285 352.764 631.285 352.764 cv
651.779 324.47 li
651.779 324.47 649.858 322.447 653.374 317.758 cv
654.687 316.008 658.132 313.288 661.935 310.567 cv
667.537 306.703 681.76 307.018 681.76 307.018 cv
694.541 295.675 li
697.358 295.047 li
694.647 295.095 li
694.88 293.903 695.551 290.807 697.184 285.19 cv
697.184 285.19 696.732 286.276 694.522 294.583 cv
694.522 294.583 685.725 305.92 677.635 306.32 cv
669.547 306.719 668.219 306.25 668.218 306.25 cv
672.354 303.502 675.706 301.427 675.706 301.427 cv
675.706 301.427 679.015 294.685 683.021 288.617 cv
687.026 282.548 712.333 250.227 712.333 250.227 cv
707.184 249.804 718.854 241.03 724.645 239.043 cv
730.437 237.056 742.561 234.614 742.561 234.614 cv
738.863 229.024 740.263 220.945 740.263 220.945 cv
734.353 206.483 738.967 186.352 743.213 174.452 cv
747.459 162.553 746.835 146.627 746.835 146.627 cv
739.77 154.12 720.811 157.711 720.811 157.711 cv
720.811 157.711 712.893 165.391 708.82 167.69 cv
707.685 168.331 705.025 169.359 701.779 170.507 cv
701.774 170.508 689.278 172.191 687.341 171.646 cv
685.412 171.105 687.859 166.538 687.883 166.495 cv
692.535 159.83 697.266 153.842 697.266 153.842 cv
695.145 150.232 707.152 133.844 718.499 119.699 cv
718.497 119.702 732.927 103.524 735.53 107.215 cv
732.273 120.809 724.493 135.711 724.493 135.711 cv
731.48 123.763 737.179 126.233 737.179 126.233 cv
738.383 125.013 740.108 122.964 742.074 120.5 cv
742.074 120.501 748.667 114.463 753.389 112.581 cv
772.461 86.2821 li
752.011 112.605 li
752.011 112.605 747.108 116.505 745.053 116.694 cv
751.964 107.721 760.044 96.3977 760.044 96.3977 cv
760.044 96.3977 752.735 104.624 751.943 103.481 cv
751.152 102.338 773.724 70.4512 773.724 70.4512 cv
744.364 108.541 733.169 119.963 733.169 119.963 cv
cp
0 0 0 rgb
f
357.419 125.895 mo
364.915 134.413 366.709 138.923 366.709 138.924 cv
366.627 140.904 366.59 142.096 366.59 142.096 cv
361.245 134.427 359.188 130.051 357.419 125.895 cv
cp
343.823 143.195 mo
343.823 143.195 342.816 157.901 341.75 163.591 cv
340.75 147.854 342.424 139.481 342.424 139.481 cv
342.854 140.729 343.324 141.969 343.825 143.197 cv
343.823 143.195 li
cp
397.87 54.9611 mo
397.87 54.9611 392.811 57.182 390.68 57.7851 cv
395.953 51.1795 400.432 47.2043 400.432 47.2043 cv
401.316 50.7731 401.228 55.7877 400.999 59.366 cv
397.87 54.9611 li
cp
421.956 66.0418 mo
421.953 66.0622 420.354 76.0632 419.635 76.6861 cv
417.455 74.2091 419.487 69.7607 421.956 66.0418 cv
cp
423.554 63.7928 mo
421.962 66.0327 li
422.486 65.2439 423.028 64.4895 423.554 63.7928 cv
cp
381.307 85.0711 mo
381.307 85.0711 380.995 81.9668 381.223 80.3045 cv
381.451 78.6423 386.98 71.5121 386.98 71.5121 cv
379.702 80.3314 li
379.702 80.3314 381.913 83.004 380.41 85.2155 cv
379.215 86.9737 375.407 92.1387 373.893 94.1863 cv
374.367 91.4148 374.912 88.7695 375.546 86.3295 cv
378.041 76.7174 383.05 68.0893 387.924 61.3948 cv
391.719 56.5166 398.074 55.6 398.074 55.6 cv
398.074 55.6 400.965 59.0411 400.79 61.9893 cv
400.684 63.1009 400.596 63.7812 400.596 63.7812 cv
403.151 70.1624 401.149 95.1317 400.097 101.062 cv
399.88 102.283 399.579 103.999 399.239 105.949 cv
398.801 103.465 398.755 97.8729 398.755 97.8729 cv
399.271 95.0134 399.579 89.0686 399.762 83.4433 cv
399.134 90.9857 398.034 98.0142 398.034 98.0142 cv
399.601 104.027 398.081 112.594 398.081 112.594 cv
397.024 118.678 396.012 124.526 396.012 124.526 cv
396.012 124.526 397.838 118.71 397.371 121.375 cv
396.903 124.039 395.299 135.078 395.299 135.078 cv
395.299 135.078 396.664 132.355 403.533 113.726 cv
410.402 95.097 417.284 88.1637 417.903 83.1403 cv
418.521 78.1169 421.085 77.7504 421.085 77.7504 cv
420.94 77.682 420.809 77.6073 420.679 77.5317 cv
419.886 76.9054 421.856 66.449 423.56 63.7854 cv
424.013 63.1856 424.454 62.6278 424.858 62.1322 cv
428.318 57.8941 429.187 56.1437 429.187 56.1437 cv
427.18 58.9424 427.889 54.9475 430.278 52.4614 cv
432.668 49.9754 431.51 53.0395 431.51 53.0395 cv
435.699 49.2116 437.685 43.6768 437.685 43.6768 cv
433.86 50.2562 428.071 52.4147 428.071 52.4147 cv
428.071 52.4147 428.655 56.3458 424.799 61.2122 cv
420.943 66.0785 413.86 72.544 413.86 72.544 cv
413.86 72.544 413.801 88.6536 410.664 95.3923 cv
407.527 102.131 402.671 108.557 402.671 108.557 cv
409.206 90.4483 409.931 63.5308 409.931 63.5308 cv
408.047 63.5641 406.132 61.8842 408.286 57.7334 cv
410.441 53.5825 410.948 43.4629 410.948 43.4629 cv
402.352 41.9009 414.102 27.9842 414.102 27.9842 cv
414.102 27.9842 408.517 33.0569 403.566 37.7175 cv
402.789 38.4474 402.624 37.869 402.316 37.446 cv
402.009 37.023 404.732 33.5047 404.732 33.5047 cv
396.248 43.1653 li
401.681 37.8428 li
401.681 37.8428 403.733 37.5596 401.317 39.8485 cv
399.443 41.6405 397.83 43.2252 396.909 44.2247 cv
393.378 48.057 393.685 45.9952 393.685 45.9952 cv
389.805 49.491 386.481 55.3761 386.481 55.3761 cv
389.451 58.5797 383.23 65.3728 378.93 74.1883 cv
374.63 83.0039 370.772 97.4669 370.772 97.4669 cv
372.101 95.0443 372.158 98.2993 370.914 105.519 cv
369.671 112.738 369.55 105.885 369.55 105.885 cv
367.978 114.264 367.139 129.228 366.79 137.037 cv
366.79 137.037 357.497 126.082 356.182 122.967 cv
355.385 121.097 354.51 119.131 353.291 116.797 cv
348.68 107.967 344.62 99.1277 344.62 99.1277 cv
343.216 104.808 344.103 110.79 344.103 110.79 cv
344.103 110.79 347.177 110.221 347.19 120.675 cv
347.203 131.128 351.656 150.414 351.656 150.414 cv
346.047 143.315 343.663 126.221 343.663 126.221 cv
341.368 133.63 341.208 141.002 341.208 141.002 cv
339.336 141.72 li
339.286 144.574 339.324 147.423 339.425 150.251 cv
338.712 149.106 338.257 147.33 338.257 147.33 cv
338.5 137.022 li
337.895 147.486 li
337.895 147.486 339.45 151.063 339.587 153.881 cv
341.243 183.222 349.822 209.139 349.822 209.139 cv
345.556 193.738 343.35 180.689 342.291 170.196 cv
341.749 163.376 343.863 147.928 344.357 144.462 cv
351.727 161.654 365.048 176.097 365.048 176.097 cv
344.721 145.866 348.58 116.88 348.58 116.88 cv
358.075 123.267 359.528 132.753 360.754 136.715 cv
361.981 140.678 372.766 154.626 372.766 154.626 cv
371.36 148.649 370.341 124.042 372.671 102.97 cv
374.174 92.6067 381.307 85.0711 381.307 85.0711 cv
cp
f
912.036 236.347 mo
912.036 236.347 894.224 228.124 899.192 226.579 cv
908.009 224.778 915.839 223.641 915.839 223.641 cv
915.839 223.641 927.803 241.253 928.897 245.003 cv
929.27 246.282 928.97 248.906 928.365 251.837 cv
924.696 248.401 912.036 236.347 912.036 236.347 cv
cp
879.724 226.068 mo
879.724 226.068 884.183 224.789 882.745 228.033 cv
873.34 230.044 864.374 230.204 864.374 230.204 cv
867.641 222.755 871.116 215.579 874.681 208.729 cv
877.304 205.325 879.724 226.068 879.724 226.068 cv
cp
852.938 316.015 mo
852.938 316.015 854.768 316.83 855.554 317.838 cv
848.895 319.655 842.986 319.521 842.986 319.521 cv
845.238 315.151 847.83 310.969 850.569 307.031 cv
851.215 307.467 852.446 309.191 852.938 316.015 cv
cp
851.24 325.974 mo
851.24 325.974 840.42 324.44 841.508 323.146 cv
841.537 323.111 841.556 323.083 841.582 323.051 cv
856.373 316.569 860.138 320.418 860.138 320.418 cv
860.138 320.418 858.958 325.959 857.214 333.094 cv
855.098 333.33 851.24 325.974 851.24 325.974 cv
cp
896.984 271.956 mo
896.984 271.956 896.608 279.761 891.001 282.516 cv
885.395 285.271 882.65 280.264 882.65 280.264 cv
883.638 282.817 li
883.638 282.817 872.729 285.579 870.164 284.131 cv
875.843 278.58 879.907 275.343 879.907 275.343 cv
879.907 275.343 881.707 270.513 884.761 268.745 cv
887.814 266.978 899.754 267.624 899.754 267.624 cv
899.754 267.624 899.586 264.028 909.108 269.515 cv
918.63 275.003 929.607 285.262 929.607 285.262 cv
933.754 277.478 932.884 257.272 932.884 257.272 cv
932.01 266.027 li
929.199 252.367 932.145 234.835 932.145 234.835 cv
933.844 243.717 933.172 254.182 933.172 254.182 cv
934.382 245.078 933.529 216.132 933.529 216.132 cv
933.529 216.132 917.095 217.107 903.484 222.66 cv
889.872 228.212 893.07 224.9 893.07 224.9 cv
891.419 225.604 889.664 226.212 887.868 226.742 cv
876.252 230.649 878.475 201.686 878.481 201.612 cv
900.759 160.903 925.046 133.511 925.046 133.511 cv
904.208 156.842 li
904.208 156.842 897.852 165.694 894.161 170.215 cv
890.471 174.735 888.352 171.174 888.352 171.174 cv
883.678 176.509 878.68 182.918 873.771 189.596 cv
873.771 189.596 871.846 192.234 870.531 193.097 cv
869.216 193.96 867.389 189.837 867.389 189.837 cv
872.071 174.435 886.055 162.389 886.055 162.389 cv
872.729 172.006 864.415 188.861 864.415 188.861 cv
864.415 188.861 872.174 191.774 866.209 200.168 cv
853.42 218.497 842.879 235.725 842.879 235.725 cv
854.785 220.948 li
843.609 238.282 835.366 256.721 835.366 256.721 cv
850.786 246.81 870.71 239.689 870.71 239.689 cv
870.71 239.689 868.636 238.698 876.769 233.413 cv
879.682 231.52 885.526 229.73 891.823 228.212 cv
892.01 228.169 892.213 228.121 892.445 228.062 cv
898.153 226.596 928.89 248.782 927.605 255.094 cv
926.385 259.839 924.741 264.417 924.105 264.795 cv
922.918 265.502 917.091 265.433 917.091 265.433 cv
917.091 265.433 923.324 269.093 917.824 268.162 cv
912.324 267.231 900.049 261.107 900.049 261.107 cv
911.055 263.312 li
911.055 263.312 894.326 257.266 889.995 254.601 cv
885.664 251.935 889.11 243.306 889.11 243.306 cv
872.534 269.132 li
872.534 269.132 869.349 279.128 855.802 298.046 cv
855.615 298.308 855.44 298.545 855.258 298.797 cv
855.217 298.805 852.422 299.363 853.753 295.69 cv
855.094 291.989 864.458 277.548 864.458 277.548 cv
853.692 292.257 li
853.692 292.257 850.167 280.09 849.575 273.822 cv
848.983 267.553 867.3 247.461 867.3 247.461 cv
858.063 255.164 845.195 272.869 845.195 272.869 cv
853.395 275.411 851.152 299.62 851.152 299.62 cv
851.152 299.62 855.952 297.084 853.048 301.782 cv
842.462 315.7 843.643 308.2 843.643 308.2 cv
834.366 316.589 831.316 328.296 831.316 328.296 cv
833.379 327.112 835.294 326.083 837.086 325.177 cv
843.77 321.975 857.608 329.632 856.03 337.822 cv
854.608 343.37 852.956 349.319 851.308 354.162 cv
846.91 367.092 837.081 392.799 837.081 392.799 cv
845.315 383.572 li
837.106 403.938 li
839.209 396.875 li
829.143 418.816 li
831.236 401.471 li
813.522 436.742 li
829.184 411.446 li
827.532 424.671 li
827.532 424.671 843.095 393.722 847.942 386.781 cv
852.79 379.841 860.468 368.224 860.468 368.224 cv
841.426 386.554 li
841.426 386.554 853.347 362.866 856.009 358.363 cv
858.672 353.861 877.973 321.132 877.973 321.132 cv
868.267 334.327 li
883.388 307.499 li
869.179 318.031 864.82 313.824 864.82 313.824 cv
862.642 315.249 860.264 316.316 857.904 317.118 cv
850.392 318.978 853.355 303.322 853.393 303.124 cv
858.043 296.924 862.925 291.473 867.22 287.076 cv
871.515 283.973 889.812 283.052 890.515 284.067 cv
891.218 285.083 887.387 296.203 887.387 296.203 cv
887.387 296.203 897.633 279.569 896.984 271.956 cv
cp
f
73.8122 199.872 mo
73.8122 199.872 78.7672 204.755 78.352 206.881 cv
74.1645 209.811 68.7189 213.214 64.7686 214.207 cv
64.7686 214.207 64.455 205.304 70.7056 191.084 cv
70.7754 191.141 72.6139 192.691 73.8122 199.872 cv
cp
165.572 70.7076 mo
165.572 70.7076 161.588 68.2931 159.888 64.2103 cv
159.888 64.2103 120.501 73.065 123.174 69.8458 cv
129.039 63.0834 135.705 56.1139 143.257 49.1662 cv
143.257 49.1662 118.552 57.3136 92.3726 88.7072 cv
92.3726 88.7072 104.821 65.7814 119.336 53.1869 cv
110.543 59.854 li
110.543 59.854 121.292 47.4973 130.098 41.5155 cv
124.226 48.6451 li
124.226 48.6451 128.732 44.7549 134.225 40.5225 cv
141.324 34.725 152.047 34.9707 154.398 40.5828 cv
154.768 41.4652 154.99 41.9725 155.111 42.2157 cv
157.057 46.7445 158.872 51.5826 159.292 54.7099 cv
159.292 54.7099 166.032 48.2504 167.27 69.8209 cv
167.747 78.137 169.577 88.317 167.373 101.216 cv
166.664 103.656 165.572 70.7076 165.572 70.7076 cv
cp
139.596 36.5359 mo
143.29 33.9123 146.936 31.604 149.611 30.5465 cv
149.611 30.5465 150.65 32.5557 152.05 35.4873 cv
152.216 37.355 144.601 35.5188 144.601 35.5188 cv
144.601 35.5188 138.846 38.0729 139.596 36.5359 cv
cp
73.0255 184.414 mo
73.0255 184.414 58.7784 214.655 56.4958 230.975 cv
56.4958 230.975 114.771 212.125 148.414 147.269 cv
148.414 147.269 136.77 167.181 128.986 172.803 cv
121.203 178.424 161.381 124.591 154.431 138.594 cv
154.431 138.594 159.999 129.405 165.102 113.563 cv
170.881 99.6608 178.2 106.579 177.805 113.344 cv
177.805 113.344 185.539 97.0888 176.799 54.8295 cv
176.799 54.8295 181.693 85.9749 177.551 98.9005 cv
173.409 111.826 171.549 101.13 171.549 101.13 cv
171.549 101.13 167.184 112.978 168.018 103.446 cv
173.836 80.6135 177.1 48.299 166.238 11.3172 cv
166.238 11.3172 155.472 13.0493 135.15 26.7744 cv
114.828 40.4996 122.897 31.6175 122.897 31.6175 cv
122.897 31.6175 109.997 45.6978 98.2756 65.2607 cv
96.8864 67.5457 93.7526 69.7896 93.411 64.9957 cv
93.0694 60.2019 105.87 42.714 105.87 42.714 cv
95.5228 53.5641 89.5957 67.2924 89.5957 67.2924 cv
89.5957 67.2924 97.6617 64.9174 93.1459 74.3679 cv
86.9221 86.1966 81.7384 99.3565 80.1078 112.315 cv
80.1078 112.315 92.742 85.359 107.997 75.8361 cv
107.997 75.8361 103.161 93.1438 96.9093 103.022 cv
96.9093 103.022 89.3986 119.263 86.3728 127.456 cv
86.3728 127.456 94.8428 104.746 117.311 76.8585 cv
123.426 69.598 153.438 66.1638 160.279 66.9388 cv
166.843 67.6825 167.362 103.546 163.822 114.507 cv
159.449 126.547 151.22 140.59 136.197 157.105 cv
130.494 162.326 132.888 151.141 132.888 151.141 cv
127.049 150.388 124.079 147.184 124.079 147.184 cv
124.079 147.184 117.983 148.554 115.002 147.516 cv
108.298 145.179 104.978 138.638 104.97 132.526 cv
104.962 126.414 113.087 116.678 113.087 116.678 cv
113.087 116.678 104.003 126.289 104.349 130.395 cv
104.695 134.502 106.526 143.038 106.526 143.038 cv
100.996 149.066 li
100.996 149.066 106.541 143.895 107.661 144.218 cv
108.781 144.54 114.326 148.041 114.326 148.041 cv
103.065 150.811 li
103.065 150.811 113.147 149.195 116.396 148.795 cv
128.304 147.328 137.992 153.148 128.28 165.4 cv
121.45 172.235 113.492 179.464 104.219 187.12 cv
104.219 187.12 113.551 181.814 103.114 192.452 cv
92.6766 203.09 76.8593 209.88 84.6067 202.204 cv
84.6067 202.204 83.5253 203.082 81.8188 204.364 cv
76.9599 207.838 70.1047 194.323 73.4233 185.405 cv
78.2949 176 85.8962 164.811 97.7842 152.617 cv
97.7842 152.617 77.6849 169.252 81.9365 157.695 cv
81.9365 157.695 73.5964 161.896 62.9127 174.43 cv
59.7794 177.104 47.1339 183.095 56.2864 170.528 cv
64.2827 159.549 74.2573 155.578 77.5232 154.519 cv
56.9972 160.621 48.3158 179.725 48.3158 179.725 cv
52.4239 176.122 58.3351 178.702 53.1872 187.518 cv
52.7902 188.127 52.3925 188.749 51.9944 189.381 cv
46.1582 198.647 40.2325 210.339 34.9698 225.014 cv
34.9698 225.014 40.0539 212.072 47.621 203.884 cv
47.621 203.884 27.0067 239.892 18.6574 271.743 cv
18.6574 271.743 33.1736 220.333 73.0255 184.414 cv
cp
f
1137.12 71.859 mo
1137.12 71.859 1134.01 72.3597 1135.68 69.7002 cv
1139.72 65.6889 1142.57 62.478 1142.57 62.478 cv
1141.76 68.6242 1140.57 74.6541 1139.19 80.3807 cv
1139.04 80.8252 1138.44 81.6336 1137.12 71.859 cv
cp
1135.48 47.5253 mo
1134.57 44.6591 1142.85 49.6546 1141.45 51.436 cv
1139.36 53.9777 1137.64 55.7475 1137.64 55.7475 cv
1137.32 53.4292 1136.46 50.4221 1135.49 47.5352 cv
1135.49 47.5315 1135.48 47.529 1135.48 47.5253 cv
cp
1071.51 100.887 mo
1071.51 100.887 1071.9 93.3763 1074.01 99.382 cv
1075.89 104.722 1073.65 105.639 1073.13 105.777 cv
1074.83 105.394 1098.06 100.186 1097.19 101.039 cv
1073.14 112.718 1052.06 112.033 1052.06 112.033 cv
1054.88 97.546 1060.29 85.07 1066.6 74.6198 cv
1066.79 74.3492 1067.08 73.8806 1067.5 73.156 cv
1067.52 73.1334 1067.53 73.1101 1067.55 73.0875 cv
1070.68 67.8171 1071.51 100.887 1071.51 100.887 cv
cp
1108.26 104.978 mo
1107.33 107.607 1103.94 102.305 1103.94 102.305 cv
1100.42 103.531 1100.12 101.795 1103.49 99.0157 cv
1108.21 96.549 1111.5 94.9562 1111.5 94.9562 cv
1110.6 98.1567 1109.5 101.518 1108.26 104.978 cv
cp
1150.95 63.4919 mo
1149.63 68.8677 1143.8 74.0652 1143.8 74.0652 cv
1141.82 43.084 1152.8 45.0005 1152.8 45.0005 cv
1153.94 47.5208 1152.01 59.9402 1152.01 59.9402 cv
1155.21 48.7436 1155.85 33.3125 1155.85 33.3125 cv
1148.73 45.1739 1148.36 40.4497 1148.36 40.4497 cv
1147.61 42.6392 1146.17 45.0523 1144.6 47.306 cv
1144.57 47.3524 1144.53 47.4102 1144.49 47.4642 cv
1144.42 47.5637 1144.35 47.6631 1144.28 47.7619 cv
1142.57 50.2359 1135.34 47.1114 1133.5 42.0619 cv
1132.53 39.5675 1131.78 37.83 1131.78 37.83 cv
1131.78 37.83 1130.86 43.7351 1129.18 38.0926 cv
1126.04 27.5842 1121.53 21.3184 1121.53 21.3184 cv
1110.08 26.4887 1100.21 32.1936 1091.69 38.1208 cv
1091.73 38.0859 li
1091.73 38.0859 1091.65 38.1482 1091.5 38.2548 cv
1090.41 39.0122 1089.35 39.7725 1088.31 40.5365 cv
1082.17 44.8648 1070.39 52.8404 1075.54 46.5475 cv
1080.99 39.884 1088.04 35.6734 1090.68 34.2355 cv
1074.13 42.9582 1069.43 51.0519 1069.43 51.0519 cv
1074.7 47.9815 1077.64 48.4021 1072.24 54.0502 cv
1071.57 54.6996 1070.91 55.3481 1070.26 55.9959 cv
1070.23 56.0301 1070.19 56.062 1070.16 56.0965 cv
1045.01 81.3933 1039.93 105.271 1039.93 105.271 cv
1041.97 93.5324 1047.17 85.6629 1047.17 85.6629 cv
1030.93 109.825 1031.71 131.632 1031.71 131.632 cv
1061.21 128.491 1090.48 108.575 1090.48 108.575 cv
1090.48 108.575 1069.88 119.377 1082.11 111.324 cv
1086.96 108.127 1092.59 104.891 1097.62 102.148 cv
1097.73 102.086 1097.87 102.014 1098.01 101.934 cv
1102.67 99.3489 1098.29 104.699 1098.29 104.699 cv
1102.92 100.121 1107.46 104.685 1105.61 111.955 cv
1105.02 113.428 1104.42 114.91 1103.79 116.398 cv
1091.37 145.992 1072.24 177.798 1072.24 177.798 cv
1072.09 155.621 1092.1 131.02 1092.1 131.02 cv
1087.69 135.96 1083.48 141.559 1079.54 147.465 cv
1079.4 147.621 1079.24 147.803 1079.03 148.047 cv
1076.48 151.083 1080.07 142.36 1080.07 142.36 cv
1080.07 142.36 1075.81 150.658 1075.2 145.738 cv
1074.58 140.819 1086.37 123.758 1086.37 123.758 cv
1075.73 136.077 1070.81 151.297 1070.81 151.297 cv
1070.81 151.297 1080.35 141.857 1075.57 153.625 cv
1057.64 182.559 1045.93 215.805 1045.93 215.805 cv
1045.93 215.805 1071.43 169.981 1071.09 174.031 cv
1070.74 178.081 1066.52 189.592 1066.52 189.592 cv
1079.27 175.643 1085.93 162.307 1085.93 162.307 cv
1075.66 176.749 li
1077.62 165.035 1096.47 142.941 1096.47 142.941 cv
1089.13 157.561 li
1100.54 140.437 1105.18 125.752 1108.67 122.53 cv
1112.16 119.307 1117.6 109.573 1117.6 109.573 cv
1117.6 109.573 1113.92 113.929 1118.24 102.923 cv
1122.57 91.9158 1123.16 83.3122 1123.16 83.3122 cv
1117.87 88.2141 1112.41 92.2676 1106.98 95.6413 cv
1103.18 97.7603 1082.78 105.745 1078.05 102.185 cv
1073.16 98.5014 1065.83 78.1482 1074.93 62.5146 cv
1089.39 43.8748 1104.77 34.472 1104.77 34.472 cv
1087.34 44.8394 1078.18 55.8931 1078.18 55.8931 cv
1094.41 32.2726 1119.95 22.6417 1119.95 22.6417 cv
1130.11 47.8435 1125.54 78.8168 1125.54 78.8168 cv
1127.76 77.0618 1129.98 75.1126 1132.04 73.1883 cv
1132.36 72.895 1132.64 72.6289 1132.92 72.3634 cv
1138.59 67.7588 1138.12 84.7806 1137.4 87.328 cv
1131.93 107.073 1124.89 121.672 1124.89 121.672 cv
1152.28 87.1001 1158.94 61.5778 1158.94 61.5778 cv
1155.58 74.0793 1138.38 97.2811 1138.38 97.2811 cv
1145.78 87.5343 1150.95 63.4919 1150.95 63.4919 cv
cp
f
1005.38 75.6115 mo
1005.38 75.6115 1005.85 78.5405 1005.03 83.3648 cv
1004.36 84.0974 1004.69 80.3807 1004.69 80.3807 cv
1003.57 80.6108 1001.24 80.2051 1001.98 78.8595 cv
1005.38 75.6115 li
cp
985.788 111.233 mo
985.788 111.233 995.184 103.487 993.482 107.276 cv
989.756 111.88 984.91 116.711 978.569 121.579 cv
978.569 121.579 979.766 119.132 980.168 114.015 cv
981.338 110.082 985.788 111.233 985.788 111.233 cv
cp
953.874 131.941 mo
954.91 129.244 955.224 140.862 955.224 140.862 cv
955.224 140.862 958.145 145.25 955.932 149.404 cv
953.795 152.149 951.229 154.954 948.123 157.762 cv
948.123 157.762 951.032 146.688 953.873 131.942 cv
953.873 131.941 953.873 131.941 953.874 131.941 cv
cp
1005.12 52.402 mo
1005.12 52.402 1007.29 55.7725 1005.44 59.6899 cv
991.827 88.5615 li
998.802 81.8985 li
1001.39 79.4236 1006.45 78.7253 1003.82 88.4928 cv
1002.73 92.0784 1000.97 96.2406 998.151 100.761 cv
992.131 107.328 981.062 114.95 980.213 107.673 cv
979.989 103.728 979.302 98.939 977.792 93.2369 cv
977.792 93.2369 971.153 115.366 965.944 119.723 cv
965.944 119.723 967.822 130.819 959.321 144.545 cv
956.217 148.506 953.592 135.521 955.631 122.21 cv
957.301 112.265 958.702 101.499 959.114 91.7011 cv
958.635 97.0216 956.241 110.369 945.164 136.856 cv
944.111 139.331 943.471 133.762 943.649 131.799 cv
943.828 129.829 955.293 100.909 955.293 100.909 cv
942.796 130.258 li
942.796 130.258 945.132 136.849 941.66 144.999 cv
939.541 149.802 937.18 154.959 934.521 160.529 cv
928.986 173.047 li
928.986 173.047 934.347 175.195 922.373 196.739 cv
922.373 196.739 930.487 190.158 940.396 177.541 cv
950.381 165.056 947.713 174.694 947.713 174.694 cv
947.713 174.694 957.219 166.223 960.558 160.176 cv
960.558 160.176 951.11 171.523 948.452 170.899 cv
945.794 170.275 949.075 165.427 949.075 165.427 cv
948.951 165.601 li
956.49 154.071 964.05 139.477 969.237 121.991 cv
969.237 121.991 974.139 124.486 969.855 131.024 cv
969.855 131.024 970.287 139.046 967.792 143.948 cv
965.298 148.85 962.211 156.213 962.211 156.213 cv
962.211 156.213 976.606 137.882 977.171 143.788 cv
977.171 143.788 986.976 118.985 989.078 123.302 cv
989.078 123.302 994.196 114.22 999.346 102.413 cv
1006.18 89.184 1006.69 105.424 994.359 120.762 cv
994.359 120.762 1004.48 114.193 1010.11 85.0633 cv
1010.11 85.0633 1008.07 94.4554 1005.54 98.4495 cv
1003.01 102.444 1005.29 87.119 1005.29 87.119 cv
1005.26 87.1997 li
1007.51 80.4712 1009.23 73.6977 1009.69 67.7629 cv
1009.69 67.7629 1007.47 69.0801 1003.57 73.4567 cv
1017.01 35.1501 li
1007.49 55.3427 li
1006.94 56.5045 1006.54 55.2761 1006.32 54.0755 cv
1006.1 52.8749 1023.19 13.3583 1023.19 13.3583 cv
1005.12 52.402 li
cp
f
614.851 286.839 mo
614.851 286.839 608.186 292.627 608.038 291.366 cv
608.755 288.078 609.587 284.879 610.652 281.852 cv
615.079 274.75 620.304 277.123 623.728 282.845 cv
623.76 284.086 614.851 286.839 614.851 286.839 cv
cp
598.102 323.93 mo
599.311 321.733 599.117 328.376 599.117 328.376 cv
599.117 328.376 606.028 327.645 605.244 328.359 cv
598.768 334.257 591.189 340.423 586.897 341.37 cv
586.897 341.37 592.861 333.187 597.99 324.12 cv
598.021 324.072 598.056 324.013 598.102 323.93 cv
cp
598.042 351.015 mo
595.432 354.311 595.608 339.913 598.181 336.335 cv
600.213 334.279 602.264 332.066 604.324 329.667 cv
604.324 329.667 603.658 340.702 598.042 351.015 cv
cp
574.19 368.195 mo
573.808 368.2 573.186 368.264 572.233 368.414 cv
571.935 368.439 571.629 368.453 571.325 368.471 cv
568.086 368.27 574.556 362.195 574.556 362.195 cv
574.556 362.195 576.436 353.664 580.154 351.205 cv
583.697 348.884 587.614 345.979 591.732 342.391 cv
591.765 342.363 591.792 342.341 591.827 342.312 cv
596.231 338.656 598.101 350.874 593.234 357.978 cv
588.836 363.003 582.712 367.019 574.19 368.195 cv
cp
558.8 389.785 mo
557.377 390.418 555.939 391.067 554.503 391.725 cv
549.142 394.236 544.779 394.042 543.359 393.613 cv
541.939 393.183 552.638 380.131 555.022 379.681 cv
557.311 379.255 560.824 378.573 563.748 378.001 cv
567.508 377.269 566.162 386.576 558.8 389.785 cv
cp
540.854 416.361 mo
540.694 416.473 li
540.747 416.436 540.801 416.398 540.854 416.361 cv
cp
538.362 393.023 mo
538.362 393.023 534.399 396.261 532.911 398.969 cv
532.911 398.969 536.03 389.119 546.425 382.767 cv
539.996 390.871 li
539.996 390.871 548.565 382.506 551.938 380.488 cv
552.903 380.058 541.205 394.802 541.205 394.802 cv
541.205 394.802 551.983 392.715 546.422 395.559 cv
540.05 398.703 534.378 401.839 530.968 404.469 cv
530.968 404.469 534.591 397.22 538.362 393.023 cv
cp
588.682 312.032 mo
589.118 310.853 590.213 307.978 591.578 304.414 cv
593.446 301.516 594.68 305.144 594.68 305.144 cv
594.68 305.144 602.461 294.61 601.899 297.374 cv
598.586 303.936 594.719 311.121 590.242 318.773 cv
590.24 318.771 587.062 316.41 588.682 312.032 cv
cp
610.704 281.699 mo
610.685 281.753 li
610.691 281.735 610.698 281.717 610.704 281.699 cv
cp
613.633 268.856 mo
611.966 267.806 612.196 266.103 612.196 266.103 cv
612.196 266.103 608.063 268.121 609.796 266.04 cv
611.383 264.484 612.929 263.443 613.929 263.929 cv
618.52 258.327 li
618.52 258.327 617.106 262.957 613.886 270.995 cv
612.512 273.142 613.633 268.856 613.633 268.856 cv
cp
622.72 277.505 mo
622.72 277.505 612.025 278.371 614.179 274.134 cv
619.663 264.813 623.543 255.583 624.662 245.961 cv
624.662 245.961 620.875 257.115 614.173 262.142 cv
614.173 262.142 621.365 246.263 625.48 242.925 cv
625.48 242.925 632.952 225.249 635.72 215.194 cv
635.72 215.194 626.096 241.01 612.76 254.492 cv
612.76 254.492 607.787 263.164 603.755 273.61 cv
603.755 273.61 604.818 272.001 606.292 270.088 cv
606.303 270.078 608.989 267.878 610.806 267.128 cv
612.626 266.376 614.043 270.591 611.925 275.763 cv
610.06 280.188 607.764 285.344 604.995 291.095 cv
602.268 294.842 596.272 303.815 594.508 303.882 cv
592.743 303.949 593.705 298.869 593.705 298.868 cv
597.136 289.936 600.99 279.944 600.99 279.944 cv
585.831 311.433 li
585.831 311.433 591.296 316.934 585.964 325.915 cv
579.42 336.592 571.744 348.022 562.801 359.813 cv
562.801 359.813 566.616 358.787 572.659 355.622 cv
572.303 355.922 572.635 355.77 574.249 354.768 cv
580.04 351.173 571.379 368.395 566.726 368.486 cv
563.253 368.311 559.466 367.729 555.326 366.647 cv
555.326 366.647 551.071 368.774 545.977 374.269 cv
545.977 374.269 550.736 367.284 558.222 361.609 cv
558.222 361.609 554.231 364.046 548.994 368.971 cv
548.998 368.965 539.599 377.131 546.255 364.197 cv
552.911 351.263 566.288 340.306 566.288 340.306 cv
549.71 352.562 539.853 369.044 539.853 369.044 cv
539.853 369.044 547.398 368.133 541.393 377.166 cv
536.139 383.68 530.865 392.259 527.605 402.975 cv
527.605 402.975 531.55 404.198 525.391 410.389 cv
525.391 410.389 541.844 395.198 558.905 392.742 cv
558.905 392.742 535.64 416.612 516.986 437.905 cv
516.986 437.905 529.227 424.496 540.601 416.539 cv
549.884 411.091 553.271 413.837 553.271 413.837 cv
566.427 403.819 li
566.427 403.819 553.417 412.417 551.542 412.796 cv
549.667 413.174 547.151 412.684 548.615 411.827 cv
548.642 411.812 548.659 411.799 548.683 411.785 cv
560.011 405.46 564.689 394.96 567.883 400.011 cv
567.883 400.011 577.463 391.912 582.341 379.937 cv
582.341 379.937 574.145 383.125 564.097 387.463 cv
561.911 388.122 566.247 382.378 566.247 382.378 cv
566.247 382.378 565.178 378.382 567.574 377.492 cv
568.003 377.333 568.186 377.214 568.209 377.124 cv
568.652 377.037 568.911 376.985 568.911 376.985 cv
568.911 376.985 567.084 375.682 572.418 374.045 cv
577.751 372.408 591.695 369.165 599.762 353.264 cv
599.762 353.264 595.868 359.832 593.649 359.858 cv
591.43 359.885 599.417 352.403 602.014 344.414 cv
604.411 337.04 605.97 338.441 604.752 342.629 cv
605.372 340.778 606.756 336.8 608.621 332.332 cv
612.906 325.692 619.472 323.814 619.472 323.814 cv
626.186 304.977 li
626.186 304.977 616.852 323.608 616.141 324.664 cv
615.431 325.719 609.751 329.47 611.151 326.682 cv
612.911 323.035 614.899 319.516 616.972 316.96 cv
616.972 316.96 614.002 320.065 609.834 324.065 cv
605.845 327.1 593.793 334.095 602.044 316.26 cv
603.442 313.181 604.519 310.244 604.989 307.747 cv
605.699 303.963 606.327 300.137 607.03 296.375 cv
608.754 288.3 622.993 282.677 625.09 285.518 cv
627.127 290.214 628.052 296.167 626.902 301.149 cv
626.902 301.149 635.74 283.873 636.368 260.873 cv
636.368 260.873 634.043 279.446 629.558 284.544 cv
625.073 289.642 625.295 282.336 622.72 277.505 cv
cp
f
1197.57 170.196 mo
1199.83 170.641 1196.04 187.827 1191.55 194.009 cv
1185.99 199.627 1179.96 205.212 1178.82 204.212 cv
1178.82 204.212 1174.67 213.91 1170.33 216.943 cv
1170.33 216.943 1167.97 203.979 1170.41 195.448 cv
1172.85 186.917 1174.22 204.259 1174.22 204.259 cv
1174.22 204.259 1177.81 191.771 1187.34 177.087 cv
1187.4 176.992 1187.49 176.861 1187.58 176.708 cv
1187.63 176.634 1187.68 176.559 1187.73 176.484 cv
1189.93 173.12 1195.34 169.754 1197.57 170.196 cv
cp
1197.74 187.571 mo
1195.99 189.429 1193.81 191.718 1191.55 194.009 cv
1191.55 194.006 1195.68 189.714 1197.74 187.571 cv
cp
1312.34 71.6161 mo
1291.3 72.9919 1300.92 66.0537 1300.92 66.0537 cv
1300.92 66.0537 1249.78 82.1732 1251.8 78.8244 cv
1265.96 68.7898 1285.78 59.8307 1312.56 57.811 cv
1312.56 57.811 1327.41 56.4702 1329.19 61.6244 cv
1330.97 66.7786 1327.31 91.2995 1327.31 91.2995 cv
1327.31 91.2995 1330.32 81.6132 1331.13 71.7195 cv
1331.13 71.7195 1333.47 87.132 1320.5 117.718 cv
1317.52 120.927 1318.46 94.9924 1318.46 94.9924 cv
1305.48 77.4246 1312.34 71.6161 1312.34 71.6161 cv
cp
1331.48 49.8763 mo
1331.48 49.8763 1275.87 63.0935 1262.16 70.7063 cv
1248.44 78.3191 1264.41 66.66 1264.41 66.66 cv
1264.41 66.66 1241.97 75.1673 1236.97 80.7363 cv
1236.97 80.7363 1238.53 53.4782 1293.22 6.93649 cv
1293.22 6.93649 1263.55 29.0434 1240.52 61.1142 cv
1240.49 61.1493 1240.47 61.179 1240.44 61.2184 cv
1239.45 62.5887 1239.28 59.2332 1240.29 57.2915 cv
1241.31 55.35 1264 24.143 1264 24.143 cv
1239.22 55.3833 li
1239.22 55.3833 1240.74 60.8088 1235.32 68.7156 cv
1229.45 77.7534 1224.26 87.453 1220.48 97.5733 cv
1220.48 97.5733 1225.4 95.6834 1221.6 106.412 cv
1222 111.466 li
1222 111.466 1227.97 99.1293 1242.46 86.2407 cv
1253.65 77.0669 1299.89 69.362 1304.2 72.2255 cv
1304.68 72.5437 1305.32 73.2151 1306.05 74.1621 cv
1306.15 74.3307 1306.29 74.523 1306.5 74.7564 cv
1306.57 74.8625 1306.65 74.9744 1306.73 75.0862 cv
1308.02 77.5288 1297.63 79.6274 1291.2 81.9946 cv
1284.51 84.4555 1276.81 83.4688 1276.81 83.4688 cv
1283.8 84.679 li
1283.8 84.679 1283.84 87.5198 1282.35 89.4066 cv
1280.86 91.2935 1257.33 109.378 1257.33 109.378 cv
1283.09 91.989 li
1283.09 91.989 1283.2 87.9611 1284.56 86.0505 cv
1285.91 84.142 1306.87 75.3676 1311.19 83.0346 cv
1316.63 94.7155 1321.65 113.795 1314.41 130.928 cv
1301.14 157.662 1291.41 165.005 1291.41 165.005 cv
1291.41 165.005 1245.02 173.95 1228.62 165.958 cv
1223.35 163.394 1219.17 159.045 1215.91 154.323 cv
1214.19 143.315 1218.48 149.204 1218.48 149.204 cv
1218.83 147.28 1219.11 144.9 1219.33 142.352 cv
1219.94 132.452 1229.94 131.162 1229.94 131.162 cv
1248.18 118.377 li
1248.18 118.377 1230 126.716 1226.66 130.432 cv
1223.31 134.149 1219.72 137.309 1219.85 134.291 cv
1220.17 127.455 1220.2 121.454 1220.2 121.454 cv
1220.2 121.454 1219.51 128.283 1218.36 135.212 cv
1218.23 135.484 1218.15 135.678 1218.15 135.678 cv
1218.22 136.04 li
1216.8 144.295 1214.76 152.311 1212.5 148.703 cv
1208.08 140.422 1206.24 132.663 1206.24 132.663 cv
1206.24 132.663 1197.27 142.871 1197.97 133.208 cv
1197.97 133.208 1186.8 147.736 1176.81 174 cv
1176.78 174.076 1176.75 174.145 1176.72 174.223 cv
1173.46 182.348 1174.42 179.391 1174.35 175.162 cv
1174.27 170.933 1187.69 142.778 1187.69 142.778 cv
1177.79 156.827 1172.7 175.883 1172.7 175.883 cv
1172.7 175.883 1175.3 178.076 1172.64 185.968 cv
1168.51 198.964 1164.94 214.187 1163.01 231.387 cv
1163.01 231.387 1168.42 220.871 1176.72 212.05 cv
1176.72 212.05 1171.88 221.985 1171 226.132 cv
1171 226.132 1172.85 227.607 1170.61 232.803 cv
1170.61 232.803 1168.89 239.265 1170.41 247.288 cv
1170.41 247.288 1167.62 233.064 1201.48 183.518 cv
1201.48 183.518 1200.26 184.868 1198.39 186.873 cv
1195.69 189.648 1199.32 169.107 1199.32 169.107 cv
1192.78 171.328 1192.93 169.193 1196.12 165.244 cv
1197.82 163.234 1199.64 161.232 1201.57 159.264 cv
1201.57 159.264 1216.62 158.304 1213.36 165.004 cv
1213.36 165.004 1234.4 177.163 1247.97 177.866 cv
1247.97 177.866 1240.23 177.141 1234.11 171.113 cv
1234.11 171.113 1252.71 179.887 1270.54 181.427 cv
1270.54 181.427 1261.23 181.178 1256.97 180.532 cv
1256.97 180.532 1275.49 185.84 1288.26 184.626 cv
1288.26 184.626 1285.55 176.445 1293.37 177.398 cv
1293.37 177.398 1298.74 172.298 1305.34 162.895 cv
1313.19 155.508 1315.64 163.375 1315.64 163.375 cv
1315.64 163.375 1327.28 141.98 1328.74 122.87 cv
1328.74 122.87 1323.76 145.793 1315.01 157.161 cv
1309.12 164.829 1314.37 150.191 1318.42 139.848 cv
1319.68 137.018 1320.89 134.039 1322.01 130.927 cv
1322.03 130.889 1322.04 130.863 1322.04 130.863 cv
1324.06 125.281 1325.82 119.239 1327.14 112.777 cv
1335.39 72.3653 1331.48 49.8763 1331.48 49.8763 cv
cp
f
674.051 51.5399 mo
673.451 53.4208 672.517 54.2904 671.94 54.6732 cv
673.331 51.4631 674.173 49.3815 674.173 49.3815 cv
674.64 50.9442 675.053 52.3916 675.425 53.7462 cv
674.051 51.5399 li
cp
681.137 66.7503 mo
681.739 65.5693 684.374 63.8991 685.615 63.1591 cv
682.885 68.1288 679.712 72.1869 679.712 72.1869 cv
679.712 72.1869 678.927 67.1204 678.491 61.0972 cv
679.723 62.0417 681.137 66.7503 681.137 66.7503 cv
cp
652.427 98.3143 mo
652.427 98.3143 653.712 97.7594 653.612 98.8785 cv
647.784 103.789 li
647.784 103.789 649.042 98.5058 652.581 91.3097 cv
652.829 92.6302 653.216 95.5698 652.427 98.3143 cv
cp
660.12 102.603 mo
660.573 100.041 660.591 96.782 657.136 98.6051 cv
661.015 94.3084 663.211 95.1233 660.12 102.603 cv
cp
638.784 142.802 mo
638.784 142.802 643.607 141.468 643.846 141.95 cv
639.711 145.096 635.404 147.282 635.404 147.282 cv
635.404 147.282 637.221 143.235 640.224 137.5 cv
640.33 138.815 638.784 142.802 638.784 142.802 cv
cp
630.796 155.944 mo
634.753 152.82 li
633.716 155 632.302 157.324 630.668 159.686 cv
630.153 159.55 630.796 155.944 630.796 155.944 cv
cp
694.047 17.7798 mo
691.277 35.2096 685.087 54.7571 685.087 54.7571 cv
685.087 54.7571 689.323 43.5173 689.485 51.4992 cv
689.542 54.2674 688.383 57.6035 686.846 60.7811 cv
686.805 60.8575 686.754 60.9603 686.691 61.0937 cv
686.671 61.1356 686.65 61.1775 686.629 61.2192 cv
685.676 63.2141 681.457 65.7526 681.457 65.7526 cv
681.457 65.7526 678.544 61.7563 678.315 58.189 cv
678.21 55.9915 678.17 53.7559 678.246 51.6621 cv
678.572 42.7028 675.477 34.2323 675.477 34.2323 cv
672.87 42.2141 671.241 42.0512 671.241 42.0512 cv
671.241 42.0512 668.961 54.4313 664.563 67.6259 cv
661.552 76.6566 655.719 84.0072 650.405 90.1504 cv
651.232 87.0195 652.997 84.0783 652.997 84.0783 cv
658.291 74.484 661.787 68.2164 661.787 68.2164 cv
658.291 74.0806 651.938 83.4267 651.938 83.4267 cv
651.938 83.4267 652.167 88.086 646.669 94.4234 cv
645.614 95.6377 644.61 96.8078 643.712 97.9244 cv
637.685 105.418 633.775 119.915 633.775 119.915 cv
638.173 113.562 642.572 114.051 642.572 114.051 cv
645.341 109.001 652.997 104.277 652.997 104.277 cv
653.969 102.704 654.915 101.346 655.806 100.202 cv
658.616 96.8763 662.371 97.8623 658.653 105.834 cv
658.46 106.227 658.26 106.629 658.047 107.047 cv
655.129 112.754 650.979 118.853 646.996 124.178 cv
646.829 124.352 646.681 124.553 646.55 124.774 cv
640.473 132.837 634.915 138.974 634.915 138.974 cv
635.241 141.906 626.934 147.608 626.934 147.608 cv
629.703 150.214 622.373 162.594 622.373 162.594 cv
629.77 156.754 li
629.771 156.754 631.323 158.727 628.902 162.146 cv
620.436 173.504 608.038 184.911 608.038 184.911 cv
620.523 173.904 629.388 164.673 635.672 157.256 cv
640.373 152.494 641.513 153.309 641.513 153.309 cv
641.513 153.309 646.58 148.126 648.474 143.29 cv
647.896 144.656 645.873 148.703 640.759 152.973 cv
638.859 154.56 638.622 154.203 639.21 152.942 cv
648.54 141.128 650.391 135.065 650.391 135.065 cv
649.698 136.352 648.667 137.618 647.469 138.82 cv
644.095 141.751 640.452 142.435 639.639 142.191 cv
638.832 141.949 642.257 133.719 643.01 132.345 cv
643.826 130.88 644.693 129.364 645.606 127.821 cv
649.121 122.151 658.047 121.544 658.047 121.544 cv
658.047 121.544 661.712 116.407 669.938 114.536 cv
669.938 114.536 672.952 111.2 674.336 106.395 cv
674.336 106.395 670.421 115.721 661.787 116.942 cv
663.667 110.223 li
663.667 110.223 661.236 116.685 660.333 118.286 cv
658.719 121.146 650.285 123.539 648.179 123.601 cv
650.95 119.2 654.018 114.786 657.232 110.956 cv
669.124 96.7842 669.775 86.1959 669.775 86.1959 cv
666.191 90.4313 663.748 89.7796 663.748 89.7796 cv
659.676 97.5986 655.929 96.9267 655.929 96.9267 cv
654.858 97.8288 li
651.218 100.895 654.075 88.4342 654.081 88.4094 cv
655.175 86.3959 656.436 84.2804 657.884 82.1236 cv
662.479 75.2802 667.423 64.8622 670.645 57.6216 cv
670.644 57.6232 674.051 52.273 674.051 52.273 cv
674.051 52.273 675.206 52.9557 676.311 57.1225 cv
680.18 72.6455 676.943 72.024 676.943 72.024 cv
678.246 83.5896 675.314 101.02 675.314 101.02 cv
677.768 96.7857 679.92 92.171 681.784 87.544 cv
683.17 83.9664 685.977 81.7569 686.978 80.9833 cv
686.978 80.9833 689.262 76.5667 689.384 68.7254 cv
689.384 68.7254 689.119 75.2616 685.993 81.4461 cv
685.993 81.4461 684.083 83.6415 682.979 84.4653 cv
688.81 68.977 691.44 54.2684 691.44 54.2684 cv
691.44 54.2684 689.811 53.7797 690.626 44.8205 cv
691.44 35.8612 694.047 17.7798 694.047 17.7798 cv
cp
f
523.222 136.445 mo
528.501 135.273 517.407 150.117 513.958 151.509 cv
511.262 151.833 509.409 151.751 508.899 151.072 cv
507.498 149.204 510.259 145.558 513.466 142.305 cv
515.594 140.146 518.074 138.396 520.77 137.136 cv
521.505 136.884 522.315 136.646 523.222 136.445 cv
cp
523.307 157.475 mo
522.409 158.256 521.296 159.153 520.038 160.123 cv
517.291 161.458 518.304 155.158 518.304 155.158 cv
518.304 155.158 511.653 152.843 514.319 152.196 cv
524.36 150.284 531.151 149.951 531.151 149.951 cv
531.151 149.951 530.671 151.072 523.307 157.475 cv
cp
575.935 91.1243 mo
571.143 90.1658 550.432 89.2493 557.525 86.8269 cv
561.412 85.9348 565.734 85.1783 570.532 84.6362 cv
598.867 81.4344 592.596 91.1245 588.461 99.5241 cv
584.327 107.924 575.174 111.851 575.174 111.851 cv
582.661 103.202 li
581.07 104.855 578.985 106.684 576.678 108.54 cv
576.424 108.724 576.075 109 575.604 109.394 cv
570.832 113.381 575.935 91.1243 575.935 91.1243 cv
cp
569.585 29.7049 mo
569.585 29.7049 573.152 32.9413 571.777 35.2663 cv
570.754 36.9653 570.052 37.8913 570.052 37.8913 cv
577.736 31.0076 569.571 48.3092 567.01 48.2968 cv
564.449 48.2845 566.37 43.014 566.37 43.014 cv
562.207 50.0578 556.444 54.3801 556.444 54.3801 cv
558.896 49.7826 561.09 42.6938 562.713 36.5491 cv
564.195 31.9995 569.585 29.7049 569.585 29.7049 cv
cp
554.27 46.0869 mo
554.27 46.0869 551.207 49.4821 551.351 47.7325 cv
555.986 42.3303 560.607 37.2509 560.607 37.2509 cv
560.424 39.1698 560.008 41.1813 559.457 43.1809 cv
558.803 45.0204 554.27 46.0869 554.27 46.0869 cv
cp
511.047 152.853 mo
511.185 152.872 511.373 152.869 511.622 152.833 cv
513.15 152.61 523.306 157.475 514.333 164.344 cv
505.35 170.783 494.331 177.966 494.331 177.966 cv
506.178 171.562 505.377 174.924 505.377 174.924 cv
530.831 164.038 521.226 172.043 513.382 181.328 cv
505.537 190.613 486.007 203.579 486.007 203.579 cv
517.704 186.29 534.673 162.918 534.673 162.918 cv
527.789 168.04 508.075 171.242 508.075 171.242 cv
509.172 168.04 538.835 154.913 538.835 154.913 cv
538.835 154.913 537.554 154.593 540.596 151.694 cv
543.638 148.794 551.322 145.949 551.322 145.949 cv
546.679 144.348 557.405 139.705 557.405 139.705 cv
557.405 139.705 534.74 147.26 520.35 150.375 cv
520.063 150.398 519.724 150.428 519.326 150.468 cv
512.876 151.114 520.876 146.3 520.876 146.3 cv
520.876 146.3 525.378 136.536 527.691 135.086 cv
528.982 134.909 530.293 134.835 531.615 134.879 cv
540.992 135.188 535.473 140.506 535.473 140.506 cv
540.596 138.585 543.958 140.506 543.958 140.506 cv
555.644 135.383 li
562.848 130.1 567.17 132.182 567.17 132.182 cv
581.098 124.017 589.582 106.888 589.582 106.888 cv
589.582 106.888 578.536 114.572 589.262 103.666 cv
599.988 92.7599 600.948 82.0748 600.948 82.0748 cv
599.347 89.4387 591.663 94.4013 591.663 94.4013 cv
598.548 78.5029 568.039 80.7147 551.194 83.8127 cv
548.6 83.464 555.897 78.0773 555.897 78.0773 cv
555.897 78.0773 556.672 75.676 557.565 72.6344 cv
558.459 69.5928 568.037 54.2246 568.037 54.2246 cv
556.511 70.7805 li
559.713 72.5285 551.469 83.2801 547.093 84.6409 cv
544.42 85.2355 542.399 85.8075 541.396 86.237 cv
534.673 89.1186 539.155 84.7962 539.155 84.7962 cv
534.513 88.4782 527.469 86.8774 527.469 86.8774 cv
535.313 74.2307 544.118 70.3886 544.118 70.3886 cv
540.916 70.0684 543.798 66.2264 543.798 66.2264 cv
543.798 66.2264 541.236 63.1847 542.037 59.9831 cv
542.334 58.7922 544.981 55.3414 548.186 51.4777 cv
554.268 45.4483 559.147 44.4653 558.473 46.3491 cv
555.976 53.6355 552.282 59.9831 552.282 59.9831 cv
579.817 54.8603 579.497 11.3172 579.497 11.3172 cv
578.739 20.6973 575.57 28.2816 573.109 32.911 cv
571.826 34.1339 570.065 28.4242 570.065 28.4242 cv
570.065 28.4242 564.621 33.7241 563.742 32.4883 cv
564.893 27.746 565.569 24.2841 565.569 24.2841 cv
554.683 34.8497 539.956 57.5817 539.956 57.5817 cv
541.877 55.8208 541.904 61.7611 540.116 67.1869 cv
538.328 72.6126 530.03 74.871 530.03 74.871 cv
529.015 76.4791 526.898 79.7834 524.341 83.7645 cv
523.371 85.2736 523.534 82.1594 522.333 77.7572 cv
521.133 73.3548 530.28 61.5885 530.28 61.5885 cv
524.14 68.5522 516.09 85.041 516.09 85.041 cv
516.09 85.041 520.092 79.6781 521.293 78.3174 cv
522.493 76.9568 524.619 83.331 520.296 90.0539 cv
513.8 100.147 506.658 111.21 506.658 111.21 cv
506.658 111.21 519.785 93.2807 516.263 100.805 cv
512.741 108.329 501.695 122.096 501.695 122.096 cv
519.945 107.208 530.671 101.445 530.671 101.445 cv
530.257 99.4807 535.195 94.3794 546.371 90.149 cv
556.138 86.6774 573.907 92.2982 573.907 92.2982 cv
573.907 92.2982 574.874 109.942 569.126 114.232 cv
562.657 118.86 556.765 122.576 556.765 122.576 cv
565.236 118.894 571.813 114.732 571.813 114.732 cv
556.604 130.1 529.23 134.102 529.23 134.102 cv
537.554 132.342 552.923 124.337 552.923 124.337 cv
537.554 131.061 520.585 134.743 520.585 134.743 cv
510.98 139.865 510.02 135.223 510.02 135.223 cv
505.826 137.852 500.948 142.391 496.561 146.944 cv
495.718 147.81 490.45 145.447 490.189 143.099 cv
489.929 140.751 499.669 126.932 499.669 126.932 cv
487.248 142.992 li
487.248 142.992 497.333 146.146 490.745 153.26 cv
486.805 157.724 484.086 161.157 484.086 161.157 cv
493.701 157.118 503.158 154.52 511.047 152.853 cv
cp
f
794.108 220.4 mo
794.108 220.4 797.242 219.105 796.834 220.168 cv
796.764 220.353 796.787 220.378 796.867 220.305 cv
796.529 221.363 796.152 222.497 795.731 223.708 cv
795.055 225.656 794.108 220.4 794.108 220.4 cv
cp
791.659 214.788 mo
781.843 219.161 774.365 220.199 774.752 218.865 cv
781.86 213.882 791.233 208.561 799.803 207.687 cv
799.803 207.687 799.772 210.384 797.856 217.055 cv
797.827 217.114 795.911 220.983 793.513 219.063 cv
791.096 217.128 791.659 214.788 791.659 214.788 cv
cp
788.557 189.791 mo
790.812 185.714 788.234 201.238 785.689 204.059 cv
785.689 204.059 799.026 200.846 796.881 203.912 cv
789.654 208.104 781.188 213.337 775.429 217.931 cv
775.429 217.931 780.051 205.587 788.557 189.791 cv
cp
811.46 155.098 mo
811.472 155.083 811.485 155.068 811.498 155.053 cv
812.034 154.429 812.294 154.117 812.35 154.033 cv
814.853 151.064 817.467 148.19 820.191 145.468 cv
820.191 145.468 818.088 146.502 816.851 146.918 cv
815.615 147.335 808.695 139.859 808.695 139.859 cv
808.695 139.859 811.355 131.908 819.046 127.112 cv
819.046 127.112 817.684 137.101 819.811 143.246 cv
819.811 143.246 830.948 128.198 855.418 131.713 cv
855.418 131.713 845.606 136.167 841.105 141.907 cv
840.177 143.09 839.401 144.237 838.735 145.322 cv
838.739 145.307 836.658 147.394 833.579 148.006 cv
833.579 148.006 807.642 159.556 811.46 155.098 cv
cp
854.552 59.663 mo
854.552 59.663 853.878 66.4417 851.575 71.0265 cv
851.575 71.0265 858.583 63.6378 850.657 74.9986 cv
851.206 74.2108 856.533 66.7526 868.086 56.9229 cv
872.448 53.3485 885.261 52.0123 885.261 52.0123 cv
885.261 52.0123 881.382 88.8513 875.759 104.159 cv
875.502 104.812 875.242 105.466 874.978 106.122 cv
874.163 107.996 873.7 109.135 873.505 109.708 cv
871.979 113.35 870.345 117.035 868.591 120.74 cv
860.877 122.612 li
860.877 122.612 863.292 123.58 853.354 126.391 cv
843.416 129.201 823.774 137.247 823.774 137.247 cv
823.774 137.247 825.241 125.419 827.239 117.672 cv
827.239 117.672 823.38 123.98 828.438 111.323 cv
828.438 111.323 826.84 114.389 823.372 119.219 cv
823.389 119.178 821.693 95.4455 824.188 88.3716 cv
835.102 77.1695 847.783 64.6422 854.552 59.663 cv
cp
859.452 59.6058 mo
860.337 57.5899 866.313 56.5358 865.736 57.7939 cv
862.787 60.5937 860.222 63.2346 858.243 65.5895 cv
858.243 65.5895 858.944 63.1038 859.451 59.609 cv
859.452 59.6078 859.452 59.6069 859.452 59.6058 cv
cp
874.537 51.7226 mo
879.786 47.699 885.972 43.4391 893.199 39.1788 cv
893.199 39.1788 890.464 62.0467 880.426 91.4499 cv
880.438 91.2462 880.449 91.0399 880.464 90.8183 cv
881.038 82.0733 886.615 59.2119 886.615 59.2119 cv
886.615 59.2119 883.481 56.5103 887.388 49.6049 cv
887.388 49.6049 869.602 57.2124 874.537 51.7226 cv
cp
793.399 230.037 mo
792.643 231.987 772.134 239.669 772.134 239.669 cv
738.567 278.739 li
738.567 278.739 757.127 258.487 775.582 245.962 cv
775.582 245.962 775.903 244.097 776.779 241.761 cv
777.654 239.425 783.201 233.511 793.991 235.066 cv
793.991 235.066 797.712 229.533 801.74 221.598 cv
804.511 215.814 813.9 211.549 813.9 211.549 cv
826.407 189.092 li
826.407 189.092 812.186 210.091 809.944 212.649 cv
807.787 215.113 803.466 218.996 806.419 211.325 cv
806.504 211.113 806.588 210.9 806.672 210.687 cv
806.712 210.587 806.748 210.493 806.791 210.389 cv
807.29 209.175 807.613 208.292 807.807 207.657 cv
809.156 203.869 810.28 199.961 810.96 196.122 cv
810.96 196.122 808.199 197.56 804.089 199.832 cv
797.891 203.328 787.38 202.541 787.38 202.541 cv
787.38 202.541 790.309 186.041 794.571 179.219 cv
794.99 178.549 795.289 178.054 795.494 177.696 cv
798.648 172.537 802.147 167.261 805.966 162.116 cv
809.032 158.164 838.298 144.851 836.455 149.561 cv
835.528 151.514 835.02 152.809 834.542 152.982 cv
833.568 153.334 831.99 153.722 831.99 153.722 cv
819.121 171.596 li
819.121 171.596 832.228 155.031 832.576 154.973 cv
832.925 154.915 834.609 154.277 834.609 154.277 cv
812.182 190.548 li
812.182 190.548 836.317 154.414 837.274 153.202 cv
837.274 153.202 836.31 147.022 841.364 142.959 cv
846.418 138.897 859.838 132.327 863.377 131.064 cv
866.917 129.802 869.195 130.329 869.195 130.329 cv
869.195 130.329 868.061 129.464 870.803 125.301 cv
873.544 121.138 877.646 115.022 877.646 115.022 cv
877.646 115.022 873.592 120.541 869.581 123.398 cv
865.569 126.256 877.538 102.465 880.539 99.3548 cv
883.539 96.2442 879.212 110.507 879.212 110.507 cv
879.212 110.507 883.65 102.581 889.138 90.6078 cv
894.353 78.6389 900.344 88.8933 888.982 106.2 cv
888.982 106.2 907.358 93.5828 917.021 54.6525 cv
917.021 54.6525 909.146 75.7159 902.298 82.3466 cv
895.449 88.9772 891.917 85.6403 896.199 74.0661 cv
902.434 58.2615 908.268 39.61 909.459 22.9532 cv
916.074 17.6409 li
916.074 17.6409 887.221 38.2131 868.84 54.9138 cv
866.487 57.0227 859.547 58.9248 859.861 55.8134 cv
859.974 54.1332 860.005 52.3563 859.879 50.5944 cv
859.879 50.5944 844.006 72.6954 822.895 84.0615 cv
845.941 41.6952 li
845.941 41.6952 823.966 80.8996 810.851 96.4882 cv
810.851 96.4882 811.868 101.481 804.42 109.133 cv
804.42 109.133 810.579 102.49 818.773 93.9672 cv
825.308 89.2823 821.831 121.305 816.769 127.58 cv
813.854 130.962 810.359 134.667 806.226 138.501 cv
806.226 138.501 806.926 139.416 805.798 140.615 cv
804.671 141.813 802.539 142.673 802.539 142.673 cv
802.539 142.673 812.507 150.179 813.384 151.023 cv
814.262 151.867 799.756 167.116 799.756 167.116 cv
804.747 163.306 li
793.991 178.427 li
796.607 172.621 li
785.169 190.868 li
785.169 190.868 786.118 176.935 787.11 173.147 cv
788.102 169.359 788.711 168.205 788.711 168.205 cv
789.53 153.746 li
800.967 142.977 li
792.889 149.375 li
792.889 149.375 793.392 148.47 793.806 146.526 cv
794.22 144.583 802.66 130.479 802.66 130.479 cv
802.66 130.479 792.857 145.504 792.03 147.243 cv
791.202 148.981 790.901 150.59 790.036 151.723 cv
789.172 152.857 788.09 154.317 788.09 154.317 cv
788.09 154.317 789.092 154.914 788.561 158.309 cv
788.03 161.704 788.591 168.625 784.534 173.112 cv
784.534 173.112 783.156 193.456 781.351 196.663 cv
779.546 199.87 763.271 228.041 763.271 228.041 cv
763.271 228.041 764.736 226.664 767.191 224.632 cv
771.726 221.026 790.857 215.949 790.857 215.949 cv
790.857 215.949 796.117 222.549 794.304 227.66 cv
794.016 228.429 793.718 229.216 793.399 230.037 cv
cp
f
171.387 228.853 mo
170.625 232.242 165.874 236.07 165.874 236.07 cv
165.874 236.07 165.622 239.026 163.917 244.338 cv
163.387 245.991 161.892 248.398 160.084 250.93 cv
158.29 252.422 158.686 231.757 158.686 231.757 cv
155.999 227.203 157.487 221.636 157.487 221.636 cv
157.487 221.636 145.674 225.368 150.882 220.336 cv
155.611 216.68 161.331 212.652 161.331 212.652 cv
161.678 212.908 li
166.568 217.8 169.931 228.731 169.931 228.731 cv
169.931 228.731 172.15 225.464 171.387 228.853 cv
cp
157.937 297.949 mo
157.876 298.298 157.411 301.358 156.782 305.518 cv
155.686 306.767 150.148 288.502 150.211 286.717 cv
150.211 286.717 146.739 290.915 142.22 293.677 cv
137.775 296.395 138.891 293.143 138.929 293.036 cv
144.516 278.464 152.728 268.22 152.728 268.22 cv
155.598 273.479 154.475 277.784 154.475 277.784 cv
154.948 278.91 158.145 296.746 157.937 297.949 cv
cp
129.87 241.363 mo
128.41 243.391 125.934 248.635 125.934 248.635 cv
125.934 248.635 117.791 258.146 115.892 259.152 cv
113.992 260.159 95.8896 264.68 96.8085 263.143 cv
97.7273 261.607 99.4848 257.869 106.097 251.713 cv
112.188 246.041 138.369 229.147 142.453 226.522 cv
142.468 226.655 142.499 226.768 142.546 226.855 cv
139.781 230.739 131.243 239.456 129.87 241.363 cv
cp
88.8827 296.765 mo
91.2269 306.302 87.3442 305.628 87.3442 305.628 cv
87.3442 305.628 102.607 314.639 101.911 316.426 cv
98.5998 316.436 95.0404 316.751 91.4049 317.278 cv
85.2374 318.338 58.5978 317.046 60.5656 311.923 cv
60.9542 310.912 61.1294 310.159 61.167 309.593 cv
62.9107 302.519 63.5494 296.954 63.5494 296.954 cv
66.6833 294.303 85.0881 285.955 85.0881 285.955 cv
85.0881 285.955 85.5974 280.717 92.3336 273.039 cv
92.4072 272.962 92.4845 272.877 92.5663 272.783 cv
92.6622 272.675 92.7651 272.564 92.8635 272.455 cv
95.4142 269.917 88.8827 296.765 88.8827 296.765 cv
cp
88.967 331.843 mo
88.967 331.843 78.4991 323.754 81.507 323.258 cv
92.1549 322.782 98.0775 324.829 98.0775 324.829 cv
98.0775 324.829 99.4014 333.194 97.4633 341.644 cv
97.1309 343.093 96.7419 344.518 96.313 345.914 cv
93.9472 351.656 88.967 331.843 88.967 331.843 cv
cp
54.8009 327.065 mo
56.3942 324.124 57.7211 320.884 58.8226 317.652 cv
60.5052 313.264 80.6574 318.82 79.8568 319.504 cv
79.7638 319.525 79.672 319.548 79.5792 319.57 cv
76.2074 319.694 66.2594 323.206 66.2594 323.206 cv
59.4605 325.297 54.8009 327.065 54.8009 327.065 cv
cp
50.8738 374.97 mo
50.8738 374.97 61.4941 358.507 61.4941 358.507 cv
61.4941 358.507 62.4113 361.783 63.2938 366.279 cv
63.2935 366.607 63.3031 366.941 63.3378 367.283 cv
63.5623 369.496 49.7889 376.651 50.8738 374.97 cv
cp
127.145 233.83 mo
124.827 235.784 124.186 227.546 125.745 225.169 cv
127.304 222.792 146.513 194.689 146.513 194.689 cv
111.018 236.872 li
123.822 226.226 li
123.822 226.226 126.857 234.071 119.756 239.982 cv
113.416 245.198 108.091 249.38 105.51 250.959 cv
96.4623 256.497 85.2204 260.023 85.2204 260.023 cv
85.2204 260.023 89.3927 260.03 90.0703 261.387 cv
90.7478 262.743 83.8768 276.028 76.7761 285.751 cv
69.6754 295.475 57.0126 296.668 57.0126 296.668 cv
57.0238 315.386 41.4766 333.947 41.4766 333.947 cv
54.0296 327.571 59.0559 324.863 76.2539 323.579 cv
76.4984 323.565 76.7596 323.546 77.0558 323.52 cv
83.5088 322.942 96.6435 344.738 92.8528 354.952 cv
88.3857 364.742 83.012 371.547 83.012 371.547 cv
93.3477 359.841 li
86.7782 372.266 71.294 384.577 71.294 384.577 cv
78.1388 375.2 li
67.7801 387.162 li
73.3196 375.538 69.6609 363.555 69.6609 363.555 cv
72.6653 369.164 71.5444 375.621 71.5444 375.621 cv
74.6778 362.078 65.7944 338.494 65.7944 338.494 cv
65.7944 338.494 65.7187 343.437 65.3311 344.544 cv
64.9436 345.65 53.2343 360.508 47.3378 365.549 cv
41.4411 370.591 43.396 364.213 43.396 364.213 cv
25.33 399.162 li
25.33 399.162 41.9063 370.541 42.6409 369.69 cv
43.3754 368.84 50.6554 363.843 50.6554 363.843 cv
12.0062 435.216 li
45.6955 382.996 li
52.1772 373.959 63.7282 368.072 64.1404 371.186 cv
64.5652 374.069 64.8762 377.119 64.8991 379.967 cv
64.9754 389.545 62.4445 393.105 62.4445 393.105 cv
85.8291 373.601 104.088 356.076 110.819 335.332 cv
117.55 314.589 106.306 313.246 106.306 313.246 cv
110.641 315.694 110.24 317.255 110.24 317.255 cv
109.338 317.036 108.377 316.876 107.387 316.746 cv
100.611 315.533 90.2176 305.605 90.2176 305.605 cv
88.1213 290.634 95.4478 269.881 100.277 266.547 cv
107.251 262.709 114.456 262.164 114.456 262.164 cv
114.456 262.164 117.152 258.654 120.162 255.589 cv
123.172 252.525 139.183 237.305 139.183 237.305 cv
130.097 245.315 li
130.097 245.315 130.232 244.164 132.177 240.85 cv
134.121 237.536 138.103 233.01 139.228 232.161 cv
140.208 231.423 141.923 229.029 144.17 226.369 cv
147.88 223.258 156.239 222.811 156.239 222.811 cv
156.239 222.811 160.7 250.053 157.114 254.878 cv
153.796 259.105 150.547 262.755 150.547 262.755 cv
148.133 272.901 133.445 301.914 128.461 311.092 cv
123.477 320.27 125.091 325.246 125.091 325.246 cv
124.963 322.224 126.411 320.649 126.411 320.649 cv
131.385 331.816 135.04 350.58 134.81 353.409 cv
134.579 356.239 101.802 382.764 101.802 382.764 cv
138.905 353.859 li
142.05 357.535 li
142.05 357.535 130.931 323.911 135.587 303.851 cv
135.732 303.229 135.884 302.61 136.043 301.996 cv
137.983 295.628 149.944 288.627 149.944 288.627 cv
149.944 288.627 156.309 305.911 155.888 311.443 cv
154.425 321.15 152.718 332.519 152.718 332.519 cv
156.243 312.589 li
159.537 320.66 li
159.537 320.66 157.087 309.605 157.087 308.105 cv
157.086 306.605 158.721 297.564 158.721 297.564 cv
158.721 297.564 156.289 282.273 156.704 273.867 cv
157.12 265.461 153.923 269.602 160.998 257.396 cv
168.073 245.19 169.332 240.191 169.332 240.191 cv
169.332 240.191 165.588 246.356 165.227 242.055 cv
164.865 237.753 170.535 231.01 171.606 231.978 cv
172.677 232.947 171.005 236.569 171.005 236.569 cv
173.117 233.414 175.226 226.15 175.226 226.15 cv
172.353 226.173 168.034 207.098 169.189 204.951 cv
170.345 202.804 174.306 198.014 174.306 198.014 cv
174.306 198.014 167.592 203.631 168.417 200.383 cv
169.242 197.135 198.346 148.19 198.346 148.19 cv
198.346 148.19 161.411 203.927 159.369 205.92 cv
158.126 207.134 141.782 221.516 127.145 233.83 cv
cp
f
767.375 326.732 mo
767.375 326.732 768.11 326.243 771.321 327.985 cv
773.215 329.012 773.496 329.401 773.41 329.548 cv
765.792 331.871 760.727 329.562 760.727 329.562 cv
759.9 323.178 767.144 313.16 767.144 313.16 cv
767.144 313.16 767.767 311.277 769.014 308.276 cv
771.446 304.86 767.375 326.732 767.375 326.732 cv
cp
780.931 358.278 mo
780.931 358.278 784.364 363.575 783.989 370.516 cv
783.989 370.516 781.004 370.301 778.507 366.133 cv
778.507 366.133 775.818 366.778 774.436 367.762 cv
774.436 367.762 774.127 361.694 774.519 359.983 cv
774.912 358.273 775.496 355.85 775.496 355.85 cv
775.496 355.85 770.486 356.218 765.428 358.564 cv
764.4 359.041 760.948 360.539 756.014 362.792 cv
755.244 363.144 754.434 363.516 753.597 363.903 cv
745.079 367.253 732.136 367.353 732.136 367.353 cv
732.136 367.353 729.553 361.653 729.272 356.09 cv
729.216 353.308 728.585 351.01 728.585 351.01 cv
728.585 351.01 733.171 345.227 738.49 343.622 cv
743.809 342.017 742.253 345.128 742.253 345.128 cv
742.253 345.128 746.632 338.645 752.074 332.118 cv
756.458 327.151 li
758.151 325.356 759.862 323.701 761.507 322.348 cv
761.507 322.348 759.043 328.968 759.686 333.358 cv
759.686 333.358 765.571 329.775 770.954 333.103 cv
776.369 336.451 773.974 336.582 773.974 336.582 cv
773.974 336.582 775.481 340.728 775.02 344.479 cv
774.559 348.23 774.052 350.028 774.052 350.028 cv
774.052 350.028 778.361 356.807 780.931 358.278 cv
cp
744.863 368.027 mo
744.834 368.042 744.813 368.052 744.785 368.066 cv
734.937 372.826 723.064 378.94 712.473 385.487 cv
712.473 385.487 715.295 375.266 716.365 374.016 cv
717.434 372.764 720.525 369.427 727.368 367.923 cv
727.368 367.923 727.354 365.569 728.204 362.263 cv
729.417 357.692 731.799 367.415 731.792 368.288 cv
731.792 368.288 750.671 365.176 744.863 368.027 cv
cp
755.517 326.294 mo
755.936 323.467 757.609 313.509 757.609 313.509 cv
752.527 314.944 742.361 320.083 743.237 317.521 cv
745.852 312.596 748.069 308.662 748.867 307.886 cv
751.294 305.525 767.116 300.344 767.116 300.344 cv
767.116 300.344 761.953 318.861 759.539 322.659 cv
758.798 323.824 757.464 325.486 755.875 327.292 cv
755.553 327.454 755.376 327.24 755.517 326.294 cv
cp
812.614 265.943 mo
806.81 271.173 802.807 272.134 802.807 272.134 cv
802.807 272.134 809.47 272.431 807.785 273.538 cv
806.099 274.645 788.835 280.495 789.438 277.828 cv
789.806 276.202 793.885 274.646 797.012 273.679 cv
793.109 274.708 787.107 276.14 784.565 275.947 cv
780.648 275.648 774.508 276.036 774.508 276.036 cv
774.508 276.036 782.188 276.858 781.26 277.821 cv
780.331 278.783 777.552 279.641 777.552 279.641 cv
777.552 279.641 773.848 288.329 770.624 290.973 cv
770.003 291.482 769.091 292.05 767.991 292.671 cv
761.711 296.011 755.767 293.365 755.767 293.365 cv
742.198 300.405 li
737.431 312.436 li
726.495 320.936 li
719.494 334.964 li
719.494 334.964 728.536 319.618 730.364 318.228 cv
732.191 316.839 738.453 312.634 738.453 312.634 cv
738.453 312.634 739.628 303.996 743.108 301.062 cv
746.588 298.127 764.907 292.927 759.85 296.248 cv
753.126 300.664 753.445 301.114 753.445 301.114 cv
752.592 301.768 751.796 302.445 751.1 303.142 cv
745.774 308.477 730.882 341.805 730.882 341.805 cv
730.882 341.805 736.119 331.182 740.991 321.801 cv
743.126 317.675 756.684 314.602 756.684 314.602 cv
756.684 314.602 756.71 326.295 752.133 331.318 cv
749.388 334.128 746.6 336.69 744.955 337.743 cv
741.458 339.981 723.59 351.572 723.59 351.572 cv
723.59 351.572 726.018 350.584 726.944 351.323 cv
727.87 352.062 726.293 359.559 722.196 364.136 cv
718.099 368.713 714.524 371.227 714.524 371.227 cv
713.167 376.544 703.946 394.212 694.678 411.23 cv
693.457 411.772 692 407.39 692.194 405.923 cv
692.413 404.267 699.282 386.933 699.282 386.933 cv
690.729 404.744 li
690.729 404.744 694.731 411.464 691.569 416.852 cv
691.569 416.852 691.594 416.831 691.631 416.801 cv
685.84 427.342 680.373 437.053 677.187 442.681 cv
682.379 433.703 693.945 414.429 706.152 398.866 cv
711.717 392.116 721.332 390.695 721.332 390.695 cv
731.029 381.942 li
739.103 379.625 li
727.76 381.879 li
727.76 381.879 725.582 386.304 721.941 388.858 cv
718.418 391.328 709.404 394.945 712.314 391.423 cv
712.358 391.373 712.402 391.322 712.446 391.272 cv
712.474 391.241 712.502 391.209 712.531 391.176 cv
712.615 391.081 712.699 390.99 712.783 390.895 cv
712.868 390.802 712.951 390.71 713.025 390.625 cv
717.604 385.508 722.122 381.273 726.28 378.663 cv
747.54 365.312 767.107 367.069 767.107 367.069 cv
767.107 367.069 768.143 369.749 767.319 374.682 cv
766.495 379.614 757.662 385.423 757.662 385.423 cv
757.662 385.423 761.362 390.92 761.867 395.108 cv
762.373 399.296 756.871 401.143 756.871 401.143 cv
756.633 405.375 li
745.734 437.352 li
758.439 405.924 li
758.619 402.531 li
758.619 402.531 763.319 396.313 762.857 394.352 cv
762.395 392.39 761.112 385.222 761.112 385.222 cv
762.566 383.243 772.292 376.632 772.292 376.632 cv
772.927 368.312 778.174 366.786 778.174 366.786 cv
778.174 366.786 782.757 371.143 783.253 373.055 cv
783.749 374.966 770.735 411.163 770.735 411.163 cv
781.763 385.114 li
781.763 385.114 782.024 386.939 781.694 388.18 cv
781.365 389.42 776.412 402.534 776.412 402.534 cv
776.412 402.534 785.252 382.834 786.214 380.339 cv
787.177 377.844 789.33 376.56 789.33 376.56 cv
785.758 372.925 781.932 357.695 781.932 357.695 cv
781.932 357.695 778.469 356.001 777.298 348.506 cv
776.128 341.011 781.554 325.583 781.554 325.583 cv
780.116 326.551 778.724 327.34 777.384 327.985 cv
772.984 329.666 767.996 325.872 767.996 325.872 cv
767.996 325.872 770.414 304.601 773.366 299.017 cv
773.407 298.938 773.445 298.862 773.487 298.783 cv
773.666 298.466 773.824 298.172 773.961 297.905 cv
774.404 297.085 774.868 296.253 775.354 295.408 cv
776.964 292.725 778.328 293.474 779.681 295.73 cv
781.089 298.077 781.689 311.265 781.689 311.265 cv
786.074 305.456 795.165 300.534 795.165 300.534 cv
795.165 300.534 802.752 291.69 804.184 291.136 cv
805.617 290.582 820.222 284.234 820.222 284.234 cv
814.493 286.201 li
818.242 276.152 li
811.712 287.168 li
803.398 290.675 li
800.172 296.612 783.394 307.405 783.394 307.405 cv
783.394 307.405 778.719 290.108 781.665 286.567 cv
785.93 282.193 789.061 282.021 789.061 282.021 cv
784.924 279.541 818.204 272.267 818.204 272.267 cv
820.652 263.165 828.819 248.391 828.819 248.391 cv
821.622 255.915 836.962 227.668 836.962 227.668 cv
836.962 227.668 818.418 260.713 812.614 265.943 cv
cp
f
380.025 295.659 mo
380.025 295.659 367.346 301.196 365.98 298.889 cv
366.033 298.532 366.11 298.152 366.206 297.754 cv
366.346 297.474 366.462 297.096 366.533 296.575 cv
366.591 296.392 366.657 296.2 366.723 296.009 cv
368.359 293.096 380.025 295.659 380.025 295.659 cv
cp
399.178 297.732 mo
401.25 292.143 415.365 274.955 418.314 273.991 cv
423.524 275.008 407.62 301.257 407.62 301.257 cv
407.62 301.257 414.058 301.78 391.304 322.612 cv
368.551 343.443 386.767 300.696 386.767 300.696 cv
386.767 300.696 373.928 317.149 373.969 304.678 cv
373.969 304.678 370.059 305.683 367.67 304.134 cv
367.636 304.068 367.546 303.998 367.378 303.923 cv
366.954 303.589 366.594 303.158 366.331 302.609 cv
366.477 301.188 369.811 298.872 382.784 295.815 cv
401.272 291.458 399.178 297.732 399.178 297.732 cv
cp
365.991 325.215 mo
365.991 325.215 353.059 320.32 356.234 317.047 cv
356.539 316.733 356.767 316.458 356.961 316.202 cv
360.619 312.452 364.213 309.096 367.651 306.305 cv
376.154 311.677 380.151 321.597 378.3 331.484 cv
377.893 333.66 377.329 335.791 376.668 337.842 cv
371.676 350.045 365.991 325.215 365.991 325.215 cv
cp
439.1 203.056 mo
439.1 203.056 426.495 201.437 430.518 199.464 cv
433.963 197.678 437.174 196.236 438.849 196.061 cv
440.328 195.906 441.488 208.585 435.449 227.492 cv
435.219 225.196 439.1 203.056 439.1 203.056 cv
cp
389.316 203.538 mo
389.316 203.538 368.58 227.45 381.469 202.414 cv
381.469 202.414 368.713 211.712 386.458 182.893 cv
404.202 154.074 391.817 180.736 391.817 180.736 cv
391.817 180.736 394.088 176.372 398.169 169.353 cv
401.038 164.508 394.645 199.52 394.645 199.52 cv
394.645 199.52 430.173 187.118 422.788 193.335 cv
422.77 193.35 422.757 193.362 422.739 193.377 cv
416.235 198.823 409.661 204.399 404.078 209.274 cv
385.071 225.874 378.564 224.211 389.316 203.538 cv
cp
337.826 374.38 mo
343.026 377.81 li
363.444 361.86 li
363.444 361.86 342.975 374.208 340.4 374.294 cv
337.826 374.38 335.862 371.572 335.862 371.572 cv
335.862 371.572 337.883 377.81 332.701 384.153 cv
328.223 389.632 319.086 393.653 319.752 390.115 cv
320.115 389.376 320.473 388.633 320.83 387.887 cv
322.391 385.581 322.572 384.955 322.115 385.143 cv
323.056 383.094 323.971 381.024 324.841 378.935 cv
301.257 401.172 li
301.257 401.172 301.184 396.864 301.594 395.345 cv
304.136 385.92 329.291 346.123 353.063 320.317 cv
357.486 315.399 375.978 339.835 370.799 351.032 cv
368.221 355.602 366.034 358.467 366.034 358.467 cv
366.034 358.467 415.696 307.257 429.515 265.935 cv
429.515 265.935 408.793 284.827 423.153 257.643 cv
427.555 249.309 432.05 240.386 436.189 231.183 cv
445.557 210.354 453.093 188.108 453.609 167.937 cv
453.609 167.937 444.394 175.406 432.942 184.885 cv
424.52 191.887 395.82 197.673 395.82 197.673 cv
395.82 197.673 398.572 167.981 405.508 157.186 cv
405.517 157.17 405.527 157.155 405.537 157.14 cv
406.21 156.094 406.711 155.295 407.075 154.694 cv
409.687 150.571 412.586 146.139 415.74 141.531 cv
415.74 141.531 363.565 201.445 361.162 238.997 cv
361.162 238.997 365.754 222.36 376.469 216.102 cv
387.184 209.845 380.851 227.961 380.851 227.961 cv
405.026 213.563 li
405.026 213.563 388.413 220.637 416.607 204.622 cv
444.801 188.606 417.216 207.101 417.216 207.101 cv
417.216 207.101 420.204 205.238 424.016 203.042 cv
429.819 199.834 438.13 203.881 438.13 203.881 cv
438.13 203.881 436.585 224.492 432.255 236.314 cv
431.849 237.32 431.423 238.338 430.976 239.368 cv
429.984 241.413 429.56 242.38 429.523 242.607 cv
424.308 253.829 416.691 266.291 405.697 279.068 cv
405.697 279.068 407.996 277.179 410.93 275.68 cv
411.334 275.503 411.807 275.283 412.365 275.013 cv
412.792 274.831 413.224 274.667 413.661 274.52 cv
418.244 273.562 399.002 292.705 399.002 292.705 cv
399.002 292.705 366.373 297.606 368.581 291.728 cv
369.289 290.334 370.137 288.813 371.184 287.117 cv
371.184 287.117 363.736 293.375 353.901 304.035 cv
349.864 308.312 352.502 296.094 352.502 296.094 cv
352.502 296.094 350.94 289.715 351.308 283.453 cv
351.677 277.191 359.175 247.971 359.175 247.971 cv
344.194 296.332 li
350.423 286.874 li
350.423 286.874 354.36 303.537 347.06 311.757 cv
338.613 321.698 329.356 334.16 321.828 348.233 cv
321.828 348.233 334.725 327.086 346.24 318.95 cv
357.756 310.813 305.14 384.138 313.077 364.208 cv
313.077 364.208 298.175 388.108 296.001 406.886 cv
296.001 406.886 302.153 398.962 310.527 395.592 cv
318.901 392.223 292.838 433.846 292.838 433.846 cv
292.838 433.846 303.859 419.505 314.476 400.232 cv
320.189 389.228 332.222 388.251 332.222 388.251 cv
337.826 374.38 li
cp
f
1108.09 312.488 mo
1107.42 314.635 1106.68 316.837 1105.89 319.081 cv
1105.81 319.199 1105.73 319.311 1105.64 319.456 cv
1104.53 321.173 1080.26 335.892 1082.66 332.315 cv
1085.08 328.733 1109.45 308.173 1108.09 312.488 cv
cp
1074.08 342.588 mo
1071.43 346.062 1053.97 362.325 1051.52 356.862 cv
1051.52 356.862 1051.64 358.277 1048.94 361.916 cv
1044.22 365.839 1046.81 350.766 1046.81 350.766 cv
1046.81 350.766 1035.9 354.559 1040.15 351.049 cv
1050.03 344.478 1064.44 335.725 1084.4 325.43 cv
1084.4 325.43 1076.73 339.114 1074.08 342.588 cv
cp
1047.94 305.584 mo
1048.83 303.742 1050.83 305.546 1052.87 313.488 cv
1054.94 321.531 1056.13 328.107 1056.13 328.107 cv
1065.77 326.192 1085.3 321.2 1081.46 325.077 cv
1081.41 325.132 1081.37 325.173 1081.32 325.226 cv
1073.4 331.147 1055.26 340.114 1039.78 342.019 cv
1039.78 342.019 1043.05 318.161 1046.28 309.529 cv
1046.82 308.077 1047.38 306.772 1047.94 305.584 cv
cp
1049.77 302.111 mo
1049.96 301.794 1050.14 301.494 1050.32 301.208 cv
1051.52 300.051 1051.73 308.211 1051.73 308.211 cv
1051.73 308.211 1049.26 303.52 1049.77 302.111 cv
cp
1052.02 298.712 mo
1052.9 297.554 1053.47 296.996 1053.47 296.996 cv
1053.47 296.996 1053.24 292.155 1056.26 287.911 cv
1059.28 283.667 1066.22 281.637 1066.22 281.637 cv
1066.22 281.637 1064.46 278.834 1078.05 272.388 cv
1079.78 271.572 1081.56 270.5 1083.38 269.254 cv
1084.5 268.479 1085.63 267.638 1086.76 266.753 cv
1095.3 260.917 1105.73 256.891 1105.73 256.891 cv
1105.73 256.891 1109.67 258.284 1108.81 264.366 cv
1108.69 265.252 1108.54 266.059 1108.38 266.743 cv
1108.38 266.743 1113.56 269.237 1114.6 273.748 cv
1115.27 276.637 1114.55 289.107 1110.01 305.875 cv
1108.39 310.081 1084.13 330.822 1087.77 324.742 cv
1092.79 317.325 1097.28 310.745 1097.28 310.745 cv
1097.28 310.745 1094.04 313.475 1090.31 316.891 cv
1080.83 324.715 1059.05 326.565 1059.05 326.565 cv
1054.89 323.307 1050.03 301.676 1052.02 298.712 cv
cp
1092.91 261.475 mo
1101.95 253.104 1109.53 243.666 1109.53 243.666 cv
1109.53 243.666 1109.69 250.27 1109.42 256.762 cv
1109.29 257.104 1109.16 257.483 1109.07 257.887 cv
1108.7 259.396 1105.38 255.716 1105.38 255.716 cv
1105.38 255.716 1091.23 264.836 1092.91 261.475 cv
cp
1126.75 244.789 mo
1126.75 244.789 1135.66 241.683 1133.99 244.795 cv
1133.89 244.972 1133.81 245.138 1133.73 245.3 cv
1132.04 248.19 1129.97 251.275 1128.28 252.281 cv
1128.28 252.281 1129.12 256.656 1129.51 258.675 cv
1129.9 260.694 1118.33 287.689 1118.33 287.689 cv
1118.33 287.689 1116.93 276.79 1117.47 273.198 cv
1117.47 273.198 1112.39 269.463 1111.53 267.708 cv
1110.94 266.521 1115.06 241.5 1117.78 225.448 cv
1120.23 220.054 1126.75 244.789 1126.75 244.789 cv
cp
1142.42 197.751 mo
1142.42 197.751 1143.59 189.326 1144.83 184.9 cv
1146.08 180.474 1155.53 151.531 1155.53 151.531 cv
1135.74 204.789 li
1136.81 239.477 li
1133.8 244.177 1127.76 243.503 1127.76 243.503 cv
1127.76 243.503 1118.16 223.173 1119.21 217.064 cv
1119.73 214.024 1120.06 212.161 1120.06 212.161 cv
1120.06 212.161 1116.7 216.47 1117.03 204.543 cv
1117.03 204.543 1114.25 213.531 1107.3 226.741 cv
1102.38 235.511 1092.74 235.569 1092.74 235.569 cv
1073.8 263.674 li
1073.8 263.674 1092.52 238.03 1094.85 236.537 cv
1097.16 235.054 1105.23 230.691 1102.75 234.893 cv
1100 239.575 1096.79 244.589 1093.08 249.788 cv
1075.48 274.451 1059.64 284.644 1063.76 277.922 cv
1063.76 277.922 1056.79 284.319 1050.88 288.07 cv
1050.88 288.07 1053.4 291.602 1049.64 300.696 cv
1049.13 301.936 1048.52 302.988 1047.87 303.88 cv
1047.78 303.99 1047.7 304.094 1047.63 304.183 cv
1044.84 307.789 1041.41 308.589 1041.41 308.589 cv
1033.87 330.64 li
1032.17 335.617 1030.89 331.4 1030.87 329.749 cv
1030.85 328.096 1036.86 301.623 1036.86 301.623 cv
1029.01 328.927 li
1029.01 328.927 1033.18 332.661 1031.54 337.457 cv
1022.4 364.196 li
1022.4 364.196 1025.14 361.674 1031.38 357.132 cv
1036.8 353.046 1044.81 352.065 1044.81 352.065 cv
1044.81 352.065 1048.01 363.118 1042.75 368.53 cv
1039.24 371.892 1035.23 375.624 1033.45 378.127 cv
1030.56 382.171 1013.62 412.114 1013.62 412.114 cv
1013.62 412.114 1029.99 385.594 1031.15 384.326 cv
1032.3 383.058 1041.59 376.04 1041.59 376.04 cv
1011.43 435.216 li
1011.43 435.216 1053.85 361.578 1058.51 356.917 cv
1067.15 348.281 1072.27 354.974 1072.27 354.974 cv
1072.27 354.974 1072.01 349.091 1074.5 344.776 cv
1075.05 343.829 1076.45 341.661 1078.3 338.853 cv
1081.92 333.42 1105.49 320.168 1104.27 323.481 cv
1102.56 327.946 1100.6 332.551 1098.35 337.233 cv
1098.35 337.233 1110.22 313.195 1121.21 292.046 cv
1125.92 283.066 1136.1 283.275 1136.1 283.275 cv
1150.59 264.246 li
1144.42 253.916 li
1147.91 250.28 li
1145.23 236.314 li
1145.23 236.314 1146.73 246.048 1146.95 248.021 cv
1147.17 249.994 1142.19 255.041 1142.19 255.041 cv
1142.19 255.041 1149.46 259.002 1148.68 263.392 cv
1147.9 267.781 1136.41 279.719 1131.96 282.651 cv
1127.52 285.582 1123.85 286.791 1127.8 279.55 cv
1132.23 271.282 1135.99 264.646 1137.98 261.933 cv
1137.98 261.933 1134.04 250.299 1134.27 247.119 cv
1134.5 243.939 1143.15 233.377 1143.15 233.377 cv
1143.15 233.377 1138.4 221.377 1138.69 214.692 cv
1138.98 208.007 1156.17 187.609 1156.17 187.609 cv
1164.64 165.396 li
1164.64 165.396 1156.29 183.941 1155.47 186.696 cv
1154.65 189.452 1142.42 197.751 1142.42 197.751 cv
cp
f
564.6 211.598 mo
564.6 211.598 545.861 214.552 548.055 212.556 cv
556.171 208.041 564.667 204.075 572.8 201.632 cv
572.8 201.632 567.988 213.751 554.644 231.167 cv
555.017 227.061 564.6 211.598 564.6 211.598 cv
cp
467.867 303.762 mo
467.867 303.762 485.874 298.943 482.19 302.701 cv
474.946 308.28 466.668 314.397 463.716 315.58 cv
463.716 315.58 462.641 300.202 464.571 283.61 cv
466.043 277.028 467.867 303.762 467.867 303.762 cv
cp
487.333 321.912 mo
489.618 321.242 492.638 320.401 494.051 320.201 cv
494.051 320.201 495.617 333.365 491.667 343.135 cv
490.934 344.951 489.258 346.848 487.019 348.735 cv
486.636 349.011 486.149 349.394 485.52 349.931 cv
485.496 349.949 485.472 349.967 485.448 349.985 cv
482.354 352.477 488.653 325.726 488.653 325.726 cv
488.653 325.726 484.302 323.912 487.333 321.912 cv
cp
633.322 178.744 mo
604.978 205.696 li
604.978 205.696 607.23 205.424 603.721 211.361 cv
600.213 217.298 584.908 224.898 584.908 224.898 cv
595.994 216.229 li
595.994 216.229 576.903 227.599 573.145 229.74 cv
569.388 231.88 570.408 227.143 585.671 215.247 cv
585.671 215.247 555.825 236.682 551.988 238.732 cv
548.151 240.781 582.541 210.904 596.463 185.087 cv
596.463 185.087 562.763 206.462 535.396 216.074 cv
531.269 217.337 536.313 209.612 536.313 209.612 cv
552.453 205.42 572.557 194.294 572.557 194.294 cv
556.92 202.342 534.322 208.613 534.322 208.613 cv
537.243 209.204 532.692 216.996 525.719 219.06 cv
500.425 226.088 501.933 223.658 499.73 214.879 cv
499.73 214.879 468.399 244.251 457.223 293.029 cv
457.213 293.07 457.201 293.103 457.19 293.145 cv
455.927 298.28 453.149 276.491 453.23 275.338 cv
453.311 274.184 462.153 256.512 462.153 256.512 cv
462.153 256.512 464.768 254.12 465.783 252.516 cv
466.797 250.913 485.292 220.521 485.292 220.521 cv
465.936 250.337 li
465.936 250.337 465.99 249.568 466.244 247.782 cv
466.498 245.997 473.202 234.871 473.202 234.871 cv
461.949 250.184 464.915 246.529 462.461 253.958 cv
460.007 261.386 451.436 275.212 451.436 275.212 cv
451.98 278.471 455.194 302.436 454.614 307.512 cv
454.604 307.599 454.597 307.676 454.588 307.757 cv
453.421 316.784 452.992 326.354 453.578 336.424 cv
453.578 336.424 476.384 312.519 492.981 303.636 cv
481.106 325.99 li
482.753 324.4 li
484.4 322.81 486.962 325.349 487.433 325.983 cv
487.903 326.617 484.747 350.466 478.31 354.66 cv
468.318 360.467 456.548 365.059 456.548 365.059 cv
456.548 365.059 458.344 366.388 454.942 369.584 cv
454.942 369.584 451.274 384.72 447.148 389.669 cv
446.948 376 li
453.588 339.946 li
444.703 377.195 li
444.703 377.195 447.487 373.011 446.472 381.356 cv
445.457 389.701 444.776 396.953 444.033 398.962 cv
443.291 400.971 430.049 439.117 430.049 439.117 cv
430.049 439.117 443.109 407.228 454.036 387.384 cv
454.452 386.627 454.887 385.874 455.33 385.124 cv
461.653 375.695 469.955 376.717 467.313 380.136 cv
464.668 383.557 461.223 386.922 461.223 386.922 cv
461.223 386.922 481.602 387.393 493.238 358.91 cv
490.437 365.517 483.981 377.675 473.477 380.606 cv
463.025 383.522 474.006 372.876 474.006 372.876 cv
474.006 372.876 455.429 384.187 463.921 372.732 cv
474.618 359.289 487.678 348.51 495.161 344.755 cv
495.161 344.755 502.856 318.328 504.166 305.796 cv
504.166 305.796 494.309 316.225 484.962 319.691 cv
484.962 319.691 495.058 299.746 510.045 280.788 cv
510.045 280.788 493.01 297.111 483.465 303.397 cv
494.592 292.928 li
494.592 292.928 491.858 295.138 487.997 298.177 cv
483.609 301.599 468.871 302.308 468.871 302.308 cv
468.871 302.308 464.711 283.239 466.445 272.087 cv
466.679 270.999 466.93 269.921 467.201 268.855 cv
467.888 266.778 468.142 265.807 468.115 265.562 cv
468.463 264.407 468.829 263.268 469.228 262.162 cv
476.978 240.678 489.426 234.424 498.073 238.466 cv
498.073 238.466 501.582 232.529 505.354 242.413 cv
505.354 242.413 507.716 240.373 511.736 237.186 cv
514.37 235.08 514.03 241.065 512.272 243.779 cv
510.512 246.494 500.757 253.662 500.757 253.662 cv
500.757 253.662 500.345 258.077 499.218 260.897 cv
498.09 263.717 490.013 269.526 490.013 269.526 cv
499.413 263.616 li
499.413 263.616 500.129 257.096 501.262 255.63 cv
502.396 254.164 514.102 243.392 514.102 243.392 cv
514.102 243.392 513.024 236.179 518.274 232.143 cv
524.1 227.769 531.494 222.533 539.598 217.526 cv
549.724 211.67 562.571 212.896 562.571 212.896 cv
562.571 212.896 554.199 231.871 550.131 236.847 cv
543.665 244.706 535.585 253.392 525.593 262.385 cv
525.593 262.385 555.898 236.859 567.623 231.327 cv
567.623 231.327 565.157 235.878 561.273 239.813 cv
561.273 239.813 569.373 234.542 563.034 241.654 cv
556.694 248.766 555.994 255.073 555.647 256.336 cv
555.301 257.6 538.37 268.778 538.37 268.778 cv
516.674 296.454 li
535.594 275.282 li
529.916 288.882 li
529.916 288.882 538.005 275.194 539.06 273.636 cv
540.113 272.078 540.025 269.668 540.94 268.873 cv
541.854 268.078 551.458 259.735 556.094 257.313 cv
556.094 257.313 558.612 249.588 565.32 244.563 cv
572.028 239.538 575.31 238.051 575.31 238.051 cv
575.31 238.051 585.381 227.937 587.254 226.952 cv
589.126 225.967 627.688 203.941 627.688 203.941 cv
603.513 215.555 li
603.513 215.555 605.939 207.91 607.914 205.472 cv
609.889 203.035 633.322 178.744 633.322 178.744 cv
cp
f
1263.71 308.68 mo
1263.15 306.007 1271.18 286.924 1271.18 286.924 cv
1271.18 286.924 1267.82 290.137 1273.12 277.088 cv
1273.12 277.088 1238.55 289.482 1245.3 283.851 cv
1254.19 277.289 1269.99 266.914 1284.43 261.574 cv
1284.43 261.574 1271.33 291.897 1263.71 308.68 cv
cp
1294.63 244.059 mo
1294.63 244.059 1296.45 226.187 1298.14 228.796 cv
1300.7 232.851 1302.8 236.532 1303.33 238.457 cv
1303.33 238.457 1294.44 250.812 1292.38 252.883 cv
1286.34 255.861 1294.63 244.059 1294.63 244.059 cv
cp
1237.25 369.971 mo
1237.25 369.971 1236.9 372.63 1236.38 375.693 cv
1235.53 375.496 1234.46 354.58 1234.46 354.58 cv
1234.46 354.58 1217.43 361.14 1220.33 356.987 cv
1220.45 356.81 1220.55 356.658 1220.64 356.515 cv
1221.15 355.775 1221.51 355.272 1221.68 355.066 cv
1222.73 353.83 1230.68 350.905 1238.23 348.334 cv
1240.71 347.485 1248.49 351.255 1247.64 352.867 cv
1244.03 359.69 1239.33 368.13 1237.25 369.971 cv
cp
1235.89 345.605 mo
1238.62 343.073 1244.08 339.854 1244.08 339.854 cv
1244.08 339.854 1245.61 335.239 1254.67 329.821 cv
1254.72 329.796 1254.75 329.775 1254.79 329.75 cv
1260.54 330.058 li
1260.54 330.058 1259.07 332.39 1256.67 334.906 cv
1255.61 336.03 1248.83 340.139 1241.21 344.254 cv
1240.78 344.463 1233.23 348.064 1235.89 345.605 cv
cp
1252.36 343.716 mo
1252.36 343.716 1250.76 346.926 1248.57 351.115 cv
1247.47 352.368 1243.69 348.804 1243.69 348.804 cv
1243.69 348.804 1239.29 348.216 1240.47 347.581 cv
1246.85 345.436 1252.36 343.716 1252.36 343.716 cv
cp
1189.19 330.986 mo
1181.74 333.702 1173.85 336.882 1169.12 338.376 cv
1169.12 338.376 1178.65 324.69 1190.05 311.887 cv
1195.51 306.011 1192.98 315.634 1191.27 318.762 cv
1191.27 318.762 1191.73 328.753 1189.19 330.986 cv
cp
1173.58 373.924 mo
1173.58 373.924 1173.92 376.916 1172.47 378.864 cv
1171.51 380.17 1163.19 386.397 1156.94 390.639 cv
1153.96 392.587 1165.36 377.671 1168.47 375.172 cv
1168.47 375.172 1155.44 373.614 1159.58 371.862 cv
1166.89 370.458 1174.36 368.368 1180.91 365.226 cv
1173.58 373.924 li
cp
1305.89 234.901 mo
1303.31 231.623 1294.65 215.722 1295.28 212.678 cv
1295.91 209.634 1297.45 201.635 1299 198.407 cv
1300.54 195.178 1306.63 184.576 1306.63 184.576 cv
1306.63 184.576 1291.57 206.925 1285.93 210.945 cv
1285.93 210.945 1290.99 217.908 1295.68 225.001 cv
1297.39 229.974 1291.78 253.367 1285.63 257.319 cv
1276.09 263.181 1259.07 273.197 1250.76 279.132 cv
1239.28 287.327 1230.01 289.339 1230.01 289.339 cv
1230.01 289.339 1221.4 280.919 1222.17 273.417 cv
1222.17 273.417 1219.62 277.34 1219.27 275.249 cv
1219.27 275.249 1219.37 277.277 1215.7 281.239 cv
1212.03 285.201 1192.3 304.771 1186.49 308.047 cv
1180.69 311.323 1177.77 313.927 1177.77 313.927 cv
1177.77 313.927 1176.52 315.036 1174.44 316.946 cv
1167.03 321.983 1180.39 304.316 1180.39 304.316 cv
1157 327.721 li
1171.87 314.227 li
1171.87 314.227 1172.79 318.467 1167.01 323.925 cv
1158.07 332.513 1145.71 345.135 1138.48 355.66 cv
1138.48 355.66 1145.32 344.344 1152.48 336.922 cv
1152.48 336.922 1135.25 352.566 1126.03 374.521 cv
1126.03 374.521 1137.9 374.995 1152.18 373.061 cv
1158.04 372.146 1166.58 375.794 1166.58 375.794 cv
1166.58 375.794 1155.39 392.092 1150.34 394.633 cv
1147.43 395.561 1140.67 396.184 1140.67 396.184 cv
1140.67 396.184 1143.66 395.906 1141.11 398.797 cv
1138.56 401.688 1116.04 435.216 1116.04 435.216 cv
1116.04 435.216 1132.73 411.794 1143.12 405.918 cv
1143.12 405.918 1140.27 404.531 1144.13 402.905 cv
1148 401.279 1168.3 395.677 1168.3 395.677 cv
1168.3 395.677 1167.63 392.787 1171.02 387.385 cv
1171.02 387.385 1164.74 390.237 1173.93 380.011 cv
1173.93 380.011 1173.38 375.584 1175.41 374.328 cv
1177.45 373.072 1194.72 355.24 1194.72 355.24 cv
1194.72 355.24 1188.61 360.812 1187.16 361.212 cv
1185.71 361.612 1165.92 365.708 1165.92 365.708 cv
1177.97 361.641 li
1177.97 361.641 1161.31 366.888 1151.86 364.202 cv
1151.86 364.202 1159.73 349.488 1163.72 346.326 cv
1167.71 343.163 1187.42 336.31 1187.42 336.31 cv
1187.42 336.31 1191.55 327.7 1209.25 326.618 cv
1209.25 326.618 1206.06 334.356 1196.18 341.82 cv
1196.18 341.82 1209.53 332.828 1213.64 329.803 cv
1217.75 326.779 1211.86 327.857 1224.97 318.588 cv
1224.97 318.588 1212.71 326.378 1205.92 326.353 cv
1203.33 326.343 1198.68 327.676 1193.41 329.485 cv
1188.26 331.324 1193.62 308.894 1196.97 304.517 cv
1200.89 300.577 1204.86 297.048 1208.59 294.466 cv
1208.59 294.466 1205.5 298.595 1198.93 304.01 cv
1198.93 304.01 1214.56 293.91 1222.69 287.339 cv
1222.69 287.339 1230.1 289.862 1228.65 299.931 cv
1228.65 299.931 1233.91 293.877 1237.59 290.178 cv
1243.83 284.944 1271.18 279.576 1271.18 279.576 cv
1271.18 279.576 1262.96 311.579 1258.75 319.086 cv
1255.57 324.505 1250.66 329.529 1250.66 329.529 cv
1251.7 329.584 li
1254.76 330.348 1227.89 350.891 1227.82 350.945 cv
1223.34 352.938 1219.72 354.194 1218.29 353.894 cv
1218.29 353.894 1212.9 365.874 1208.76 370.001 cv
1207.95 370.815 1193.38 383.493 1193.38 383.493 cv
1208.39 373.086 li
1192.39 400.689 li
1192.39 400.689 1209.36 373.773 1217.52 361.242 cv
1220.04 357.407 1233.98 356.54 1233.98 356.54 cv
1233.98 356.54 1236.41 376.884 1234.9 382.728 cv
1234.83 382.951 1234.77 383.163 1234.7 383.355 cv
1234.56 383.763 1234.43 384.074 1234.31 384.303 cv
1234.31 384.303 1240.95 396.907 1240.65 403.973 cv
1240.34 411.039 1226.67 434.873 1226.67 434.873 cv
1226.67 434.873 1242.44 411.636 1248.54 407.868 cv
1248.54 407.868 1240.24 397.152 1238.58 388.898 cv
1236.92 380.644 1239.56 368.479 1241.88 365.311 cv
1243.04 363.714 1248.68 358.274 1254.65 350.75 cv
1255.99 349.087 1256.99 355.751 1255.89 360.475 cv
1254.78 365.2 1252.46 367.336 1252.46 367.336 cv
1252.46 367.336 1252.7 367.612 1253.36 370.072 cv
1254.02 372.531 1253.62 394.543 1253.62 394.543 cv
1255.8 376.153 li
1253.5 368.321 li
1257.27 357.706 li
1257.27 357.706 1254.9 350.427 1257.19 347.438 cv
1262.21 340.637 1267.06 332.539 1269.26 324.177 cv
1269.26 324.177 1260.92 326.865 1255.7 326.063 cv
1255.7 326.063 1262.95 313.01 1270.84 299.072 cv
1278.81 286.645 1276.72 304.425 1276.72 304.425 cv
1276.72 304.425 1289.5 282.066 1291.43 275.172 cv
1291.43 275.172 1285.9 286.076 1281.01 292.047 cv
1276.11 298.017 1276.24 292.182 1276.24 292.182 cv
1276.24 292.182 1271.18 298.362 1276.17 289.703 cv
1282.69 278.315 1288.63 268.194 1290.24 266.291 cv
1294.23 261.581 1291.79 267.832 1291.79 267.832 cv
1291.79 267.832 1302.12 248.286 1304.58 244.873 cv
1307.04 241.46 1311.91 238.624 1311.91 238.624 cv
1311.91 238.624 1308.46 238.178 1305.89 234.901 cv
cp
f
996.758 309.297 mo
993.489 312.466 973.694 305.577 975.384 302.929 cv
975.767 302.359 976.108 301.879 976.386 301.523 cv
976.386 301.523 974.395 302.904 972.083 304.404 cv
968.424 306.67 967.796 287.531 969.506 285.692 cv
969.559 285.628 969.622 285.564 969.677 285.5 cv
969.717 285.455 969.763 285.406 969.799 285.364 cv
970.529 284.537 971.377 283.691 972.394 282.848 cv
972.394 282.848 967.227 284.139 972.405 276.667 cv
971.415 276.41 li
971.415 276.41 973.06 270.254 988.369 262.428 cv
991.041 261.062 993.885 259.845 996.758 258.761 cv
1006.34 256.379 1019.26 259.612 1019.26 259.612 cv
1019.26 259.612 1020.41 276.252 1017.28 281.091 cv
1016.06 283.051 1014.64 284.989 1012.99 286.862 cv
1012.99 286.862 1023.54 277.655 1023.99 277.452 cv
1024.43 277.248 1019.96 285.804 1019.96 285.804 cv
1019.96 285.804 1023.24 284.151 1018.56 294.436 cv
1018.56 294.436 1005.42 300.021 996.758 309.297 cv
cp
979.252 316.364 mo
977.373 316.513 970.879 320.691 970.879 320.691 cv
979.102 314.486 li
979.102 314.486 966.114 322.571 964.326 323.588 cv
963.135 324.266 967.499 316.022 971.468 309.26 cv
971.302 310.057 971.336 310.216 971.923 308.487 cv
972.008 308.343 972.093 308.201 972.178 308.058 cv
974.992 304.723 995.347 310.898 993.2 313.747 cv
993.047 313.949 992.949 314.104 992.89 314.224 cv
992.41 314.975 991.963 315.743 991.566 316.53 cv
991.566 316.53 981.13 316.214 979.252 316.364 cv
cp
971.592 335.701 mo
970.841 337.717 968.458 339.28 967.485 339.852 cv
963.46 342.1 956.875 346.039 956.875 346.039 cv
956.875 346.039 962.062 333.709 963.26 331.762 cv
964.113 330.375 970.007 324.986 975.328 321.596 cv
975.582 321.511 975.938 321.361 976.437 321.114 cv
979.216 319.741 972.544 333.147 971.592 335.701 cv
cp
965.765 293.292 mo
965.765 293.292 965.891 291.816 966.909 289.672 cv
968.874 287.704 969.321 305.658 967.222 307.348 cv
967.049 307.44 966.877 307.53 966.719 307.609 cv
963.562 309.175 958.813 310.983 958.813 310.983 cv
958.813 310.983 962.343 298.022 965.765 293.292 cv
cp
1020.76 274.323 mo
1019.01 277.442 1020.14 258.573 1020.14 258.573 cv
1020.14 258.573 1018.5 260.271 1016.25 257.987 cv
1016.25 257.987 998.936 258.034 1004.07 256.283 cv
1015.02 252.955 1024.6 251.558 1024.6 251.558 cv
1024.6 251.558 1025.69 262.42 1020.76 274.323 cv
cp
1016.47 283.347 mo
1016.47 283.347 1024.42 270.461 1029.24 261.988 cv
1034.07 253.515 1031.7 260.257 1031.7 260.257 cv
1037.22 249.234 1042.59 230.086 1042.59 230.086 cv
1014.07 239.852 974.38 268.22 974.38 268.22 cv
979.401 252.113 989.81 236.612 989.81 236.612 cv
993.607 236.579 998.082 240.108 998.082 240.108 cv
997.292 236.698 1010.26 217.482 1010.26 217.482 cv
1001.29 229.979 li
1019.46 199.382 li
994.741 235.999 li
994.741 235.999 988.883 235.871 988.522 234.839 cv
988.162 233.808 987.712 231.296 987.712 231.296 cv
987.712 231.296 985.372 241.361 979.7 253.629 cv
974.027 265.897 962.264 279.634 962.264 279.634 cv
967.209 274.198 li
967.585 278.011 960.827 286.71 960.827 286.71 cv
968.116 277.93 li
968.116 277.93 970.082 285.507 963.307 295.431 cv
961.117 298.638 959.166 302.233 957.525 305.633 cv
954.537 311.343 955.762 298.695 955.762 298.695 cv
955.762 298.695 952.842 301.014 953.108 297.908 cv
953.374 294.802 957.854 285.056 957.854 285.056 cv
950.621 295.842 948.08 308.902 948.08 308.902 cv
948.08 308.902 952.238 301.118 953.71 300.08 cv
955.181 299.042 956.139 307.134 954.6 312.193 cv
952.952 316.192 952.02 319.008 952.02 319.008 cv
966.731 312.156 li
965.212 316.46 li
965.212 316.46 968.724 313.211 967.306 315.939 cv
965.887 318.666 960.915 327.501 960.915 327.501 cv
960.691 330.047 957.589 337.784 957.589 337.784 cv
957.589 337.784 958.007 340.979 956.822 344.35 cv
955.636 347.721 952.416 356.018 952.416 356.018 cv
960.216 347.025 971.742 342.898 971.742 342.898 cv
968.892 347.53 965.686 354.413 962.763 361.28 cv
956.739 367.53 945.228 372.56 945.228 372.56 cv
945.424 387.695 li
932.54 400.077 li
918.13 435.216 li
918.13 435.216 928.364 416.329 935.422 404.07 cv
938.084 409.476 li
936.125 402.853 li
938.636 398.52 940.661 395.191 941.521 394.156 cv
944.802 390.212 949.187 387.48 949.187 387.48 cv
949.187 387.48 945.482 388.862 946.128 380.566 cv
946.639 373.993 957.861 364.915 961.602 364.042 cv
957.072 374.944 953.491 385.027 953.491 385.027 cv
953.491 385.027 960.876 374.708 965.105 368.517 cv
965.182 368.405 965.253 368.3 965.323 368.197 cv
967.734 365.184 983.536 357.527 981.596 359.392 cv
979.583 361.328 974.547 367.525 974.547 367.525 cv
974.547 367.525 989.797 357.06 994.483 340.234 cv
994.483 340.234 990.939 350.517 981.246 357.092 cv
971.555 363.666 966.94 367.062 972.793 358.747 cv
978.652 352.529 987.118 344.276 988.2 342.637 cv
989.746 340.298 994.684 333.029 995.763 329.403 cv
996.841 325.776 997.913 320.318 997.913 320.318 cv
997.913 320.318 996.58 326.291 995.04 328.223 cv
993.501 330.154 991.4 331.967 991.4 331.967 cv
992.827 321.702 li
992.827 321.702 989.742 339.823 987.88 341.871 cv
986.019 343.919 967.232 354.922 967.232 354.922 cv
967.232 354.922 969.432 346.168 972.793 342.67 cv
974.167 341.241 980.236 336.243 980.236 336.243 cv
980.236 336.243 975.639 336.943 972.46 337.732 cv
970.828 337.786 977.426 319.925 981.679 318.773 cv
987.205 317.885 995.107 319.726 995.107 319.726 cv
994.068 318.254 997.894 319.302 997.894 319.302 cv
997.894 319.302 999.654 305.863 1006.24 301.874 cv
1012.84 297.885 1021.11 297.85 1021.11 297.85 cv
1021.22 296.748 1026.7 285.459 1026.7 285.459 cv
1026.7 285.459 1026.08 284.059 1026.34 283.07 cv
1026.59 282.08 1032.7 270.425 1032.7 270.425 cv
1032.04 268.76 1032.91 266.455 1032.91 266.455 cv
1025.09 274.841 1016.47 283.347 1016.47 283.347 cv
cp
f
281.718 129.818 mo
281.718 129.818 260.644 124.244 265.42 122.883 cv
265.441 122.877 265.457 122.871 265.478 122.865 cv
266.737 122.516 268.015 122.152 269.313 121.771 cv
282.703 117.838 292.838 120.113 292.838 120.113 cv
292.008 123.76 287.645 126.883 287.645 126.883 cv
284.704 143.713 267.546 158.473 266.171 160.389 cv
265.338 161.551 262.528 163.887 259.694 165.887 cv
256.742 166.624 275.668 141.424 275.668 141.424 cv
275.668 141.424 273.966 138.193 281.718 129.818 cv
cp
265.62 89.4542 mo
264.979 93.7264 260.315 110.488 260.315 110.488 cv
260.315 110.488 261.595 109.802 267.12 114.351 cv
272.644 118.899 266.633 118.556 266.633 118.556 cv
257.395 117.804 251.453 116.281 251.453 116.281 cv
251.453 116.281 256.277 102.392 265.396 87.4654 cv
265.707 87.1611 265.928 87.3949 265.62 89.4542 cv
cp
242.29 198.153 mo
242.017 199.342 226.004 225.955 226.004 225.955 cv
251.637 193.157 li
251.637 193.157 250.32 191.631 250.522 189.855 cv
250.724 188.079 251.763 184.179 251.763 184.179 cv
251.763 184.179 251.273 184.14 250.51 183.771 cv
249.747 183.403 250.129 178.45 251.601 176.96 cv
253.072 175.469 268.817 162.087 268.817 162.087 cv
269.233 166.674 li
269.233 166.674 270.292 159.63 274.49 154.119 cv
280.265 146.537 287.306 133.363 287.306 133.363 cv
288.491 137.128 288.426 156.781 288.426 156.781 cv
288.426 156.781 287.217 158.56 285.096 160.255 cv
282.975 161.95 282.105 160.968 282.105 160.968 cv
282.105 160.968 278.187 174.148 277.212 176.129 cv
276.238 178.11 263.581 189.398 263.581 189.398 cv
274.769 182.149 li
269.421 197.072 li
269.421 197.072 282.861 166.513 283.618 163.84 cv
284.375 161.167 289.658 156.917 289.658 156.917 cv
289.658 156.917 293.283 127.088 293.879 124.389 cv
294.476 121.69 298.65 119.235 298.65 119.235 cv
296.515 119.222 li
303.022 114.511 li
303.022 114.511 297.619 117.16 292.957 117.83 cv
288.035 118.538 283.299 118.866 278.897 118.946 cv
272.846 118.896 261.276 109.655 261.276 109.655 cv
261.276 109.655 265.802 87.7597 268.686 82.3319 cv
269.818 80.6508 271.001 78.975 272.238 77.3227 cv
276.524 71.5983 289.141 67.7419 289.141 67.7419 cv
289.812 66.7047 290.871 65.7234 292.125 64.8166 cv
296.092 61.6017 300.322 75.2233 300.322 75.2233 cv
287.218 88.5356 li
291.29 92.1053 li
276.888 109.936 li
276.888 109.936 292.91 93.0222 294.391 93.0127 cv
294.391 93.0127 289.501 91.686 289.124 89.334 cv
288.747 86.982 303.427 75.8438 303.427 75.8438 cv
303.427 75.8438 292.654 64.4786 298.316 61.3907 cv
298.603 61.2628 298.887 61.1401 299.167 61.0208 cv
299.911 60.7823 300.47 60.5482 300.884 60.3199 cv
303.173 59.4255 304.855 58.9157 304.855 58.9157 cv
305.394 55.5501 308.219 51.2559 308.219 51.2559 cv
307.118 58.1275 li
310.177 48.2615 320.924 26.3117 320.924 26.3117 cv
308.812 47.5497 li
310.486 38.1195 324.805 11.3172 324.805 11.3172 cv
324.805 11.3172 313.33 32.1641 308.765 40.1451 cv
304.199 48.1262 302.548 50.7385 294.951 56.0971 cv
287.353 61.4558 270.46 71.4903 270.46 71.4903 cv
274.079 69.9328 li
271.603 75.0992 267.375 79.2529 266.048 80.4829 cv
266.84 79.8169 268.402 78.7965 267.545 81.9958 cv
265.747 88.7073 249.967 107.085 249.204 106.716 cv
248.441 106.347 249.048 98.965 249.048 98.965 cv
249.048 98.965 247.432 98.7886 248.628 95.939 cv
249.824 93.0896 270.46 65.3263 270.46 65.3263 cv
256.852 82.0507 li
256.852 82.0507 256.64 80.291 256.528 79.4511 cv
256.416 78.6113 259.792 68.303 259.792 68.303 cv
259.792 68.303 254.727 79.4093 254.48 80.4382 cv
254.233 81.4671 253.692 86.127 253.221 87.5309 cv
252.749 88.9347 245.838 97.1977 245.838 97.1977 cv
245.838 97.1977 244.882 113.174 242.536 117.565 cv
240.189 121.957 236.574 129.307 236.574 129.307 cv
236.574 129.307 245.49 127.956 258.019 124.832 cv
264.548 123.124 279.261 130.534 279.261 130.534 cv
279.261 130.534 260.185 166.712 253.246 169.532 cv
250.437 170.594 248.06 170.969 248.06 170.969 cv
248.06 170.969 249.094 175.473 249.307 178.81 cv
249.294 179.224 249.301 179.709 249.341 180.296 cv
249.58 183.841 242.642 178.123 241.686 175.927 cv
240.73 173.731 234.676 162.6 239.836 158.864 cv
244.995 155.129 253.623 152.319 253.623 152.319 cv
248.467 153.466 li
254.075 141.542 li
245.016 155.132 li
236.081 159.989 li
237.613 174.289 li
237.613 174.289 249.188 181.806 248.091 186.835 cv
247.31 189.47 246.247 191.925 245.137 192.691 cv
243.012 194.159 241.656 192.874 241.656 192.874 cv
239.316 196.198 231.901 200.928 231.901 200.928 cv
229.983 205.717 211.437 236.856 211.437 236.856 cv
232.465 203.566 li
232.465 203.566 242.563 196.964 242.29 198.153 cv
cp
f
277.747 251.656 mo
277.747 251.656 271.528 259.444 273.393 255.302 cv
275.686 251.258 277.525 248.105 277.525 248.105 cv
281.723 246.593 284.515 246 286.37 245.899 cv
288.319 246.418 277.747 251.656 277.747 251.656 cv
cp
242.688 331.212 mo
240.861 333.087 246.709 308.803 248.411 306.26 cv
248.411 306.26 245.986 304.232 248.356 295.153 cv
248.356 295.153 244.735 296.696 235.481 297.825 cv
231.829 298.27 233.373 296.678 236.571 294.591 cv
246.859 288.859 256.399 283.68 256.399 283.68 cv
255.681 287.729 251.977 292.287 251.977 292.287 cv
253.482 295.135 255.845 306.336 255.845 306.336 cv
252.44 311.427 li
252.44 311.427 251.916 313.825 249.981 319.119 cv
249.284 321.024 246.428 325.76 242.688 331.212 cv
cp
236.076 340.307 mo
230.702 347.276 225.01 353.605 221.422 355.257 cv
220.785 355.55 220.145 355.807 219.505 356.05 cv
212.865 357.791 201.335 350.131 201.335 350.131 cv
201.335 350.131 196.76 338.227 203.204 322.591 cv
206.414 316.285 209.846 310.556 212.433 308.696 cv
214.283 307.365 218.62 304.778 223.881 301.754 cv
232.957 297.469 246.997 296.792 246.997 296.792 cv
246.997 296.792 244.26 329.838 238.043 337.712 cv
236.571 339.577 236.04 340.29 236.076 340.307 cv
cp
201.855 373.283 mo
201.855 373.283 203.601 372.606 199.376 376.778 cv
196.819 379.303 196.875 378.389 197.314 377.275 cv
199.694 372.233 202.426 367.173 204.484 365.469 cv
206.727 363.613 211.87 362.058 216.522 360.957 cv
216.725 360.931 216.959 360.892 217.27 360.817 cv
221.058 359.905 201.855 373.283 201.855 373.283 cv
cp
193.863 343.806 mo
193.911 343.394 195.608 339.036 198.054 333.497 cv
201.364 326.04 198.481 345.797 198.481 345.797 cv
198.481 345.797 200.81 344.176 200.79 352.073 cv
200.79 352.073 202.866 351.608 209.045 354.87 cv
213.25 357.09 212.389 357.814 211.41 358.051 cv
207.55 358.565 204.783 358.383 204.783 358.383 cv
199.002 369.109 li
199.002 369.109 198.935 363.911 199.909 361.4 cv
200.883 358.89 201.76 360.034 201.76 360.034 cv
201.76 360.034 193.733 344.907 193.863 343.806 cv
cp
233.834 294.528 mo
234.719 292.802 236.174 291.267 237.487 290.108 cv
239.021 288.755 240.361 287.918 240.361 287.918 cv
240.361 287.918 240.793 285.719 241.262 283.356 cv
241.624 281.536 243.562 285.118 243.562 285.118 cv
243.562 285.118 248.928 286.593 247.361 287.614 cv
240.05 292.367 232.798 296.549 233.834 294.528 cv
cp
281.255 246.443 mo
274.83 247.573 274.829 245.656 274.829 245.656 cv
274.829 245.656 263.767 274.657 261.085 277.706 cv
260.143 278.777 256.261 281.634 251.707 284.727 cv
246.18 288.008 241.501 284.265 241.927 280.023 cv
242.017 279.576 242.099 279.167 242.17 278.821 cv
242.392 278.154 242.526 277.705 242.596 277.417 cv
243.711 275.611 248.036 272.949 248.036 272.949 cv
249.201 270.612 268.811 232.441 268.811 232.441 cv
250.794 263.875 li
250.794 263.875 249.991 262.362 249.948 261.452 cv
249.904 260.541 254.619 246.627 254.619 246.627 cv
254.619 246.627 248.985 260.403 249.137 261.673 cv
249.289 262.943 249.217 267.144 249.217 267.144 cv
249.217 267.144 247.282 272.438 246.506 273.388 cv
245.73 274.338 241.925 276.802 241.925 276.802 cv
241.421 279.182 240.502 281.444 239.136 283.645 cv
234.936 288.788 221.583 285.944 229.209 274.105 cv
229.209 274.105 212.253 282.995 201.985 297.176 cv
201.985 297.176 209.095 288.485 217.577 285.545 cv
226.059 282.605 227.136 285.086 227.136 285.086 cv
227.136 285.086 236.702 286.832 233.949 289.799 cv
229.639 293.811 223.527 297.785 215.218 302.083 cv
198.301 310.835 197.528 308.043 197.528 308.043 cv
194.004 320.166 li
196.764 314.923 li
191.167 335.176 li
193.065 323.405 li
188.802 341.038 li
188.802 341.038 197.328 357.053 197.136 358.75 cv
196.943 360.448 192.273 367.698 192.273 367.698 cv
192.273 367.698 192.138 376.282 192.026 377.747 cv
191.914 379.213 185.927 391.363 185.195 391.307 cv
184.462 391.251 184.508 386.504 184.508 386.504 cv
184.508 386.504 182.367 389.435 182.129 388.26 cv
181.89 387.086 181.496 377.787 182.071 375.671 cv
182.646 373.554 185.238 371.321 185.533 369.847 cv
185.827 368.373 191.5 355.417 191.5 355.417 cv
184.665 368.885 li
184.237 361.879 li
184.237 361.879 184.323 369.358 183.742 370.572 cv
183.162 371.786 181.468 374.514 181.468 374.514 cv
181.887 381.337 179.566 397.6 178.7 400.47 cv
177.834 403.34 160.113 435.216 160.113 435.216 cv
184.235 397.923 184.775 403.463 184.775 403.463 cv
190.992 392.306 li
190.992 392.306 184.038 403.316 185.22 399.427 cv
186.402 395.538 193.914 382.858 193.914 382.858 cv
192.044 389.518 li
192.044 389.518 193.325 386.222 195.152 382.042 cv
198.424 376.869 216.272 361.25 223.994 359.432 cv
225.011 359.255 225.625 359.161 225.625 359.161 cv
232.42 342.957 251.666 321.912 251.666 321.912 cv
251.181 327 li
251.181 327 253.653 334.772 249.794 339.933 cv
245.936 345.093 241.775 347.755 241.407 348.639 cv
241.039 349.524 230.685 366.674 230.685 366.674 cv
241.569 351.05 li
241.569 351.05 241.6 355.206 240.838 356.742 cv
240.076 358.278 236.525 361.922 236.525 361.922 cv
236.686 372.865 li
224.106 395.916 li
239.296 374.017 li
238.657 360.725 li
241.38 356.625 li
241.38 356.625 242.026 351.073 243.933 348.974 cv
245.839 346.875 253.525 335.921 253.525 335.921 cv
253.525 335.921 255.676 316.108 256.69 314.417 cv
257.703 312.726 265.78 302.3 265.78 302.3 cv
265.78 302.3 265.427 301.001 264.929 299.132 cv
263.389 293.244 271.641 282.948 271.641 282.948 cv
280.585 280.812 li
288.748 263.169 li
288.748 263.169 278.708 280.095 277.532 280.958 cv
276.355 281.822 269.693 282.015 269.693 282.015 cv
269.693 282.015 268.68 286.58 265.606 290.971 cv
264.242 292.92 263.191 291.561 262.444 289.45 cv
261.975 287.497 261.661 286.02 261.698 285.707 cv
261.827 284.605 264.452 278.457 264.452 278.457 cv
264.452 278.457 263.935 275.288 264.523 272.34 cv
264.796 270.972 267.614 265.658 270.557 260.353 cv
274.166 253.945 287.855 244.982 289.456 246.526 cv
290.151 247.099 289.991 247.848 289.991 247.848 cv
292.148 243.364 312.605 209.532 312.605 209.532 cv
312.605 209.532 287.679 245.313 281.255 246.443 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.4.1
%%For: (\700\760\750\755\740) ()
%%Title: (2208.w030.n003.427B.p1.427-temp_01.eps)
%%CreationDate: 8/22/2022 9:27 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3QS%qDeDcra"-)#7pun@-<&sX=+D_k1Dp$/YTG#fq!EYs6S'[=#Ek'kj6uGL9kN)TXr"2;cOWLCJhFm//c])eGL]T@U&q"
%A6^Z=-naYcs'&\h1+r4mPV-uQAiQ+MMjq\'6Z7.RQ<D_lm?h$8X`hc#qlVe^Vcj7qBWbRQ?8qn-7I+-^#%Ji+nMt=5oqZ:Z[#Rcd
%18L%^-A*u+0FB/Bc_Oiq:,S[nVft0%$Hu5q]f:r\08\WGJ):&1]je?1QI[e7k+`I!7T'ki3iBGDq>_iM\QJXQ$P-N_]rZAB*P/+`
%cjN$\HnLr+n&i#AV+jENYRjJ,A*j6Z2cf0%o_o6&q#<XhpRgq2kMfbK>pl,$iu/p)+>GK7KZBTGJ:4m,[Wi+?8AVsqB[sMN:)G>"
%6;Vb-3)5-VL;3@A!tRpm?C$25a9&<'+9iS6V93V9PG*P-`Ls6br<KFT^DZn*+kMjZQ#t43BZ02sN$#jGJUi9\fFKXHFksWF)BBrn
%7+tV_P#J]_f3um2P%7iC9HM';r,)2LCK<mmJ8C\I/oi5u;OH=IZYh"iIFh?q=F60(95it;.fsTRP$J*[;dD_OPpH.A9"aFe6/mH8
%\;'2Kg^!349oF)N%)'2_jAZm_11M1:UDX+co/<K:o:]`[#,3Sg/qs9nE!Rp\J(3<s)cT)8e'XXJfNIW&Fugo@9^jlo$R_C>R+X_g
%[..oG`4ZJG:cBoue%ljk%&W6sCeRC;o9fmeN$_<tfDhDhB?G;(hM$`?QJ$,ORUu)os78]PAjLWHl,AZs!G>'.9]6`#pfuY\T&Ul:
%M0\"_p`m'9O3#[+;1`t9/opaB73;f@rI>ms'_&^?m3:pBb:n-i]qAuEHujf?RT[4[5)$9&C[^.L`e3E+&K4@4^bZsa#N:i6!Gis<
%L^5mOn?9dJBD<\Z/im(.q+\&^/R4oC]*JC>OJiq&CjbQBi?Fh#P.;Tf*\F`5MO2k8,t\@QGfjbWqrIb-3lPjf.'sdoYHB`?X$?A8
%Ug8Pf+?)&o$epd4ag-g3(Oj1d7+h@a[t8]'5kN@H+u%'EHJPN%>,uBP>u@ZWY.F2$=oUVZ/2m]?%n_:ALBLh2A@_cg-Z02Yr$!lu
%r+,n+)hs]0MpTa='NeTl)bi$AY$BTBkZ"*U$@Zo:TgqM5;B;:S!(I%!%D0h_*0JJDM/tm)NgV5Sqk^[^pjou<H8K1;Ls;S?p`Bji
%K#ITS;!F&;[F/t4I[RMO5"?bB'/%\"MFOa>,\nA+[O2YS[ZGm'#9$5IiogJrQp$75CjTjKp=^_Bf4'*Kh[rO3%s>QgCB"?<kS\-T
%rjN+c@<WW;10nT;qL*8rbdu2>:pScI%$QZ9+:P!@T)KCd;NU-B4T`3LU9'r'kB_<AFU\C112DsM]^;MNTdM2Cl57LOT)7C4k]>`$
%)Rm7T9bNXtn6hZe=L[*@)lSeqaDPUN<;-,,UG1#V'IQ$C,72[9bA`F*HLO6djbh#:pu_G-BS%c*%DWRJ+m^3ZCBK-u!ADXCLUjHQ
%a@/1X`bbB6]0c#SjtqJjfa3-$Q:\F/[@QX!6ku'_T16L#%g2T.;epnSDZ06XP95;'l<X7VF`"%FS^F@+mk+BT4(;@Hp\-3(q6!_J
%oVl!Cs$uDD%!iVg7_N?s:"gh0'J\^tXS6,NBkE"\mEEIY!%R_95oo4pB#?A2h2^>=*T>+Jg0oXc^"of7(.-,7aRm7h8#P/t+EYY_
%^HEC2VO8[BSV5T#r8YjU]8]LhUO?>H2pOuc%Dt>h;aG3b8P=R!K"??%M\Zt:6mlD$#6!->mc1gDopFEGR;J+X37d..c"Y&U>k:3g
%*[`mI53Cdc1V6[b5GX.5ZOhGDO4hr5%H<;V=A;6^5=&i\p3_#YLqN^ChhnKqM&u]0kNi8)cqu3=Iucor2_*ARE<XNF$^2XamqbL.
%/h3"5F/7ZmC<ruF&441QOnm`[Ff%Sjc=MtEofFNn;AQS$1)D7#'_[<*qj`>s#U4=`j*"Z\]69L>gqTH'Pq<FhfD:nL[$Sni17A#X
%Ou^?M8H$\Ac;C0RREIV>3\5?_AM3^W&trkhk9*HI75!aOf=T8gQFYfN4I8.Z]'Zr"25Bj4rsF@=G_uZ'T>G\$*0p@O*8_;`jWod3
%75sU/.B\.VaC4,4Q0jMsrmNknVHe$)F/@=\C1@l=As`Qg.8OZ,biL5r.nti19(PDWBAkNfoNf7g3R&Ta+49Xa9.tJSR[(m;'Cbd8
%*-KghR[s'pOnsQ@Drs]85\(_O8L!\uS1XdR\$OGK?t4Z07tYk$)F+5';T"*X&C9u[]$pL9apkd@hs9lX39ms"$5CVZAUddZ="sZL
%#`N0]qtQIS*d+Tj<n)1ZD#mZtlKH\FjR;TD?"2#o[Q@Z6J`;feE-hig2#J!d[*5D]#_%f>U@5qul(I2iCj5f+2LU\s*6/g!5.6O4
%5jnQD4#k!Y"fNB2XCb-`j,Pkq[J:TR;9lO,;=3NkiCLYSJ4j_t[>/r#S:h$^q[Nl1Moc\5+]n62NWdk/eb>R`=2H>TU1P:6C.%GL
%M_1Q?Ni0Hgq-Q/%8PA)f#Q*TdPgu1K%Nd/3s!A_*@[+5:5CUF@MpLt#"`M[hB/;_PmrfN\T/ae83"(qrSRRKAht25tWg1fCJ"-11
%*6+Yf=f*j"b3.9]>#i42CTa];QS*$ea?-H^2*o4u/4_`-O(jjb9.Ln9q'YjfTVL@5mm6p2r6^(\ePB^^,m,euF:pX,agup71ZkbT
%0KsBo*/2G]N&f:r/</8J3@qatiGs=/Z)Hc)'I'//ko+Nl1!p;aq'&=SS:ne88q>)dir<l(9R\::&Y%l1^]#+?jX<M\nS3ugN:5gd
%>*`5'CcUlRiig"`^eq-(frGG=7_;[PME9UkJ#]mrm"#p,f@/"pHoZ98-q'r(,%'PIZD161:HjuTaIshk\^6BYR<61Cr#VnRc)+gn
%l#h#:o)-0P-XlWgqJlH4q-!VJS:odHk^V=JcsOK6T\nNFE2P'GNEKA2YuJb@`IQ;0:.HH_c$'e.jp0:d?b(3jqoFeFF;!"bj?DRq
%*#1)RW1NT&>`1<<J^uXrdnARnYcS)BZ@F>We(!Em8[Knij6SDCkHS*1'I!\>$+@7:=UQ35W;iuJG8*)daN%0CQsZm^JagB0-C3?[
%>0$(\`:*1LlLb=\a1D8f;0?@Up,Fg2Z.No8BC%5\fCt_o6>.5.EO6iE0&geH/o]CNWG@MTGs)0+*Nr']"+M>1/lJ!1b$[u]C&n,m
%XEo<@#lJa?>MtC8rs$58/EXuUs&R[s;/Y;JR?+*Sq911HUJeTt?X)Y@#Q;8A>IK(!(ELJV:FNl^&GaOA'ZEY"/5N!"\TmUVSjY"g
%C\R',2TnsRHm2+$QLS7P7%"X:3N>'Qr5lijmcV&?Mc+ZJ7`Hea[\FE0gfY=]KpePmMrH98qU)VtcM+!TZRB>Y/^L.N2WaaocCu#D
%<WDrLmrT6f^\TJgqjX3HEE;/l<R.?:>Of(q;Ou.d"@jX+R0&2>N8&B>Ak;<U=3Q*d68N7gl(<@2S?mCHs("kanT'FmF(F?=3-_aM
%ce5B[M4bs&gs9CfXt;=$qhn_I(Gj<^e8aY#5B4"OlR_HTJ#.74J)RU'^'e7(jf!dLVf0cU,.F]S+]hG;96D1m7WCb]B1E93m>@3Q
%bn5+nEft)emFp!krJY$'Pjg<mRZm*,UKl[(Y)Qkd>NXFug`L@`&kJ="['m>Vb@ka,eUB<Tjs\XUqH!!A*&%,eEr_4]eaTp.!<,.[
%).rQJUM.#6,:BLRlm*0_W#@[R7UKG\QIfIA)cH3_CTgiQ@5@B0Ws+PJZS$EV@pH)@Ikr_PZNHiYh]6t"EY=Pa:-8K1pNnK6Vj+#:
%bc/)O/FSi"'aXc$4/LX_]N**GBMH6?b0jM*eql%f!KC\_0,mX'=dpd+n@oXSj`O^L"EQ<J.t!>gZG'q*Z,gcf:A`T1:YaR`0N:7+
%0$"k*q9(uMMgb?&CSPILV`Q+N(k>'4U$A>7krS)WkGN+Br-.uX]GpCWT:0_dH2H*ob#Ea/^SUL6=91q*]f41EeE0s98)[=7W;):>
%1'^8N'C_tqU\IYSc:LPL]^Kg,G$)Y]ElEOLTfCTg:NA"oBj5+C'eA5Vc;Cp,::6d>S/&M\k/ZJJmn\H,rFr2+AuEC&]%AoMf(_b=
%BC":GB4hg#68@Q1I4&n6QIDmh6U*WK\3riTrZTYO.)p<-GIdbN8+-BiS])UWNnJEBr\!qm8+BaMq>T[crGfRs[+t7YmeQk.O^%8L
%3cufY\``;>.dq_#rn'Bk\5=l&gNje,&d!`PH.ar+o<M`]pLkAebJ*<8](u(q`R=GA%[^:F#Jr-h@d\V"bduZaZ1QJ)Bkbhk`S>%A
%[S5>>$/74D>:+/n.q,L5!DT5C5N(HJ$pU/f`=4Mtbt`SI9.U%[Qq@0`1qJTMgo*34<n[e*SFChF!*Ud6O;ru$&DZkGm9`K39/Ob0
%&m7D\TfWgTchs$5_s.\pP*Uf\q0:9T,c&ElGZT@X>%MZk\V5L-bYcu_O$Z$5UD?5?;<JW_!.U>&;ZdReS&>ti/^3&Ps3h!>Y,)pX
%;m;QFULh^6GH;\8'd?g;Z3s4!FL8+e/Sdi!RaJEQ[&b,sCI\>6%0)9Td/p.tq@"&X;b1$A^79c$^L$e@Y[Z+j1F@mjQF*_3NB4L^
%f&u@cN7]d_1[6F4ioLnFfpqfp:I?i+:C@7#71aPVpYLK$e)AAdoSWI21[Vs/bLm95.Yi%XH.g,SAdR`l-`\+`c+0Un^]O7(36J4L
%oUZ?oDUj4.NX83m,(8s@$"qB0a6o=6n1@<IGd=tmikIrsko>JLUSFpCT7.03@jC$q/POI*iF<qWM1P0E3W<pAEHqZ8B5_0uUeh!G
%DI8jpKcRL$\\*?)'M$4"hX[/k^@Z!>)d'hPmgtFArLU`uD!rb/e'F9%D;E<HG8=-sPMh!=^sYl9'=hgL<1<]Z][$@R8;-^X%b&(u
%;fVTq6cR>aG'U?CG+%.`ioJ,4G37gOnb"p&oF7$<SpKP!>06\hH0apKQ?Or;1l$aQ:5]7@);70b,U[$,bg='hjRe9;9lUde+3`*%
%Ku5Z5>@qQl%.1OabVDQ_@"pSsIKrtpbt/V?@);"f;PtZm_3J'o7:(-0Z97.q9R:*]o;Y$=qE&HH@oDUl[o$>ij]K?%]Wn/:ehN\%
%a2iJ,6FX*VVd<<kLYkh5aFufbi'*djn7nGQ3WDc^cr'P`,K0%eU1H4u^r'$Q[8NA>=SLoW6Ol@pH.C8@XHlosIDMt=$<gY0>5DG>
%Js9sUf@RNHkTfU&KmaGfb*H)pB_=11E7PDeK5#fj6Rt2]0jAUP^fcJ@@U#tuXBkCR]4ja4=NqfX"\p[/boH!8,b.?^+%NKeD.GoN
%^Fau*ZgN&U#(.Di74c&\KA\KBk?Is>pr;S@GQiu2%/(cho>ubuFg8Mr7s!=0IEM_"p60']o^`96TkpDY%hf30$4DUALm!s`R20Hh
%@oS>TUX&$"aq0h@`i.&tp"td,SS%8T;<fesp>W0Er!sfoE>AnR3:apG$^8mWGo6ahcdOMuED-G@i3=)RnRm.6AXUgAca10c[J.#O
%kC1U%c;AMts2o`7;2?gQ\Rdh29]q`+gbPF)VK9Z>S>0hZbB.WicMc)<\M%tB_ZH:o\2Sk$IeM$#W-nG>$0T%bq=/5H*0oI[mak&^
%T`=.**57jFE;"YEb8Uj1KYnmZ5=VqrRWApjZ`TPRIKfR(8+rL.bOjfcpB?#l[#EF%Ii1+CW,'B+Nf,f`/Zi].^5!\/jKu2gBeB/o
%`Qe4Ie0YtF`1/0,Ip<Ph80-F;R!n`4]]3Pkc`BWtfs`s>IE&Ym>M&mLSL&08+)4P(;K$]dSL)#gm]:Uq-C@p&LXG<<;EEn[<<MZA
%4cYS0#CmT%ma=sNYmnN4?ZH)lM07eg[!k+eE$.'2W"1pG%ims2DL7DZ/-eC)l0kXiY"9Ics'7\8[E;ZMcP<hkZ6Df,b>H>./(A$A
%3U.pX&\uGlZLpFo2G$=,[4lq4r(fh(3W&P=Qf6^Q%-O-+,0OZf&!#cfN.DuFUVb26BGh%80FmA^bL[.?hEsL:^Vi>gZ`,U0T;.A1
%HglMG./F8sr86&3s)Fs>*Qk'eZ26Jd"MLE;G7nPcR=X(>/)VhJ;k'`^o9"!"nSt9@X%`t1*#dl\]^Kg,p9Lr%AW$ML48Dc%6u17H
%HoRB=_C(kJAf7.S6[.1j?VBSW)`gK%)<25g8&khR+*3Oh11VJJONs#iO#]`YWqt.&rbfGiq-/JmhQHnLLDiB,'ORIg%^r%FAe4:l
%\@T>ikMKn>VloNWb8s.WpV5GnM_D7[g2bsYfrr#SkdS09[Vf9H)YBNretUVfH".U*?dFNM![-kJ#72A]_[/")(^1^cs#91@^Vrb]
%pFuJpf5d`-r_OI375"C<:plg^@JqVeddiEW0<IDU8!bYgEOA3M;5)eNn!45=8nC22\V*n8lU/th2qg)V<00%aLY\HqRDX0m2J4*p
%A*:r*@<o`XpC!jR9nK-HlMa1.m8Pn9l#<)6edm%T18#tS'b@t?/Zm\Ys&V-e-G.O^KnC+cU$>cN.lb^R9J2nK0Wu7m2K:?>eY#Dt
%s(PV++Zip9RH&rO.(^=_UJUfoQpm?NjubA.^U,`mQfHC2nGPqrEYQha&Ulc$GPe..+102iFX1hO2[^Z%m_m02*_nQtbL4H%N9FMF
%[%Me.dgZ3'o8"Knd"K<!HJM.\)7%Ne!auks%:Yn$__*&-'dT\#nVQ-h&tO`ukC*[#g,)G;966DCqS\F;3K,uA+$gfememF>=sV'B
%c\Z85s'nTq9uNpl1UEJQgrKpf!P:Lp=,c;2PJ@+cX@8^0oNAWZKtfEs:ajm@Z_4q)<ju@WSSCm$U0FdZ<RNJV]SA-91oAgh7YM&r
%G1XB@f!jW,DQu7]nMV9KErj59)8dP@Nd]ghnUVM8Ns)(D$3"N"G6.].A`tC[oS^fFJ)IZKduN'5$+*EiK6D2(%Ao?IZRfqi>X=iA
%5giNhr!S1LJhGJm)SLOZ+<epjs"b)Z1\BR@pcf&-K+,\bJbUu3>6\ia5^XG_9"kC5AL+tuj<S)_nFR6=#3(i,fFGhID1q\[2u*[,
%!V'`(nC_G"3FN%HD@t)V_ASV&MccMi?N&acrB4k`IlGJ.@VkHumkfi.*l2fcJQX-WShh:e]&)no\2*h\ml2]oGGATi"oK+"3DP\^
%(DE$D:?<5c+Mr>oLC^]50d?P=nhMSU%id)l.et1oWp;!`Zh+``hL*@^a7/=.gAZ7%Y#EsN,NC9P"j\eT/r+RB!$6Da#E?^\VpiYj
%HB;8IGmIZ:OA>ph..U&pD'"S!40nKugf9Z*=V`_l,Xp^S#coNHpd(/K6'6Mmbs[e-(<;Xn'a.s$V=S7CX4?l<8#M/R$U4a(p\k5+
%BQl#5LBj&11i@abNCP)gombZS,YE?caX(m!j2EIEO]+SMYr7t0W!\]FP,=$BO+N'[7$'[,(fauIr#ic^&fi&U]fg@@kb\:Dn3fa^
%<#(^#Yd_KT["SMaa*GH)^e?]uoG(mQ)'d3\0!RQ?FIhinhVR\"N9^U1p*]m!,1+Ft%eajR3\g4DbfO*(:Ak!"Y;]ZD3fo`C>l:*0
%8H[^3TO]:uk.N%h=[-T`+D)`,F5Io?Z]7u_J&AP0=R3=/Ccp`iZ.mWpS[d5O>-:#,pDVC$i7F)&#TAGl\$]kPVdt"D(VQq6cO8=T
%T%.!&)D'\Tf\V2,coYD;0_cAZbUeUpK]8J5)7Yrne)s6-s"d39!Qb;0*n*IP#nfBa;TEESPE6-Z20>@e1]IKZIfd)6^iA!.d!F<5
%mH7rfh(]j1F*"FjkF#K(^VlEZ.[/LP*eh<[LaP`,gY#[Q.U*9QlGmJ2DAI$age%lpCmrWEV:ts*?9KP\C9;*!ZCVY%js!q^8<I?[
%gKX[iU;P(Mqm,`JG/O.PZoH%EaNuR>rSMqMG24SG?ETN#7(7\;@F)d2NU+N18/^%QKs&ssV?<%,j4p2`[H@PNMiL3iqdbp,gW*EC
%Ft-Z_)]J0a>A+fQ<.PkHTZhAV,7to3$G=9[@!3[j9^Ce8`\K%8pQCBa7nqHH.)*a>=md2Ug@+%'J$#LBF_D368>r1R]Y`FqN21dm
%QC-8$VR:KbO*C.78[5?IC[#]lqPLmqqEH!%U1AAQJl+Hf4k%ID-\TeD)@j]Ah3KRn2(Mt7U:[^CX4nP::=6YUQ_HlAYD,##qE/])
%L*);dLPL#YT[b^f<k$rR^%X3P5Y'o\Vq7!:%R:=ClW,Ll-BBOt;SR/(/8B<dGXm&jpW-j@!LKC6_?Ck,knp.P%R5AsK4%WfB\"cI
%&'smh?>:@o_6fGF>2<kQo<R1-HdM:\DuGu&.ZFsVB^OLR`CS,dl#obPL"6H[NQ?q#Fk*<kSV!hD-.h)L4GN"9*\FLj>HYE^kgfuW
%W=0#2PCt:iI62`g"qhO7\;$.V8JHGi.L7ZX<L?$gm$R$\>2;pq*<M5d6>r@dmLWdML^*LYaCRUqXeWep3_@bG1<Bim1*%4WAb@js
%\T%R:f8?F!/]1g)I]@JJ^%oWr*IL)MV-/%7%SUQ#J>5=U;Ya:1=$K79=q`Z*'3J5=b[H^_mjkrkIDO:!*Q&'/Y-k1l%Z#)=cjYuD
%n]*dDEpPj8#+94ukhdbh_$mFHYgeZ0mco>ul\01C7'WR&V>.^(Tj;c:ol#/)_-,M5bH1AR[[.Y[6?"pYY=2@2DS=oEiC^T+g;25E
%[X*2t<mPNMhfPoQ"o*9W!Ck/5>doDmgFfd_jN@+@pI%I7o/-nK[re;22uO;4s%KLtih+N3]hH>O=>sD+>?JE5#6_[@#did@O(NBZ
%qOXH"T%tT"(AJ)$6$U3nB]Q01gOR-$7FNaNV$Z_Og-.;SUX+^OPLI81Vql[>!3d]VL9r2u3Z*9IC/F5Q)SOfJ\QC>XLiJfe7(,,-
%KS.MF]mod&Ddu;LffJ9I1P'5l3c%b_Q)=F<l/(uK`!e6M?Bm.(&s=UV^-(18'b3RpLQ0ceeLeqc"F$lIZ%CnBR!/Bb?J/dg_`LZ1
%c1(.%WuZ)ME8.TjGUMmeHG,>#dE9j^3kR!,\X9Y2?]55B)jPV_V+\;%TH$b1L#fk`:Ajc>.bk39+q6?a#37jGs1[RY-KDu.FnE)U
%E=L+0bKOs7ibY[$>*cA;miNbL=R^)%Wl+d%O5\nunhD,!#93[;elk#s4Y2k,)+(OfbB'O"00`ddd<`<O'.QMQSQJn+@n.s<Z5t[)
%l*p0M_8\@'#_6g5SgmM_Hs2#XVb/C^1n_La7WJN*P6,a!Q+F2YqWd_i'1MHH)lj=l41gV4Ibc)/gNrCF@iLcVR,6ZS^H2'fGD\hk
%L7\m(U7AC7V-.D7P:^;;-"K+YQ_O/\K8kECJ*9AM\b.mL^_bifY4AfUZubmWN\lY5%KG;LcF2MQfJ@&`]3XPD<\_SiCE^,NAMJYh
%^&lI!)nLFA1Sp0FgX^nsm-1*#YbakUEje8R\4s/\A#Wb[F^duYEHaI8\sGPVEm/q%mp;:I6X7J!8ES`HXoV/ld\[9&E\C]kk=m5P
%I^J7$!k*VcQ-p*<kW+W@CV/n(\,XajAL)Zm6tRTJ?l>iGOqPhPs*f"?rj7$C32-:\>DX.W)gBK%5_<nks8IIVMi/ZVp?[X=pNCaQ
%Y@gXaRsg*$^._Mm/H`\\a*eL?#9^8-]aO2'$`$L=8)qpKgi:#U+@p_)CGD!5^\[!Pm?>#4VJWD(V8D?)RU*P9N+?DFCqQ8ohSO2l
%TaE=a'lNWhPb<4ukq;MMqQHX19dGp]^Ks.FN)s_?VqbCT,\,q1(215X,0LcKF0M=#HY]->1?m&IADC6IU"&>SR]6@F5c5>ZpE*XS
%D\T$r8^YC:q9DSXJ)';&7rF9q6^6dhj2Q-6VTOGoAR`0IS%'uN<OeCOK/f'B#kLFoG$fEVEKH=-/Uu8LT>p[a9&*k;p6\.bkFgPs
%&iq0o_k]=g+%Di_=X#f:rmo@fdT\mA7[W$0*TpXTg80mi;FKeVW-Zn(hX\XcdR>bH:C!'cGm-@@22ST[,t]Sa@F20s3[!VU`@BD+
%>M^f8?:<j9mWtB6fq\DoaQ+k,M83.XS\u;OVOte7R7R=aj9K2$YK!@%gY*ot8_9YbLUV:APUF:%gnA]`?@4feUb>s08]J_2cG+l(
%K"KkAe,Z[]3LP\]E`<BVY))HOZ:@u#AC^JK95??[g*nnRp#_MWa]EC]@?)"NItC^1b<4gJlN-fFE`&uW^p(lPW8p`UD:@a-QT'pM
%JCgl#PF/kk3U0ah=Q/<qcR6Vq]c4?Q0CaWj]oH@#(#,M^efu",qmu?%&*sqp2Xh*abb0T6bj7f7hNj;Z4_25nVZ-!m;]@%kpm*)P
%bqauj_RoPc4n(RD:Jmdu*Ou4OlFD*ZPSa?pWa,i+?1`qM[TgM-jBdjVp/<j>'&Gd/"ej,_("e02HBc,/5"BYL]J+S&3hoE%Q:BLV
%L=RfsL)"k.G5!*mCWc4)k$a93pL34&gIT+eV'pE%Q6PtM0cj7Rn_WV"Rhd&_@k1D3!gaemWnAUm]TlT;j=>WKWED:'*o:+P:./`1
%-)'54"akWUdk5h,QG#s65jU?j&QttC+.m$Kr;MN4=t+?A6X`=Fa=I;o=b^BXVF7Y9d2[#0B-VY`AT7E(Q23b,YF==UW<;`hD!hgg
%L*(Up]?om7!<0Qj$r`@kmsPQ;#e>:G6j--1]8a/R/5MB/EH.CDDGB9^cSB!h'8'jUpL0+h!34lTI_SCQ&W4qaK<J6fM"ooVmt$j\
%bp$sI37(I7.IF#X?Vr]eDl/?2%,&.3Vhad\aNJpVOU#Eb8bAb@&n:J]15%N.Sk)p,+@B8c1`R'D*,ug+0A)n,'V$=`V$PuIO0"61
%d8b,YWSS%c2Tf2q5+If0#@^A))-\n:)!\rAW04PpD;JZUT-a5:TcmCMTu[[7>+b\E5u\pVYn%-c@>g+!,oY0F>hpc=HCkI8L^:tB
%j'abkgl1<t:7B;oL7X/_TZdlB%lMc<mo`40?VYN,8bZg.h&<%)6:rm4#cp?T'<d+n4dVG$namer'PhXQe@,n+(h+jS4l%!97Jta_
%h8*oE1ufaP`[_)I!K@Dl.Gr%Yl&Fb6N$j"\iDjC<m_rK0jQ%mRN)K:NO'FO%R;hT9.U[4"%l`.gAc*g]#b<^CkM<pHdN!bJ^#HYZ
%7.mRF-uS.UUXBno(eQC5BV?'j2\S]6OGa6<a'EgQ)`p*-:bkDkh/Hm*q(!f-C-?9sC"W,sJf=`F"jHA_Mh_Q>L&i",o&AJ<P*Z>-
%(D8u]13m"FF6SC2I6e;bE\t$BacN-0K+(5K#H]5?&!q&h4)DJgNfjZl5cVY"^Kohbo'Kc'Fn?50M+S_kK!,_K&)V:pcds4",ZJB9
%%p=/ZWJ4=d,5qDe8MH`^Q*gYS0_%Effdqq9O6!?f3ZlIKSq,IGRSk"D5VaqSTHr?[Us6Up*(K6ljdtN;Yfn4QGRpgGM'(="FO7Ac
%>qCI>iR:ijYdIA*<WA(u2EGc&8e/2>@2k]R8?O$-_skef>J)r:E8aI!C8\E69c`Ft'BTu6\@\1W<deqB!932)Sd7F_!T>/)JS=H#
%%uEoe/G'Z'KR(I6[)VLD#7pYdc\+oM3eOLp*m(4SBQ?'%&F@^e-_DG=4ip*uMsAEdW==R(f@K6\]cn9Aa3jKp36V,8)eV(-h:o?Y
%q-!+m;tAdtlW;piZanB&[;I/2Ug(\3@6:5g@nZRGF):MV]eh:hQcs!mZDs6Xkk+_%XK]S^m(?^-(h:^'/2]80VA27O$Jd,JDI'^,
%,CI"NMPrTaJc:;7n.mi)1g<UhKrpX#UZA:j9*!F`%11B^W<r"X,+3iP\Z:N:+5SS328e&/rq0+<T/48%WinhGLMZXq;TDWWIV`l8
%fTPr7DVU(sg9n-+,I8u!`gd`G-SCP2D!#Fe5H%N+<oY>o:lQW&1s7VKD+LK#&@dLg,4QEfRrX'p^sKaWDK+`$2<NT0fL_WU$*fBb
%%'>'K2VX(Ygp/6KbIs+G;S:LU[sB7^?%I+sJ;M=,4Oc@p9_X!t((=lam<VP:kqDA69rauTG-i='?t%JgPJeZL$siJk;L(qu5HW`D
%p_A#J/c+Pq]<H$WqS3;.X(ss/22+5mOsk/()5E<'Z/>:$`OB,t\q0sII!s_kNV[_M<SlgNHK$APG_V#c#Am8iQRM]uLPXkgcbU<%
%.l9GofB5<Uh1NoDGcG3-8&_Nu@,u\k>DZVGrCPM.[DPKp>%:4VDu`6GbhdM*Fe@O/#ipSZ!F*7,RfpHg?XM&(T0;MLnM61W>$"b6
%il>AtQ\7I'.mUt0b$#6"6XA@oYNDhu<Y`EP?F1CF9rU8AmuUnYkNGk>C:2OT0:`;*=56\$S]%<X.cuA7O_5VN-?XgJCX:CP\YQBT
%qH>M,N/dF-M"S2#anY8Njs9"WqMBZ'B'7RSJ!edPC/[;HmUX>Km-%6Z)QC?&c71nF@`uDo_+]`&,UXo\%i_(a%IEiC2`C,8ajUIO
%Ea#<uc%0tX(d!X]*K1;\^%YsGmieKU])YT]hhK!;HR^?J'Y_S2;98aY"?lrS;,8HO0DTdu)m?0Y6%Ec-o#]pPQZFflbZJ!_6,&%H
%Uq**Q-OCFE%E`"s/@O'WnhqH/KG#ZkSS2du/@T'BonKT!g-lAiNl[9XZZoW$fhU>eSb4_#WisuC*b'\ugPB"WCa.7r7A_.qOfo8t
%n,]VCe<$Wqmn*F&.8alC6p;fq(F5T"NgJ)HkbP3.Yi.b9,\)tW8hq0b>TBm6Z)NPj?&MDE'%qXA?fb3iE];hm!XJ(tB-eP/egk1*
%ANc5Tk(I:YS8XV\$Y1\j>ng?Ys,G=0HWWLLq"Nmf,P3p5G<<9^DXh*l'5];jT7`*8Y(s4'q<lVjqpKIC*kWm)_P+<fg/-i?J*!Ml
%A2@h9h=UC6/]-II7'm!oE.eB6p$JdYo[4tn/dt\>.+=.t4gj&7X[4eJlW[Z,"Gsd>M`*?fid7@Z?NG@O]-@@+%dO:n-`fTBQf!gi
%o+pD>9XumRMQ-=0bMcXQI1itN:Rua`["8tP<Wt]kn_rWW9eoa5i!4#HbAT(DOKj1+6a,S9c)\["@]^P5ggAMRmSG35\Lh.D[JTR`
%,e^2*2("t,BJ",]qX,"D&mbM[8*k.-nXEjW,$I([&1ej97P\eELMZm](>dkcH%qTi(EL>ide44qRJ,4&[!sMM,%BKk*)-W!@2[LO
%JGPMkne7SD8i#3r'ZDCM*=2KgctajMk>%5VLYHX`N0M"SQ3$9C.+@>J6;YX#6Do8RHu"2e]o^Bs8AEE=BaW4jgG9jHkBo)&E!OL+
%&?Q`q;7s<TGke61f'Bt[@\>)GBf`m9f?*_r0BDWk*T%kJ&I@1=A$dkD=%T8tDhq#q1Eg[[d<&WH!p*^gO6^beiq1=47-jNsb?1?#
%,\]WK]T=Nq],SZX]fi2[+%5C_NdDZch!AGn(M:5lho`TsH3%!IgBW)DhiMF#'?(^N&MbB9PtWSB8)k3&gX/HYUshEe`qh`,pTN!f
%7%+Z%S:^]7":;tcR2LRqc?7!rg$f(QT)u@qm@StoSuffWal&tk@@@,[fAYP3dPi/=O3a,]Y(3IoDm?X%qEc0\J%pE0%LaYP:;gnn
%Hg\Mb%-DB\n:YuP=LZm4q-;gC^gKe-Y^BA@7$PT4#<1'58agZW.`PdQg,jUo]`D5BpkG-lIqt/8P$$q#U-<<Q]+LmdWXO.Y@Xddk
%[3GqY9kL<YeZEgYCi78%LIUq1R#0m3Q/dj(EtF;nP0%YHKK[r3Qfa426o&7=$-X#W6&)O&#Z>hA,Isp1n><ME**J$;BVO-bH&a;(
%i!P3rd[6,IIqn7GTiNX7=-ntLML5ssMH0+</!tpjKQkc<VteBUmRhudH$gIKBh</)&`.fGKSWSkpG:UU>7lhn>n,S.\J;ZRMq91#
%=h>!LI5`\HP@GZ0h\0j$ZECl.!80Fos4hI#fe2HEmDUTM['I<oI5%Jq\'5&O8XjY?h.4nKb.b"CS#N!)Z>Ee"c8i2rrk5PK&grGH
%!0YBiS1C#>(ok&GT)sY&BW+l[k!PZIR>oc"D#Wqdm\U<'ksPdL5MG5cWR+AR4EdcMJn'EY:P%Y/?6IH/AiN.a*i9o+D[3Frqj6/1
%ZVYB1mG,dI:L&Ns`M%>l,P,5->l3"S)W%WJM*(/9T%]?N*Q_[2q#U<@>50raa>^7lb+)#eQYZ(n/Z'OsG0a>ZKiCCBkf.L(^1hC"
%GIMHcU(LreL%DDcL^hbcI[i6SqE5&9TjIk1XCs>O3B=s)f?,[CJfB:*Hj+nOI_VX`S$/4=DC8cBOpTYq&l1I:9<^R1gBmgcUs%!\
%X)2\$abQjZ-[hO+1JsBa@eA151ZW05geSRVnM9eu_ucjY%?Tl*]0tRXWC2GU4tn5``m[s7P)m(2V7.-*?k5#+04\G%m-''"=Z6"N
%D[N2l?Mr3\oaH[]Ij1'TK+D]jRtEqd<PtXu4B7GJO+dTCGQ-MlH;C7Bng8^mAIai1Uk15lD1mI#WgG3q'B6f$N\#U6_8K3-<4[Fq
%PWP.p?UuNg1SrLq9IQUJ]P^0,#OZF!`V[`M;EVmYh.:0u?uPW!Vk$fLkX#X4>S[;Y4__rs+E4dF3+fB[N:EMN<d5Iao1L7Qj$KZ0
%7.o6*3;'>FIJthFV0k@%gcpCi0%X=.l=Jt(<NTM9-4R1"@8/u]'ZjF7*JF"`mJk]u@*EYoA$b+9[.%I0gD))Se!%+\Z7HM]^lEOV
%3j3F.4HkaPm?>E'=0l;_I_Lq#`hQH@SL8#rkF'e&]@/k/Q\p:bM#4hpL:mo&#H.:)MiD-5d&,KqlBZ@7f5e22Cj-9SnWT*QI9Mn*
%/QfC(f"=0M4G,hm;pd&u4%=X;g_k%AYg7-GpES;W#-5(BCUL5d3CpgHCu5H[<[Z:r@?uYnUq`P#eILSAdAGc<O.TAm?dH)/rRE72
%r_G%X[bAFFprS'(HL7_5dOi-qMt67Cd;4!I$dEe%adq^l7u8U7Y`0HGbbBC=)CEoIGRELOlarAV_nE.7"`T[Wo4Rb!oa?eo+#QoK
%9D)0E9bb9aZ.PQqkd49h?MqMCIqQkMiGY\WEuGbMOgj@_:eGL]qsRe^%GBBcUZ[oUpSW>ZkVe/jb<PhMY5i(qO;N<%am63ar+##%
%1ctQl\@;2fQj^L.on"]+C)sNZ&)Q)a-Mu_BIH.3?6-PWt2J,Q(+\0)t/C(#>d@;eaFV`;cCGQE,44r%5)P/1_HRT"8<0`<_3mLGs
%'nb;KT#32jHK0>)BEEkphd(40f!;1"#7&O_'QtqQ.spF$hCo?OZ%kLf)ELSJbU1-\Ts#R1hDgpZ3*M](B%>UI\K%Cu'e\@XA%m<U
%CU+&ZcINOO(79HYqaAn/V9XNeTKUI<PFd(6?OQ,/6<9U#U_R[^Rk4/-X6\lXcIs2Jl"`3Kn?j)'f#tiX%pfM\lYF09GEO8&Nc"Yf
%OMC<SO?VDGb3K=Jh6me:&UBSB]f>UQ#r7QhSbZ\&H$?6\=gQaCOSb`<H):aIV0^<7RtLHIVUudm2rDXlPPoo^d.aI!AjkORq=^C4
%\'3.a(l+J?e,K<q^:e$R)EabqJaJ8b9sJ\k!Q=9IE<I*rOS=Zf4iWFPTmt,Hb`6SVZ^8MS<DDf"i$Hd-h8kX*N6m&`2q'N)^=VL]
%39^d'YA:8n+YU'urt\Xd>dh*AJ[BU:kVTYLEfYWAHJ>AT7pldHi`*_q2hS<)NHpZ>\:'hqY'i#BdV*a4b%)aDmliAWZhb0]J!03a
%PH80Lj"]:bZsZ@u=e6@Ai/EosPAL3YBh,kW$jStjJ!8)l]2S0P"0GU<_2a>$5A-Lf:tQd8`0e/#nQ(itS`upXoqgA,J9U(sdtr(>
%=i^:#J?igoUSFNq\CgR?nnKq*4!!eXN:a]n7UO$(q(CS"qiKhk+Qf+rCV11d?!"jaSXSF9V.U'&WtXAR>qkM%R^IIR!uAQ(O2611
%V4'7X?D]]@dK6U*^0:XdbJoal^%_;#om2sX)5`*@o)fa_X[QU]2[1q0h@FaMI>!lLYf-qXJo]Pq$/b:uAVD#++6&c]OHAP(h+"*;
%)>0[oA,7<@q]6\9h%QPdRU[Og,P.5K3/'obH8meOk,Ua4QY,Kb:/uMkMWY%H7N/^@Iol<?X0&'t\?r+@l/s;OH;m:nkL/)ZE)<e(
%^%WLg!E!fFpq'8@ND09+m(-A^._<j$9;cSN@*hIqRaH3p9fgQW`4@N:/DQkj#uQDWA)]mFh.:\9LeDg>2*1.e^3-Qc>'6T2?eK>W
%c-ZN1WYm0jAhY*.fj52f#Vi!q/.V_9g9,>"L:7<kVoVP-'O^'tA[Edj$8A;@i3&%Gg[$ZeSc>)1//`M<l^e+'HPo(/(D,`A"Z4\@
%g$&gIB2,&ipB;](#r#J`fs"9n#N(i9mG$d<h*)4#>XrRq^j%I3Mu@+4Id#41faA(=7Wp79bE%[&l!d1PB7U`6r#e&A%qZE%r%7]3
%BPQq[[9g?uoY22s3BA/W9WJ""F!'ISjM$o4Z>O"crI'])*O_)M:fD\Bkcfo6kt+ENJ/0n)\;?!3R"=tNjLPN!PY&ro/l2QaP'gZi
%:W(a>h*!Z;i]J"X:.W]jgg`(<qoi7lAcW#C=WAK7o6Z#MLf8bGO_*%@%ANJ`N$_kpe*LUZJT&7rc+i4HE`lr\cemOr1:bQT)guHZ
%c!o3Y)u>LBI\ObAB$&skh-M#6LLq=<1F1CE!^L/,s#."5`Ol9(e<*+7j1%\Fm1]o)0Rnrob^M-CQq;e'i/GJcMqC76*QK_W63*(/
%8k+0_62hk+7]bpW-#Kn^22`#!rJX[H,\TR=B`[=_E?trB:=8(?Y16Z#"c*jEZ_2Hhg3;AA=gOSij+5>JWR*.q!c)80NII`cgDl/u
%Vk6<+(8lWRDr8ggdt3:@4#qSRZL>9tj\g.?^uTY$\acZ?c;K3B<dmFMAfI7;*ka?IONg*FC,]Z$4E3Kc-4Vqrc+,%^=sKf=mGVBA
%/!<4S'@2g\nLUI08`=3nIei`CD1APl[j)?jqT1#C4d]sAj@<t-6\s\AC(p+58A,!R;j_H<S_9tQWJTRE.r!8N/F/5mg,5X*!&IoM
%duTe@@I:<$b&do84Vr[D2uB,NS>E!5cqX(P;3OU<a(>?.TIGSf1!(8tTQbu'6Rs1`Xn9T2PodZrY%\BKfts8j3;C2DEKf7K)UtX;
%<FuL`9=A+J[hGNL?XO;M/)+.T[73Ykl['Ua!'b#2H?6!H*+7P.4QNB[8JegpWl?T7A8Z&ag3nMujof<[?t\:(3+:bLBK^MP+c`#!
%aNR;lghq>1X(IEfcgKQdI6PB93Dt'ag7#Dcc';'fBn#6hmC'/8pUY<c&IrBh*S!]P55\54\(te>r@m((n`,DZm<a]%h4#?6DR]@b
%"f>;<F<^<dn3:$pc%W:k'FQ!`/c;&uaH)TIHrrIc^K-T:BNRKp&?T$=K,D=KI.P10N=GG9nPW%$j4>=B29IF2#P^/D46Q'i+oGLh
%?R*]RhguBq'qBY1U1@WSnB&.p?h:MGiC5N,"^a0mf?2(k>4%9(:KqHk4:sC'q/-%%5S`=qMa/4F"Bb4O):P]Hr-F3,",WBC2_TX,
%i%J)hEn,b1^/AcHJ5$XqK+?"*q/PkYF=4JrM*de:8aaU1OW^8[f]8g^JSZV3em:urU73.Lg\[?dXG605R[ge\8XFoN<$V%R_pO,>
%reSU#jl.`gP`)a%LR=DYp>X,Rp"$,XQDA#c,38p9G?i!*Li-95qu.X4?o\-Q(l^)Z/DD`2XPM:DTr4q,:rfno[.Z_J7N;p*a+3Hp
%aV2&5N*b\4&@*_U$r9b;"+Xr,1stpMJ\jXA"kgfWmG14lU3*U\9l,.Z!g,EDH$f,&pM5,4Fn95:0_up*6u/LE<qu(5L^m#+@+l%3
%)pUQ6K$nu4/^c='h;iH/Q'%l+,$snb'_3VHdjuR5QMlY^nkA%E]>YjV[VNo2DZ>1+P&2[+O$gU5eKoTW>])[j#P%_cS@C'sUZAhQ
%m?=h_O;mr\jVU+X4/qpN-;e0Z\ri1\:Drs'lAl/!o6YLApb-[B6(O(f`O3S(0h(aI'kQM)(tMHOO^-LDog][#q(TZh!PIWu?lpC!
%4Rhn)l081,@r78*+N"&omI@F^[qE>*E3GLd?JY&E[/e'Z`SBm6isnDe@Pc6;q7,GXS_^rh2acjW&U)<&k[J>2pCY/cP$V'qIRr(A
%\j,!D<>9fp5Tt?T]3!Q*6Z14Nr62jsq$ZUJ)74X:0-d2,CkS0C\+cPEn+J&JVL.oF-g:8rY=.2N=&2oc^dI,3*@q>@md5n:k@PXc
%F#Vj>FZ8dRXLe5qV;rEDGE:S.QKQ@AZd4qA$(pd+2(9NU6^R3gpJ-kK,+a."rE=C5miQ2t#?Q6eGIYckh9jS]g`=$$4M)9meuCg"
%I1*ZJeliUP<2SbsT*2_;G?S3tG+TfMII?I5P]EB4,)/1G3YgG:bg!!]Wr'Be^+m)0m^qXFHs=PfE-!J?T?ca5m[(SrjXseDjP6T$
%euH>eg/#>]VUfb=esRb,,BWhF2D`0:pKR1ac/%(4N`OpaXh3S,78I"9URq,nDtW75`?.0L<W_ZrQPJX^gKELgdfqA0,//el=-U$#
%n&eD(q670>U$]"9XkU=M=S3lIP'f;&<`5!XqF^VC.'o'cSI-k`p%.=gA`kPXEm)6d&!?_2b&bl,]M`FYdcI#6[piUZ":\/mEM\q#
%;RfD5j&5HLjK)A-\o:L=pl*(t-]jOP4=ku_Gf4a]mnk!,gU$d_;tbkt?LL#HZf@#-.*!Srl0I&p-i7j8Gk/%b!RImg\)DU3>:UaH
%X'$LWP&#;K\J%*@m:fnFWh/p1Up@Rp3@M(KCrIm)rhm[!.^O3e\gk9E)lr8Ao@rR08^"dcMmFA'7slSdHKr6\="h#9H`Pc7d,F9-
%p/Q99$[M/AbGQ`<e_3[.]@uNi#1qWl>s)9'[XN:`?LrC2I[)^k\L)GCrjCRgp&29H;pMKc<mRg^V^Hi*[@A3FYMH@'DUtEE[C<Ql
%X!+UY5/1X[>304'h-JH^oo3/>Hp,!rBWV[5b0G;]bMKFXNJJC:=[/.R:=`3ZC<cGLqUXO"h>(Jf?"4:O]qUGZlco3IE4m4[?#QgR
%Y6,^EIJ[VD\9\R$m%!N,Cd_&m@3_&ZPr>oYqZe(lL:=S\e?,<[PbhUa7O+IMhWWJ+#A=Q*p@mA!?s1258u`Trm_((jD^)`5j#mPb
%l-2/.le[C%Xlq>W\'j,ZP``VLkfJ^#,H;Q.gG+3/-`>Gj^4W>,d!,7#Du6iV>01u0*4tpXR-kW[Z(K'JHuF-rgg#cPq)<rlpRY+D
%1&eV,E$WpkO8)_'o6fBD2K)=gBbM]ZLWu:XGe_odTC;_B?ff\].H[sdk@g^MO2!A[s4LGcm_:s!Z2E<JHd2S:WW`9kPm\Iqg%%=R
%U0CkXFge[s0^lI`mA."P.CMBD[uX[@X8'OZ[MjkRF^V&6Y6=uCqu2*c$:FrXZa]898\JpEY/CQ/nFCOH)Q3fmWe#'LNX>QWpSU;k
%]hf5oX"@R'G]MoZ%UPuU=+f5Kj\`72goPFt*:pesJW#H'[Sl[PgTg1odrm(fiOA8.O.WjH*6%<Slr/K*H6^$1J*Epe#GRMpN]UAS
%F&e'(1PKmVA=B_V]9`#b@2Y@oo51g\3FA%GC!8#QC!%E"?t1P<4N^uMCMu[qj7YD/gqK2TF!n5j>OH)ZGfZ0BSBS[C4WD$eSnmn[
%i-XEmil`X?Q(uCtUUhB+?df`Y=Ll^2Y`,gBM>;k=?$T^8^@eZ82k-ig6,-]B$Z1@#/c'7P*DsM9=2`!YCe_RtcM5=eTYcM'>FVq*
%\J[Pl'_^WZ8k-:2;Z7m7//@I,](DlVY03:FJg@D2'#(4q+$Q7NaB/7D9eKT2VVEetZT698/%\;A/`e5n'pQ?/SMS5E$,<L39UJa=
%r?SF5f<8BCH(qmN^?DVjq9&,+B[aIS%u$/sDD5E&LS7qcg'S_n4hU&oBD&'<mKg)8jA%hOdGE!c+4E<Jlf3tqNlG>m11$$O)ihTM
%]@gpR[At_e^>69hh90-_i&8$Q^KL-pSS?X6hXf:_a^4:8jS-+n:TXN.Gi<ZBlsqo[s*T$J,-]r[>3cEE5cf.5IqChbA6S6aJX5)K
%+':*h%<#kh\&/fGh[&DXC[Q/@;/8VU:QMmhYMC.[7-V,m\ZT2(,Hi%i27g%sH]>&gh+%%4`E:Nckb0BXZASFc81]"oai>T1H9[_]
%FH0km_VnLBoqkrNbF,\[r&>>u`ZMCbOa-3R1mcj$h_u0FA^d!UHuMRg`b+6h\T.T%:@;q"e`<-)]1`tqSbAa=jP)a1"3T)$b'/T`
%*'UM?:Cl@\53n#%:LZiaXAq?nW@%>")OpClC+Fe>T8NDkYGo_B@P%2P*a6Uu/pDKOYC$2f\U=)?\9b"?T6N0dm?>5qVlLJ%3E.](
%7ORS'XP<C(1P_<SV/mT<c#iXDrq4d]]!"m'NG.Z8Iq`l"YL+BbR:!*rcQZ9Hrp3h\S=MN\+6&^HBlYR7Iq#q3rCV8ao9Q=lA@\`&
%aefOh]%Q8l;s2s7=RMb28TWuUUO(O"RId^knm-LLZcpAhs!hA\.GG(DNO-gggpXqGR603<.--sT^/j+(o&.hEq1ILN2WW-D/"L_>
%EjL#P\W#C;KJ)_6iU]\m^Jh`WTD$p<e*?qs<I$atHL6XQnCF?"8>U]ZIAa0K>[-=g`/Sm2pj/.oHZs?W[F=-;s(,3ENB^_bDBJ=-
%jj'tGjh">HI;kP1$CQ*tKJ.c"QJ7o'-[b%?^@YCWJ+2h?h%-bJj6km"d+Wtk56gZ6QcGZ':uUs84I:LRo6'k#cm6q9`dLp;1??^'
%kMYH5i]6+3jlbVtec4VB;Vd[APHDM\h04b1C9$cr*JCW![C^B9Vfbqko>8dA2I![@?"FDpB&TJ_S9:uBR:<>DhA=G#PZEsU.^,]?
%,%HlV=8+ma3+bQA]6>(Al`m"=14Sps/8),(]&d*UbZB%L:K90\p#erLD7ZeGH#omPh/6ItlSZj@KEpCpEIJe:2k"An$qt$)CbbUO
%Hgit#>F!]E9jOrhC00q]>\h*_[/+\">cHV(=hV(\e(ASlGB8b`':1h!DKs]kAn$C@BGS(F4`a7+G0Jtkrn=Fhp30^\POZ#c\`]<F
%l$"5e12k=Y^A)lBdT.nX+4RE3nF=YIhNSQ*^9t7-qR0,u%2QS82uLf-cO.O.g#65od@I7Cc%0AZH5chIorN%ronaD#EG!Or-Z.R`
%"in9Ze#DAGjKu:+s.'HL4&S80GRiqHW&h=BTaj$RHba.+=h9@&HAZM;2>#(kUoI1>?'r$LN0n_k=I1SN=AEmVU&Zbh2Q$rXS(Qd,
%aiSI[9CN1@pg!&1.5CmVPC@H31)5"e>jhk\_a)@Qjr$Wpp>91Cpn.']DTU3Lhu&J<79VKrFF!C`;""A'&,CdR#'MAddWFL@E0mi5
%]mf(BW6T7)pCfo_&IJR-3l'+R*XZ0`ST7[H<gqGgVW2RfD6K_O$:.*kVbKd1hi)K`NqJ:f5Jp]C'71aZS1dJl^M.h#pkKF$\mOCk
%7X0HQm\(2un@4j"20Fh;i]ajj5H^X=CZ#^Grb]%"m93;=j[(I8h=f/[1Q95l0^iGs4)Zk)2:XPQ;#PZ@_fGF^Zfs9n?p=c*qbq8a
%5Ll8'+Ia1fA98gC\"BI'gA%Q.WZ"'PUfD4&Ntm[K1,esTTHgRAWpA7"Y=suK)7==N?"2\pB\MH1qZH%;cNdTE'u<GIC/C1?!A0_`
%Ma9go<+ojmTYd^l9,<qg^aQ@9/AhIBF5>9\$kKcmTQ3>d<CE1t83pBVE?M/G5=Hms3%67p]RnVKF&l7F1+*2n<Q-:#IfNd8?/Mk2
%bTi%APn*pMMG$iU?%GKG75644&keYn3mts_/;i@8rq1cF<_sD7-A!-M3Ik+ATVDjC-c#:fOQ/_1%1X1cRE(>.:uQ!2,q44<k%%^u
%P[T@r]-LO1B;tr+OpDUIXr%S4<EPYTQR6]<PsP2<M&-H;!$;aI(Gpt7Kh`s==o(L4i5ks?@O;-8]Kg0WaTCY:ZMTIm3XPXS\:bE(
%(]d\QV'("EM0)\s!f=>e)\e)[E+,/5E"/3EZI"4%,Se+]Yod?[/-H#H15H'I!lb8ODs;A,,iQ<Ark?%<&c_r&6qufr4KBYpQ(Yo+
%QmDo<"geBeYZ9g&eSZ*f_IO_?-AdCREf`eROEh=($)N?@nMfP1O<VgYGT78=Cuo&BE+h!;idsfOCetjKPr&I`LmJ1VV;=aV<@")1
%!Qp&LJr[W0*i0R?,XiL9-3B!TglM[@0oVAd"BZC(?kjXg"&oj(!65)0&fE/%,u0Q,$2>#.TL674_Z@(F*6SNE"%S#Ij]1ZgZ-X)W
%*,OVrbG7]B@4`IW*<hIF'SE-QTH\oXJi$o"%.'*&WX(#J#W6=])4>R\308:2,k<-LRKb@D9$)[ES8:tLEP+p?Z*GY09`i\#1i\+X
%2bCeh*6Y(F-j492aFK/!p]`_neIPje<+qq5&B%JD9o@*?TqL'OW_%^CX2'8l;e&)Oj+3E"XH4c_-kJ:..SiVCXTFQ8`W:'J%ZCDg
%"Rr)tEM1PhK@6m-5].Pk+fba;W"h3G-nUr7!.:RY.hQ#41aWQH;$fN62Q4E=`*ADW<$#7p'Ike-AjAR_Q%/njO][1'$Q'?h#[0Y^
%QNO:U[Z(Pc>#E"6?p5JOO_4qJC/@AX?W"-TW$q>kWpg?9Y/"!F)%N)BcTs"RM%plo#hfK/!es)D[^)]mJ/Ar2P<_9B&6W\c&O:3[
%B.h9K\2),hR")o*1eFY*Zq2QsQ:(bu!mJ`l@+9^%/dY4M$=\cb*/_?rO9VEe,'!h9*lK)_$"=R4<=p&+^fiLPLk5sb&$iu>BN+s9
%@"\ZA"WN,1^so[.;kkkKa:)=.6U$&E9[dPe2"s*LIP=Y"%?IjRZ8*=2Z31.Z&NpA#",7@D;Z]^uBI]Y]KM@R@@1Y.7D$1@Z7?f'4
%FX:!%)-]rT)%J]Z<KV8V"q1U$(s6@X7RXU_oJ*"BKZ1`/Obb-o.#''*9tO$9S<?nl%ql(g866j+'c9KW0IRP;#"_[B^,R-8@$E8t
%7'$G7M>REW^^P%EJt+Bd"9U=tM\:u@'X3QbNmP3JN\Fp="ePsY=Q4%IK[s9Q_u_(qd:<i:_7BYU5_EK*g&s4Q]dBo>6pUkNbDRd4
%4=Gf;3<O7LN's+"9MtM%D(isC<C^LH,'BOe7t_\3;?E=`J-#HLfg1StmfMV]9GRmOcP$[7&j%D&!.dGi&=\Oi_$D#84<R)2!.[f*
%M+*[4&c;(]KfNmkd*M20*#olC&a0Ig#Q,sRTE/])!6RFJ-h4-/*(i&TBE8*pG[b/+1(ku\0EgGP\V*EYM2rl]oEX;?M#.A!-@jUN
%e7jIjK>f%=J7BDBq2sl+`/%%jV,=2cJPQn,4'b7n.#C=tTKX?o'&$i7NWP2*A-fe<8"c/7!uS7f]S^TW5pO>;e?OTC&r=:&!WjT_
%^W_=25Y$46&\/&7*Is-8RmA>G0aN#3Om..0CusbbX$S?T#L8n:A6&k;+tIqJ-8;fg0`!7sTbLV3(N9?qfM<)nfEC.@G\,U)E%5];
%<9cq!N')>A'4@sC,?5p+!k)C.&IjU";,%YI0.r1b_kXh4Bb=L<ON2gC\0rpc#Qo,ODO`b5dR_4pBEdM\8.;55U^:V&"3ZCY+3ZWu
%9sFVYQNnmqb9CR9Q,k'B$Nuh5#93e\-ce.&jjDfP,iW3gWFI+>"oHO<jH!A5*"/pAJWPou+G<$+!5r!"Q\k&a1(!6mh5f%AdoKeO
%XWj3?=\peW,8d1="cFV#m8R&:/k1!!/0'RFPm%(4JG)FjL_0^s#9][P_6+D<N#7F*J3t6+FV&!!.KHJ>VuTQ1k?d+\(82Hl`FKI4
%9u;u30EH5!JWNPZ7e=r9Lqth`80N:=;BRea?]/In7d"8M_>lD&(lZQRO!>N-+pF+*f`nr)?6W>K*<:-i.)4)7DFmi^_+Y,W=_.nP
%@2]?[hOk:0n62WVU@KST!sK6\M5lelpl_EV36THf7gUt$Lspt6:.<l6O>r2["AEl).brs)WCfHM"gV]D!Z%&Z`0W#`(jIMBa556(
%<$L,672RkX,[aW.c@]sG+\&1=`=PY9o*6;0+t=_;M%KeHjB_6EV8TTn/,!r+lPaps9+6Z/i<+qCEG8:GWIcU0$:VgEQ)ETILl*%=
%3+LZKMV'_lpafS`Ya#YZ:ZN?*1'??G=:PtbbI6fW*9ib-F-]o_%MV7GH">8OKfWX=)\r;l8g(RB*(sM`Xam8t,Xp^C7pq`bf*"oZ
%"@dKqZ:'*dk_T_<BV8:VfMKAJJ5]=V0]KpUJg@ZBGW[+(8t#mSJ-/LQg.4:Niu"(AHOc#<3)5;7XjBD?3,k#KQaPcQ`KWbW*>es$
%')#]`-d]hD7$]3YK5DnTd@$\\7X/HtVsqd#3jFMTVY_n6*3m%0@6%+a_J;AlB1*sSg+3e.XK"Z7OXr'6H]35Q.`1EB0Th#jM@iG.
%.&61lUg>OmWN+bb</`3p!T`LR7fg7^!kPJU.eQT1c?p.G%*E7D.#R5I!!eO/"UpYV<cq-P,A)iUeiH@mN"/]],U.[[,@FG=C@).d
%Vs0Tl&q>`=$,jkPXM>D:ZmYt;$&l&Q;bnGtS;QFZ^="Jd8RtDD!E1![/Z*"30HcuY'OE(G.l_!E<r4oc0nhkC+UlpCA<QL;P3m`u
%Pih^R;#E4)Bt9!5HGE@/2+%6H8ht(P)VE-`SAXD*UL<H.Jb0*'$'.[M2`anLd@5b28HM$9'hkJZ0`rVP_'QOBQ\jH2kZ@sL9uj7F
%Hp]->AI0/*.8VEPi#%k(#(e4fM:5>Lr:+Hp(mH&f&=-D%"a(Yl-jV"?Z6DDafH8QXQs<)G$PiqN<:Gr&Q%D;c8>["'#kS0d$rdjr
%J50Qb#3M6uRcX,HSqn3qbGlbH+OqG9\.\A#Q?7ZO=JLFu,-VV7+s-BKH<Vp[+WU\nZV"1u`5iT?N@hFCidat,3;F<V-BT]W!k6)J
%0\@RYC5FO8SK+10Sr1U.'QM4(TGsbq8/i.XQV>CRW^Ht%1^s7(N[gD9Ks?>j"0KTZ;-(6!^qqI8iddLtmSp:]&M,Zo,S_5>]NCQ;
%-<W__!m+JRNeB3!1l<"02J<E\$:l4o#oQQ%dNV=$I:5,BSU$0SK4#)f"rj7f_5:2m;(h>?97o7k#%j!q+T[3q$IV^YHVo\N#dbgg
%%]!RTU@SOE_1NnbYR/?Zm1==6?:T^iHk&6\kl%^lZ=.PN(Cp"'EY4lWZY6a@5aR3>&5h=!)UU9A/%DDr-&F$&:D+knKcCbO@Nek_
%9P@`^YZMK+aWu]cE"*1"$BE'C*5adQ;&QG:!NdKTkE1`*!%O`3!g+ek<5>4?L(H-&]F5s65Z/5L2M+5;#p]pZBE;-8q'7O)@?$4;
%0(j,aM_]n,+X=^/iG`tgJAJ^FWrXt"(:o;qMBl.:O<uL_H76AW>p'mqK-CWF!^I]@JRk;r/M%+cL^^0Z/6[$*]bKs?^r!:,Yn&5s
%GRg.9K/#)5$CSLUTZhJE'k"Bu@SI7>V>sX-ec?8;,\/2V0CW)0`)K,i(QA,s!6:2#YkkF6P:Vg\*E#Bmb6,0j((QM;$rSqhb9`r#
%"qt+:_c-\H0Gf<OVN[cjU;a^?3(_28`.3W%NhA#"G+lKgBT9b!=G2e^:mM,S!kVliM&9)`G:=cANC3i8(aD=DDEtu?+u_VFG+=N-
%U+eJ#86o[e3#ZtgGS_P.C-;P_P*2$G3#D[4+a-gO.:jp)%%9P?10MOF0c479(Ej+m=t/gU.@?Z9`ed.?U+Oln[6S!T[7HrZ;i,UL
%Lf^FZULK=59X&uacs[d8E$PoZ8'gjYJ8?+H$ttMqdSZ,P["gaj\["cN-KGI?=tE4,+M\[>k*Rf02asI:i)rs5JG9^9;l%<e7H96(
%J3F$8;C&OdBT_(KAkkV]'JNGcCR<&'OMNE*4ZsPndaT`[,%)YC&+%<BU_j7r,q&muZs\K9dCFdA0IS?W5fe$u$?.3PU8A-)B#n(6
%/0GVdNKl*F*m!+R@N]sg(-%LK>rKR#OR`XA@f^G2JlN)`R(0aNgI;]hMHEgXAHMHV'48eB*#?^#15B`\P8e>#dCUkjFcqiAn[@H^
%#7"9B!b:lk.],#/]#/%#cQI@$eI1.YBb;(pas""LaZu+;20s3s,,dSk?G^Ofiac.br;[1`m-G9S5uWF-6gCJi,\$nL_<MT?YVaDY
%Yl5'^S<pJ4LaEtf%pI-qCP,A)[fS#F@\O<,"IhsWW:j,(M0_D6hB*j]!Gi"6%TZ*,.g%=P%1`NdWFuSleO?2V7[Rc9llPdt`P@-C
%0UG5GN%U0dW@h!35nZ]dRY!tUm)KafNuM>3VC?L>a/42Z/=+&d/s%D2j,i>.lFAEYjf#cmHO&jZaLI?T$+(<HG(mLX6,M>$fiQ$b
%)A$nA7Zr"c/s'Jo0S28WUtPeU!h'NR$<TD<9itoCMB@!EET_VQ3<H<<,W6q7_]:Sn7tC%NFeI`i,B_F:q8+Nm=p.a!,fL[aUa$Ed
%J?EBF'0#%rm_t:qg0]1P/WaA0aH4(mU<srNQUSAM!d.`M_aGF\ih8dR*D'dMOmWB]km0$[U9'0C^sdCk_]Y>enfkY]gsKPIk5cnN
%Uf9_^<AXcm;^<NIV,FlDVLW=<"jC`&h@dhFW^Mt:'%(PZ#o-]Ea]M!;[hi&iQ3H,7(Q1.%Q"MY);j/jXB)s/^,)'Wl-:q05$%)eT
%=U9pOO!I[B&584>lR8kBI_q*hH8C]7U,WI3?kKk7ab8SCALq]f&r7b]o<LL3N2<D&`3D^S"VOiIXd:>jln>*SMc;ZHPTj!_5i!P0
%$HU$kCbN)GR"pX./HJsf(%Wb6\7]@c,\#.mP$RNTR%a'[%9.R6GZI+q)VBj[%84SV"q/Od]5dRq`],.tS-Ct^.STneKs9/-IQ!Wm
%OU2?cEC,K+qQ#FB]a>Ntd+S#$MZ=WIb(YtD`+)\q\\:DL!<YNS<s#NI@k?jK5r^23(cR("^0d!h66$<2$=cILg%h.12GK$h`elp_
%,'QR*)5B-V3[O8<,0$N_8]+L@'*nUj!&5]":Ydc%1Yal)dHpHUnSfJ'4pa0J'q$Bi,`TT5#An9n&mVf45ieHRj60]IOhrUk]YkG?
%)#LTYYqiVe+JMI/(/P2QHS\n=0gUJD!_98;W8%_I`=8^i;(.;J,Uj^5:"g2S%uI5366c+GZ/*A\n8,>VCTsU.MR=[fD%LRkdnE[0
%J.u;)_eR-I0JkomB?C68m3]6u,ki8l7*#E5;T1C*2Mip2:TWBP[bo*gOZ76a#Y4e(7a'ks!//)qVM,Z`S<3\"(h>%*j&7;q7*r_M
%O>4@X"lcDh+N?n"hV3]lao8StV(G]O2kr(e;fMbD,ipe_Amrc*MuE,^L-ip1(s;pl'snC>@Ln1n"@eSSQIPL?g^n#;hPYr1+Tu,E
%"Y6fY4EQ6a'se]i!Y@'\,0PLm0P$(W[ieddKb,!X-i9e!5B,Y<^b'%VMJN>eFA#cQHk_Pffnh$Ph)M0%*.kjWbb1&uB_%"h_jsnl
%V+49[bV/4`/HE^C+@[h%`uoPi&-o)N)--0pZ:G:^>Ol1R<BS[%&FohI319V=Ch6_gL6:hn!mtsb<lHI'6:@npOO7I_H+HeJ5`jDu
%7\SS]+La+!3e@@TUtU[[72XmCNo3kN%,NtFdUVYT4,TQ^YC_q!;J!t,(0Z'=0Lc%/@-sMOBUKUPEKu\&$_#!mEk"7<1FqAn)2Xr#
%!;3",`OZJW6%X&J(e*FLM$aQD)j#ie#b*)c1-re2)\HK^$md9aX`,h1JQW1sJ<4+bRsH>.#DS?f$oUZb`+M&/`HmHU[>$.8`_49f
%'N,.PGXc4XE<W][$m)AQLj7F"mWU'm_B;NpOaT&X7B!KV,dI&L(tnUK,%+;;F"S?Z$%NG35Ap=s[/S.h[X=cX&@Ie.nu)$]DMbr8
%4IH:K*]*m&AU5=",gHl;'N/X7#f3rj&8;aD&UE@gOlCI1(JHI4dj3YGi[0Y:7h$/!"_8BE/,Z?+N830GU`b<FOkkB>Ic0H6/?6+X
%>r6+0,W.VQQ3:7r.4>S;Nmpe0=<!I/T7kLKE!c3-Sl#O#N1tiM-Q?p\/JL%n1(ePuCfchA'*<[KWpG^GL"$\LN)Jo9(_*4="s#t,
%6NeEjN_l#kkcV.c"G2Y6ITR0g-;tW]B-C^^%6NQ5%56Bj8h/d"Sk#OU+gaA>,'_+bL4NH#^`sq7&4MVDs$9Ln*iZ:$Bb=,..0N;,
%*(B712htBSj?3!qjm5o%/:rjUJj>CKi'A8^Tk!&daP1G1o"]kl.p*!!gY<.%#Sh$i!Y;Q\+r6II+uLj/TK*F9qk]Z4WE>E.F_u0m
%Kp<A#"Nctc,\'kX`3C_PA=!;7?Xt9GUK2r.Bp6@(7$PK^JSu9>'+%R]OcBc3mN`si*&X0)p7it$_t46MPeo!17PLsRW%;fsOSp.-
%NmTTnAH]oi;(gn+!DiekLe?J8`gR=2oUM.6SI4d(iasogAB>T'>"9WT$!Uj^r/iG\^grTRTE7Cf02Q"H%ML9V:kb2aYj<db66<Re
%m#/4cZ,%2A+Nokk+C#eQ30FDS'BY')3g+!p=WC=I"]Q3f,]Rqh#=Bm\L[m:oVT2=DRTh7p\\r<aUkVRn;3WBl@773agep"n<$JCl
%B;.dPCJcN_Eln^$21kq4Ju9Zh.E0FjJq1@^<2g6)s0Hk9b'Mgd&q(M.J56b"EJpAK<g@16:A+O?C\<)0Ip'on&ALpP"9rr3m\s"T
%3l#;q/l+SrWjjCFcsbd6F,eXu^Sa[c0&ZsVmQ@,>\NNYXkeA59I64L=G@%dCaM8s9(=OZ\@W0B>4]kCN,`D&ML[^\r3rpTY_E[ES
%:akdYUB8^_jKK:9!![+QB'X?,S.OG=.Z>14Ae@p/IC!]g3h,=R+\V=-oUS%@@&-(NDX*-!#J5<BTeAVW>B,!#]`%R]H,C%5L*2?Z
%:#?LG$fUndaL\0@_*U,6APUTt;ds.7DESQZ%rEYIqORkdMb%)I2Pl.i#NVc_CJR\'qa#+*<73p^JgLlA;Co:#K6?Srq_lj5.4C?V
%S"p+\p`L)<%!']6S=%ndMUh\0^^O:6)nlFe"Ap?\gWptoI%9BUg95q*;=`'.hrI?V#@?*X$b-!D10q(<kBL*#rr,2eCD!DTrQ,$7
%rmXmh^=`WP.S:)I;D2\T&VF%I++sfIeV^`83a&??j:geK&.m_A'n0bKcfJ%DVJ5Qa84=+;n\r[YiY:VY#]CJa0;!FjY/p/[la4^Q
%`3cVS7_-E,Io<fmR^PHK-qX'/O0%r5<T5$G(-8Z$5ge>J.75ZCI:mD&Uks/R6WYC;H+4J>$oV&M^?dpKXTpB?Xu9KU);<d\:N?O7
%`0I)+NBubWcNDg'oD,mF,:G4]!'Qq12NuTAY&W@W+D2\oMh9uMG_t63/fqB5#$f#h!a?_beCNMsb\#d@n$aZ5r0t4YqnG,lG0i=I
%1HY>]iumW4JAtp/^kM7451BjkrH/H#3OKhQR@$k@0+NsY&O=ii%;k^Xh3Y42S4Tg%!.!p`)nk(P@!1=SnM-hP`+36Yp[kfcG&&l$
%f_k1[qsPHDAs#CYc.aNdU+Np"Xd+fJiBQF*l%Ch'alr7bLHu7tBO_Lck7H:7EmU=t$lua"%2Za"o_)j)qQ8S!=)!"K,e*+uNsr,\
%9W]0,b4?=#nntj-q;d)OEiQ42KT?>!aQkP9^V33)><K4A'9\GaH,DLGOB?P\4n/cR/u$iS(+_H9oih@5R@&N7K3**ECr:VU'l3Fl
%kWW&DN5l(M!#Knc.F/?;"LB%k*)r\7$#EE5*Fj'oZ9gjL/bGO1cM,1?\o*SXHYT,NM;QcV>f9@tN$X7L?tuR#qje:1Vm,,Q'B5VX
%ahgJkJ"IP(=^*$3^Bp"gp_PuTB73+`.u',+o*qbhps5M-c%TeZ]Zrl)Jt_plIH#(Vd:)#e%/S@QHS9ap$iKj=J,bt.=JXhD!VRTb
%"n)R&(]strm;WjNi.,>#)]a<mp[tKm/42,\omdFl1d:bKA;`Jd+0OX/>$!Ee)M^oE[?>jTAKd@hhk-G=CE*IVD/r>A)[Y+X7;$lo
%mqe3KHpShr&RFmHY_gJW;4=056NGdlZe:k15gFVA2^$e>Pjj5p]5XsFFS=h*r<>YZ(XZUH:YgT;_f)TR[.u$@#L;bR;0&a"_1e7#
%5rY+gae'Nh#S*I\E,:=K:NBKqkiMb`7'/hL4'7+/2>gjMZb%nGLX..G/V#bm"Ks3Lq261m$Q+t^($!:MJ9NJG(`e]V>u4M,@b*>V
%+HsCI/g>rF)b'HYOr#:Co^M$ZDc;`ni>jB&Cgh07"BkfBd#a8<q]UE$:[FaN:&0rQAYkRtk>?5AH2aT!4d163`Ae!Oc)gEN@jF#h
%a2*f>EP8PCYt?kO"05#:#ai56rC<,ONT\RFK%]D!#U0F&_d"CB(=!t[Ceu^g`LOh/E6Mq<gaJFNY+-I"IY/!PD"]i9DFC!K^HSJ3
%b>EWg12Q`'/.iBk8ZC)6^8K1V*KpF(WPJJi]9n>Ing43ZInmEVeV(gO,P7ceC-cWTJA121+^?t`rLS&;[r,HVmL50.TMU)_"PgbM
%U6-07@FM@QOg2O-%K]:8l\SBq%I>TY6A8q^hF##%pJqjWE<Z$VNdMnkLY0g`]aKanV^M@&.(!D$g(C8A"=e008?b8^>\6DiEAS>R
%(;P`8SpYA:iHfZ5NaJ]<7JW$S4#'%<ppgr\8!)!F@jn@i7gVc*Wr@so6W(Yfa)=RL"ZVlp4j-5.abouO!Z=V0B&Mi-;2ibm?=p8]
%f&PJ]RfVWRPTU.Z>]j>MSBf4S,[$*3R1-)tg`mI#AlcJ0bjEW=?R[K`$N[TdFOs4BbtF[08Te;G&Sb@'.!E(qL3VU`Y>;E"]@i/>
%1KE%>VHK87>hB&VId,8OK!3M/X'j#dntrld"[??AffJKu*F^""6kE5F%aT./#(Hfg96dt:=Ag/@MG]lN*\$"ZJX(9-&9Z]RX?RhX
%R&fZNgg9HW;$m1WO7sQ!k&h&lj?iddUs)(@-:pN59P+?EM=klK83+7LEoC?$&16YC?`>Cah2-$n%pt7SIACHE9kR-I!1tE"oYO*#
%2N?hfe!a`sJ&(cj$bcFd#%)nEl%IUmo&/H+]cY_J8+ZkC+1.e>2COkp@Bnl9((.>"M=87^hI0k[7Mrss;s/-`!B&i:&T`a\1.>>9
%g:NL!OspC-P]pbUh,\^-Yp0`F&1TFKH4`:^ZA%^AE2*Xba87\/;MQm[2ibmq!SfG[LiMl*4$a7e(28A(Is0g(^\B;De+fq1]bB0L
%)A>Mn_su$BGY".O?F;BiMuHM%\;oc8H!0V4-..4D97^BE8k^;lK\Lb@5]d$5YH3S]C1i<mpW.G1B+OKP;cN`UCpF<*4$6K$F=?\$
%3,BZd+>#*Vn%a+OAm&X%=?*?0H&P`Hefm;R-:a1A^+B!],l<K5pHOcW<OtF7J\H.O]cJ4qTp+@8K6%%Y6$kWGF\_Q&:h<9qW2X]7
%!6i$5qGkK^9HUZ>QJEjAq=PZ-T5qdX'!3JfLk!0J>ipa.\OE41E^B>C%-a^FGE.=U5&/pVF'omi+QfD3^ajr\V\BJS["GEBT>Dbe
%\_]Wro-bbk!6;\t8obQYX*]((m`I*?1gYbgVpXV$'=9AM2b4[n8^?"V6+FVk@_='BJg.9#Vs]Pfc7(mYK;DQ@4go`*FN+VBS\h(L
%l^YRTkD;^R9_Z>(6/h`A:9f!5&O_95"EV^'70(QJj_GL8i+?-Z:D"=o)Pe+`"G/%^P&=0K,Ij)t%H'YL`=79)jI8>F<]K<GV:5Bh
%,;$[bTld\q[DN5p(J+;+,=I9DDuS6/%m9O43oQR/BSihe"/b(1=ba.pb%L3@hq@$op;89@-Ee6OmfFfFj3Y(?ECRNn00WtY9ngFF
%Ylo%;2-8egAR]OCORZc=8l8`0odqJE4QY9j=8+?un&*Y"XfnnOYo":s$Fj_aUUXe%meF5h83&@;F^T;_.%8&>Z/<@P(U1HfOT^4s
%T2.0EjOKOd^.IKb;(Yi$7nVSD>\\8-J.*:,8;DW>RN?47-f04qe8N)cr,9a/NNIX<>GgS#m"SQW0ORe767t_<6]VHJq[>ZkZ)G)N
%?$mB](08s)#2b.>f+j**,ZcH"5sQh&i.[L34+b',W]s#]T;gc/b5u]tMo$VldsCs]rr;+:lGBfI)7o?a%:5W`XRJX]kd!)oRCe1g
%I#Z%h1Qj;-3^urSH,0<_[ZnU2:]3KU;qHSrEhcP/E9Qie0n95qYMVO,qKZSn-4\j-%8D4uLUpdunhF\3o33W,X+7GZ(`9:M"!MAQ
%gHl2u+PTXcl]a=rnO5&_)8)eu8r!@uhn1`qYB^F/O>ORQ5>">b_T,Ofg_p`e8eLkm=rAEX@B<cG'p".N1PrPp=joGVSpVrE2S@W/
%-`4<^]DN*X$(QkJDGK<:9!k@O/aKN_'&gCpnZ[V'X\2EPe6lP&g(UfA*<CE.GJ72OYK)!)Xs&"(UFscB!C,0&%V>2Om3#894^[Aa
%j$FDk0Z7.D0L-F"LKi]:;9n@6GidAU3Kp&ij+:ja&NEXOnDU68;lhb;Ud)g`Li4U42gdQK+d@lb7Q1B!nA9HcKcJNKn'EG!AeO>+
%f'a/f1HG0\OEs_bXlLD+Nh30upho7=Qi_q4@Gdb2IrL3k4nW%T^`JFNfhb2-hU2sh<?m-k@0hpPo5Hi]W.ab_6d^8jmCU>aOW[s`
%Vih;eL5l<*TRMa,r-sU#r*c_4f+a=,l7sM;VI4`-0d%s#C[WIX"8/>V_La#tg7e%LD</1!F.Wf;VB;n,MYC:Za\'&O9Lt\(-;*V]
%$2L1j"l/87U+UO;nC"n-)BQU:30IS+,*)OP1CnjiMor;AC<nV0Jp5Eaj31ACmZ.qdjuhj.K1E-3k:UT:4K%m/^coLLS$(^F[q=c(
%-8Cj)"1JZ*8>s)]o?4n2SZHa'gsr[UQUU6gnc$?iJB:!l2N7Z6%rkD%bG[no1afKm1!ENt'W5aM_j;$,NL,:Q\\*r:Y4kRq]ag!F
%M3c9aQHti.Kuk#iFtisbha?G_$][gl1M`>Yb,@RIp:BhNHo",/,d:dF=JH#8X4>e>I[PLm,Ee=5VdF%`Yg)o%[GK"!KX@`%]ONBa
%,WQg%m/#&^`g.dhMS-bMF(D/g-l&oUM"ZCL5Ye;/d#5fXNOH$d5]@EMX^ZN_i<)<M9'ZEGAN4b]9@5U;g'klmrg>o5QNi4M]=H;'
%bA'06LT,`q8NCt]&#ofGcd/m/.nF[T?Hh*7ZUeFKm_[<MluhH?)UlD231nq7a8LY#m/Tr&f*'<c">QKX*<p9o#m"u3ntV^H:35Nl
%SEHo5ZGhnAGCP^51lDD1la[B=peZ3UfbaW,;Bh3u`\%dc]9DsqT<47RCXY_'_#WEBa>]*batAZrIh"esXcI5FH"21RI<Y)MP^,51
%QeYfdIKjl/Djl68=c'8i;f33/,D_W[[N1.L-V>9u*!4Yn4E/XN@BRkLE4TnUM11Bq?sud#l*"luIRAiGE6$Ta_NO6hSn9=M4b,,u
%pE7LJg0oE#b)cZdNYb"i7G6!!/1D+]&^.4L=iq9V\."#0Xa]0"':@Re:X]XV.k*25B+.\E?AKEu0+?+<&3RVpqXSK,4?a#s/=!*H
%%i7R_D7+l7/Ag@rYpCeh+6]*4AfE\t!Ig,/O/^cCo>3pX15eDE3%tpd@Ut)1FQi\O\`fnGO^A1'9W%[Bo@t#J`hNWp-#'q[g._D?
%a#9'G-&?;3$j22I(4IJNgdrQ\CU?DBe[Otp<(N6Np1OS97h:0,]#]$jemi%f8ABNDcK!]186IQn\,)""ZOdX5(F6EbhpC>3d,Jr<
%5(bkF;C=E/\5nKfiR6`M]0O^6JZ%DdL]=Ldqm>?RNk;\YPjaN27(83@=5f>loj"-9e%7R3%h+7SllIPH>sr>LroLF\@iCJ;e+<+F
%<iY`7BSJ@Y^<2LI/9J,GgYp9JNi%BFVHkGbbr\#J&uj)@^+8m"l*9D!X5@tn;,L#L@$$0#)/DCB;SL$GG\Co[O&pIVWJM]O1VHk'
%]_WR!R5!9oUp'dqD!cRN@:QPBhnRW)5I[^rZ.:e^dr@ebPKX^Q88!T(&?A#G31PL1]`[b?%h/juONcT*<\@U?nC4kkclgU37r1od
%c8:Z-13i+TWu]^T\u%ud_G[PJp;\[j38?$,VqlI^If3#EX2\/#Z&sV%\?eeG3AjHn1d*BoT^Tq6OE<mCh`&d73p_O"fqk^\,is*5
%TekIof/L5=ViEe3G]1.^l,KPJXc9%X4KaH%+)BpdQ*DE<:H`<L[dgm>9Ak_uDngS*+.ma(KKO:uG@_,,j%BnMfqGbCqe8/`\aI&7
%BR)gNaWPf:G)g69hrqKIcc<9*1@VpZ"kjD)$+p*aMe%'eh%g].)!rW3iok/t];'B?0hPnhM(.S8Q]:q#\+j6Pj5PG&9gBWmlIh`t
%qN]UhF!NTT!*ulHLA4d?F@X.29TF%A9a3O/Y`NB77=`5q@:;_Z@n'7ZZnM'/clD&`=j6k,6qZSe61pa'lPFqA/)>He<dl\.mR.0J
%-/W!K1f.8apBtJ!'iOUO.q<>1jWFRY5?59^p?Y$eB_P$2@"ha05lO9Fk#-'dHt2B;jD#"uAcU`%`K9a'#%7flZt(ULpq>pFg9/h>
%Xpu$EL[>mf9sOfiWrn?Xb>#8RopG#.e.kAI>.51E5[i7NAJG\/]SDRlLk&6?-Et`^6MC9FeN54h"0`r1JBMcFn@hVB3"c[*cAR3<
%]8LZYOi[5^XC%+Q#?5e9/d\CfDse5/F<D5TD^md9IA$`bGI=1:/QU%,3N:[Y=?Z1"O$"8MY>-d`LMt`o4>o52SqM-.8q'$;7Z`9e
%d+pkrKGMOXqDtgKe9@abpjT:'@Dm2<Z99Z\72qGunU=m4>e^Wd5C1fc:2h.5qfd;.IhffY=lmJp@/:<To,[?BFjg[O6XeSKj]$Qa
%4l"r^0rq`>cn4ps?Q[c&*^,A46PccfURUr_>Q"i[Z:GJ4!U':J\AE`@n?u585?*WG;q`L_S.7!2U'nVl0\d!^YtA:9_dCa^:fUf#
%V7i`KP!f0@KGK9H]2B,%_ITgLAmOKB&"JrJeaSZO4r!(B6,P99V\Yd_T.!R!1?=.e-%PTDI]_k)of6;f$,)@ifW-EJYd+<]=?*>g
%hA^a/1J,CZg"fZeas_`qMQFE5hlKVJKtk*?f[NE:OG*N_JV!>N+gW#]hH+[5#I_YJj9@YcL;s_A/B0fWLLDPeG=%?B;Di'+.M[Wc
%nds1<a5.J"#Q_@capIO%bY^#deriNiS6!m4r!pNt\Hu"AJ)HQMN!=\5`W:qp<8!lFme(#]5DUJ-A[fstF.W;8k=.sAf0N$7J(;@i
%9X8SN.JP^Gs)lTUgRpMc2#V`J1NHTIeo)Yh;'>\Dh@"5'O;uE[Gb;\Y9E5U_%mK/tlUPK=BtO@iTNS9/6\Vb,q+[RrUVa`akS=p%
%HMo*3&\L,H1i<n!=1=2>'fA2!hnM6?s8(?ja%UEPPQiM*<<"YPn5Uq%8c[D[`O(g.Qpo7d2c:)N_MaF)`J"p!_/)9Qq;67cQ%[HH
%C9nmG-8$3R)0Z$WJ$ZYFX0fXO0VZW\rpBZd*r>KPrH!TCoJhJ*oF-.Rk7R@0lc,b^LaNA9dTT10bQI\r41+oI-%Z6YC$0;aU,K@:
%2k2ml,J_5/juE624:M490EAU+3p\-M$.8ar3POXS9I?EHcMKLO?oMUaK&aa'\F5B>W:+!db>Xa/bVp=S8h,S\n38e?0h-CE!Kf'X
%an-]Y61Xr#mG(n_#oI2\@Lg*6r;"slqn)R^=QTP,B):^(F.8j56GfG3HALCtW>sfF+7ZOArP&Z=<,kAF*"[*$fP2l?bG<dQX.!--
%UYDBQI&*2skF.4li\96T?nGT:km#H%^F#%9&OCq0&#:eWGf[dUr;ku9Dif>@>6J/$<cARA-lhf06+P\8\F&;HaD1B1$FtgD3''._
%4Ue6Q/mkbQ%EY63TsmLgP6JnjXoMD9<1]8H7Oh4b"W+,2j#8V/Pq.fY8N,91H1a^s_,G.<FgHt6YX:($o3R1h?c]'FNf8hEm1q(%
%.u8!<IcT)snbGF4_T)V<0/Cdg5gd4\HJ^8Z'?F'J;1b/\X=_+OG$-UNTDZZD>+]9[o/+0cA54_FNGlHtA@OnX?hc7$Us$]EZl&:T
%YE9Y]gh'?#Sb;N5!6^6dmHrR5G")>dSMAPG")-^pPbjB&=<mc#ZoeQtZ1ooj(60+YUl!D6ar)i-'57"<"!e-A-?T>4ln<f_p32bp
%mNE%WKkK6aOEsPkC_2@=C>==jn/R2@&rU:2]/rAV1uO&e!Uk<CUo4L&HkRog-]Qdt94BA(CuRYTClI3pGo7>dl%RWs*.#B=!"ALu
%-6nOYqp>W4FEofC31CG&X.0@2j9B,6@k=mD$p?]&q_<Y7YV*TXoj@t0`$l.L!uFSki/eX"+W$Ze5!S-Sd-%qS97Q,@Y[s0>"J0[(
%3,HBL'Xbbalr`c/f>R4O[k0^60;P?*+KH4_2(mp/P**(UnT6Rulco_s3<[/h<P]CpKG[gAL]pQoSs1H()#Y4H9uB;6B;Y,s'G6Ic
%'ZB<+rh&jY7//e?\4)(CEB-YeBi)o8+"E>>Q17tR)tbUML%EN=2@YL]\[AUO1^N-oV74[Xf3AfrOketo=<c:k!K0mk)%iNr=#;rU
%.SH(\<dWH2Zm&QrRF$beRHW[<P\X9"Efc0gXmC\F`(_1f<fhp?PgW`?W+(bN'(o]3,ZcCQr`3k0pWQ[Ji_ZPU_u(`>@s&ii:pG;6
%lR.09dCTY.OD?@;a=R6u)1q0l-U[2&C!(:iBG(6B0Eo0U6?t2RXtJ'`9i-BpnR\`?;'mE\&:GO-iZ0eMFD0RN!F%XCTE>3s@9jC]
%p:Ja#'gU!"#uJ>_2E="7]\)*nKiIm5<[:d:aH9YCL(C//UjN-XF_b,$%:NaaEEW*(g$^@<r]nRNlW5&IT8rRpEp$Kg1d$aPXi1Pn
%6^sEHPM]=/M8q[)q&82Nm81U^ICgXN(X.h[4EO&ME6"F8A_<B`ShVOL(cams!T2\-Scn9Wj+Sbh^`4sko8]LmfuB^N>^hZJbW6Qs
%5jaM)fA,U&kZ]4Aobibff8Y?E5K`UBho:L---/,([]i[/icAJ!;4-YH`B[(6?#gWG;b?+$E@86+V.g7&'I2\[$c0H3$K2W=Vn<i:
%dc-Y*^bBO?&Q)OTZ^6eWLmiA&YG#)FpYbj"]^`^9&Wc)WJ)REfBMoS\NA>DPJP3D,^Z29"0V6Lf8!RLLS/QOL_AS:h+jRQWemg^_
%,+#K,4*Og:M:W+W3`m%*"E`05RB$1.ju\m8;;W?[):`5eNI@=BkZ8&#@U8Qur/9(5mm`Jid>lg5L:>u_kc@Rqe))s,qiQ<W/\pH5
%/p6.20jZgKIPci]hP?32'+`im(Ls`77u<ZddT=IslHhqpm1KU>5O,Og`[JT4\hF]W>e2ESj(L/4or(A$In#OIhsQPC#<8,ips)C"
%!Ep]lVt!HaGUcpJB0=ubFKN^^SL")c$T:>6L35aOQO`c+R>\Reed=$Gkf]I:MCpHAQm,NbEM3JhS[[H`MiU9[n;XJ?!8SeZ%^O'T
%$_G]d0&?4WYD^IucRi7p\<am!"b6LjdS;m[W&P=]%K;&9"&Ka*#c=u&UL2hFC#cS/@Sfg@&bh'Q:N"FB).&R86WY2LJ2,`W'W?k1
%k:`DZ+E4@Bq/*!ZgbNnror\=Tg?ae#()j.kpWeYbQgr%gN53c75)Br$:<lCJUSM]e><FP4?X>dU+PudK$;J^lqBpmrShmrIHrEO8
%CibiZC5-9G1B[sGf0>Y5+360kk%Wp+_G<OI!MOuG%[8ijq.-g7q)WG]aFP\;[cC!_`dW9a,IoDe]aj&+4i6;V7jpBI-OP)25k+fu
%#`%3Le#mq00UID)pmsqG4a6in]/o/P[r/itV$i:\?qO]g%"k/qI#VDHB=Ik-ZK*r#OQ=9O+R<m*Zm"+\6a^p[F5k3ks0sq%?A=NO
%kJrK2HG!1%oJ4=3"p7+`&hc<i@/YYLeP9lh4Gtqd3i3,h,t$Vr*Ec9Jj:8njMgG&]d0mnm:s.)O,_T3".eEXE/TmUGB$7+:E<,7G
%UX,`Z`QXf&2O883KE4h1HNddK`%A<F8\R4LCqWM1Z8u*^?RIL7F)J8u&Ap$29AW<KnQ=l4Z`K%q2uoR1EHK2<8#LBW3L+'NJ+FIl
%Bb/13HbP%P)RlG[Z"h:NVX$n?bJcl2$3l1a@pCeK.9uM`XZ2S?pB1i(lO`.O.due763k(,MN]Q,$#K!!*:D-)mVmIIGSW:6G)8T+
%89h)N2g6sE5&^?YTKE4pE&+mo4Zp/=DM.Fp790ITa]2#q<GL=cB<RHE"`.dFe.-_Uq/=$9VOB^q1Hj8BW@)NJ5lpfXdNkKC5=B01
%'&4Z%%rm_U7:%(bY`pg:$khVT,\ePkk].N'p/->,@C;C3GpNaU*ge^SDi>+t4<J?eePaf^'6$^rgVO.:[Rmc$1U`]]h(Q]ZSlgcI
%.q<sA2PF,X)LOA'O8OfP\?\ID+XT>gqUltHp5EeuBSTd(+;5c>.mHiE4SGm[9"SM])66m61RoI(gE\LM-Sj]^N<1LK0g[]Ce]bg1
%q9<!Ac`,DeX+8d@2?1T:INfR9#m&C,6W<+nEfpZsmitF.`rj$De?l,-j'E?1*BIP*4$FnY*Iqe49Td@p4Ck=X3TU7N&)$&D5C`9T
%hnPbq>p%Bi3EMjNHo=IW,PASEX[UoN#6FC>11Ut_]P[Q=%))31`-W31?7nGVK3bZJ@=W:k:1cNH%q]XN_k1U8-.-*Q85/D%S_I]S
%[pe`UNu3Ki)!WZa/H"b@0#J44[e]H(S+#mj$i_WaT_ai*-HRlDs2=ZRr^.T:icXMrV*P23;80sB04/e?f=X)\EK[%5MEe"PQ/4lK
%T%)IYrao)7D'r=6Mi2-3I7_(,fJ>$n9manIdhUJ9V)0.[j'`lS/,Pqtq$hiQ?$d#&/OI7"`@5WZc@RW'h%qN)Ao:[e;0a*:kYKn.
%-3jfn+i(L!6n*Wm+!j>,n7eJecR(1c8Gri_FsWu\!<FB#-mTBj!8Zj\eJ3h%iK_D&%C^=V)\"oC8GR:XA6gFf&BEI$HN?,V5MRF)
%Rh!QqPZK%'6U?iB"M<s&KNXuJ"TEVqBfYB#pq0fb^[3)E<-('qJ(,FpAk>SI3I`?Frs,S^8t#Kr2GI".p^[+b^UQrEc-g'>aIEE@
%+PUMP9EG6g!NlI8PL,q"HQcAi3!5W*j15<Q[%a>QaL4<a7$%_r:M%gSe\QB$c*j<RECEO8acd'JQ$.W@<i&!"jqWYMm[33ueGVG+
%KR6$>iafW;0YgjY3X`b%XdgHiNcV=(.IS&./Vjq.F/kZg\>kH?\40FpBJ"CeJnVP03fp+cD'<*H6ori6;DBFUL6:Y`MWu,-UN,o6
%cEkX44#GF,ij#t,L/nYW,<INm7GC)cQH_AaF9(N)I)G1kVJ4j]JL$Gg4O!l-N;'D+DQCH%R\^R$=s2&K*>28Qr#-<GqAdGA(7Zf7
%6BF,W['9ughV]!`AB(#NYLh3AYu/T!56+1B?>G#Gk"=NiaG,+\@fi"oW6q'SehF$,=S`R3dRT]@ZrN]h#n&fp5u(k%`YP"^mWB>Y
%QG?qO'/p2**]S\MWG1tcq<\:3\3N"Yc>Gg2X#bo-@H\.qpZ#QoO&6fI:$n*OG2C2[=@*J9Pj&4hV:&Fm)^#3uUE_H_*h7m*eOUkS
%_Ra.D^Gc"Cdl'=Q>>`2X(17)VB4EjH1>KQN/H(Hj]u)`WMZsK\QJC^3N9H*$LLYOhUp_KC_9Xi`,*?m>fESIrH)t0onN@6eJE[hV
%+su;Ud@\S3,#(n[TN]bTNLAf_eIVJ[Y=T$<SJFcG6G3=*&KDK-^ei([@?:'*Eq-M0XkID9B&$jrH5]UOS,\jIP#k_XlT=glM$iVN
%h6khV+p(9L;skDZ=>O6m/qJMKA)O3K\k,D"K#1T#bN6>u-<U1nBbh-)>)F4dkU0'ta&"DGq=;m>!<[;4Zu4pA?<obW]Sk<L$bB?L
%]j&iHr_*WdglY6r;nH%dmo^2CP[LLU:&K\%?6sTs'K`AC-+f0\:Pb=LG-A/'P(q[es.HS"C[<6CKL$=krDQl'HKU=Eq4&MgmIPB]
%e6Mk<7mJY#WlqD"\lS>d6Ca2-J95OmYCL;"C$1!e^'dPjW<`ciW/KB-QNl9sX:XfE%]IO/oLq&8+?1EnPYh;1JRB^+e$Y7<&;dF(
%*&jW@`=T+i$d)eP>9;W_-k>\K0!fld@Msl.Rt`\6f;".k.tQ8TB=FJ>HEIZlP9.+%FZtl$\!.VT!f5]<)-R%:M)HI#PqmjYohbJT
%7D".tl(3W!m;Bl`#@Ajmb^RQ0.?L,02?LX4II<.8E/NF+d622<s$(,eKQiNSC[^UTd9[LIdf&8$][B^^i*:&uN,F.5=se4,,!%mU
%5Vp(#N:6l9(WX.+'Ej+hl5@PJGNX'h%OF-fM3qoNBef&;[D9\iMPep9*4;%Q;3(&>EB3RH7)O=""X/@)UAnFT\F)d`7sa,$;G[nD
%,9"k(gL7QjeDd)%it:@^EABP9&Vc[E/XtYi\j$7_V<=NLQ:`?_5dSJ\`32C?CV8X;4Yk?q8:7PZ.VaZ=&o$GI^nH?t+4hsD2.suN
%h`Ygn`8d)Vg$4hsQHfF&Bf6P%&(+ZB]dfc>(m^rc.>XQn>Ws,$>#gnpTdE\W<Q@rd#Pk$b*nLU\18P[u=uk:)'c\F99]0UF(QD[h
%4]9i`:OttXBf/1uY"un-<HD+"2i&E!#gm3uIXHk'o*u"?70-Lb/B@%[UaR4uA2A6G!YS):".<l4/HL4f8Y#k))/=FlC8DI[oOIFJ
%<<SI=K3/%fh"AE%PM>N5HESo^"f!hY[M(%a:k<B25*">cADkL67iN1aV3#j21oDM*[Z8V)E%jJf"=N@7Am[W;,M8tCm.DC>RCp+_
%:\7t.j^<.C92,UKb3*NKdc62!AhVuB48I+T-X;>>rq)LHRhpsakJFjU!73)?e4FCQiIQ6\c\dDtY,qcCk]QSQ9t(f5rR<T=b-M5"
%H1\aT8#")((71VY4!R)RP[c`BIe*_,]F'M!dBY*jb,<('SoirGP+=T]cQ1Q-kZ\-HCA^^R)5VDW.uH&!Nf2o$HoV9bf+Mdb*3J,R
%r5ZQJ2$3B7bWKK#(.ddl_\2,hbZ>X.W2KCb*^3X)HE<i_D;P]\U?&K?-aduA>9W'X)pt,(1X@\-N0;N6,FAQ-]#;FTBQjUX.6]ri
%rH4k1oh^i49Bt00c80r(%1aWh5JI\-Q%qWs[TWT#f:DI"UkV*?`^_?WF`C\'$$ijP!,8))<C5g*l7&#tNmCfU9K67_Ps7(!98$r.
%WVfUXT6INqPCK]qlglj]A*b+<?e7I-Z2FO<,T2@+H1L@kkJL9,)o1o+nW2QM"3m%m1a@(Uds8:IBA*26k^iBtN4'P\V%H6(m?hgk
%edkN/m5/O>0uD^qaBnegA`HWDk"5:`>0>_():^GGQ\KE%Ulm>aAMY=5G!]L;r&c4'c(_XB1"r4na.*P$Prg9s"q;<EdG<#XUCoQZ
%LSgg;-?)`[FH'>VGM]$Z:>8Y",@s9IO1,nsBtfInhk[7::4jef?D23+1KS_\f[UUZSHMF9XT!0s&s(Y;aMVgg1(cb9ceHD0dDap"
%4+C9DSB*?0LW[d5cr4V4LS[SB49nh>W]0G^Ap$Q;i'@uu:8C#%*iqI+:HPs3GC%7oF.GZX5mqcL+(djY;T29e_j/*Hb-4%;oto]`
%C1(lPXYO0'(=:\?r=)$mDR\&@`gH&emmS%G\G9-7gPYg/>Qt(nKt+6LI%,YS^G,+>=IY-cUPB:JOm:ABWh]rbBX8GOD(Jl3I&CV$
%9tU![`<^q^&106"22]k(ps(u,>ZD0uOkY7ZL+3'O$CmXc+cPt?GB#Z>&n>9IUlHDkbSLA[?p"K$$GUZi+*RrWX$Y?_.MOOe!FHi_
%_Om7-.FD<rD3j7is(nXZS,/<",UEI<j0"q.38a@T#s=Vd^Ve[MKU4K[CRt^\^-3YI[#X,UM6)-27a?mK,NWtZcj4Jk;2+>`8C@"H
%O2A\V7W4D9U=-f`:O1Hh`^l7#Nu]>?.J_)-+R>8!hWM5][*WaFhlK/q@(aqfa``3@cki!f8dm(/]%^!R`.8U\2>]np$K$%qkhPKu
%lq/4QEN:HnUZ4/Q1u'Z<GD7-]=bTIi[1[b$eDgoWS_=phHsD8a5D=\)jEj$6\a''UHb/VF5OQ5.'qRPS1geYRC$m3V5UNSh"dB_<
%,uZ6E"ej<+^67i,\kC2M@2UEFqGgdi^-`s0c\ct=#nIDUXRRJD,eLm*V_O'h$`b;YZQIjXaX/KfLI;_A1P-Pc&,nI2nY^j5KEoE4
%N-O%e&;-P8G+Yfj2.DSnNDj3m&iK.3>/&'OqW'8SP,V32&'.,G;f`*f.7=TGHh0[h1FFUpooeL-U3.;N5l1(i+f)BuJ2Lc(LZ'=5
%7-fXi</=[B`L_Z$8VJt.7M#U=<-rcUU5n#>kV[,.q^=!?)>#.lgQIig4XdN6frjfhSn,es\h/TV8V20=qE#Hn,u_8#pDbbt,Uf?I
%qbHrD.394'"YXqflK7Z77H!Y71$hViXYBX9]!";Pblt4Q9LJPW]FJfHS-]&cZ5s?(reu\;&\CF>+(c8F^"\Sg0%PPj2pG*hU1__$
%lKHrs-R(2kr$@<e-&c1skH.Te3ELVmHR&GZ48,P-2O$B\K6BkRbFh>maJPY]0@U'u6;CWTs.3FE8S1i:Vc?Ln[g\tb.9-6+6on\q
%S%WW*`SArFri/=dnsH4i$4o!%VB,s/Xm(6X4Q8nWjI5:4rN:(1GRgeE3M/C@'&GeP@"Q-7p@\oI3V!]OhTkT`iHXai%;p29dh'?=
%Zt>\7d5'?hOPRR@\0K@tqC:r&EANAd3CdHQ>:^uGI]7qG^-4AJ;L"kW\a7s-?qFZ"pg`ig87`rWb$VoAjPJm]Ghi_n52XhYi^r/t
%5p'G'pXZKVfI2f2$AR]6D?I]?Vb5QW00rr$IG\VG;k#oHY)`&5U"DhZoJCI4?^?I2AO=F;.6*J(c/nqM;<YV\Vr"JG#k7<t8m]oh
%?:9IsT,E>]*:'_IPG%gIQBX/KC[$19I;#K`6AhX5CP+I125`t+`_?EaDf6c0&5R`](B,Zf0lL6VcdFX2Gf]mfYa?IflJ_E_k4GXI
%$o8U<HZoqm:d002^4a=t)jdpr-6'XY1IOs%3`0N)@US$gF6EDaIi]r0$`nG6Z&/*';MNYl:MEj%bn>sg2VEmSF'doP!p_\<*2+0g
%j?D0ol1RlEUqbqZ8s8]%Ueiqn)Eq0bYb1.R3gsu8/Is"Jp9,!/#XnI$/T,'"A)a*h%a\@I#3Ca`MEt^BG;jcqdN[^T>.^0ZX6Ikn
%l2<AsHMee4h0jeMoo:nb9$n:;OrL8VrD3@C06c-6T97fQW2Fur=j+'SYBS*t%GViPYuM=bF\q4S]V/4ZE!_j&pY=E*&QAoV$uXHE
%T7WL6qXNmXeMECh]fD!B.ufu\nX1aC%ee1UT*]Qa"r-lH:hXf,eK_*8'RfBsqi'mB[UbeRVb>]<K2bO.H)*[cG^5B#a&^T&e5Bqj
%2+0@>2Pn/PCb:3f9dq)M:3N"I(e$=MSAuW-6c&\/rTl6s4En3US9Sduk(i\:J*fOUEMa?5A!6B=XmG3IP=HpZ"1f?8HDRSg!3?r_
%q`oPUSij@YqL>.12n['0jWmh%@Hf!J.*B1l68ET=8S-tCK/r;oe/b"2@gq150F-:qEL#9==Z8^Zp.#Me+X8b`(uMp>[,ZC///[N]
%:F/[?>p&d[h28@bO>R-e##l^F4(STSO3%u9<Alp%`E?nABqGVT";^\rhR8KfZeGP:8%pKl8(\A"i/kFMmu;1]U@:u4[kjIhdDR:4
%9700t)E&c>qqH)J,h+e*66n7LQH1NP.8]+EQ617EbT.t80M&H%*V-BAF`##W-72<lD:jq4.=0pL18qE?)WDO_!b&0<WqFE-OY1tR
%NZ\P9^*c/L+L!XjWT\s9qcl%g0TEh>Q]:`DjaOCdWl$I!+8NH/rS*+WK[1J9_+:uE"S<d&LgaS:I"pLKQY"Y[7n8'$oZFD^(ZBWF
%Srm`PcF)+!)c"ol'C>MAM+MlQaAe<nZ1a%B,cd]4PeM"@$+cJYnP^0C$@"c:\i#'"+&mIm(>)PPK?-3r'E*.G<RubAK1*S4]`8":
%#BN`Y9eBALY@)^VnN<FuY>#i_<\&k=A4t)eN8:KuONe$+I$*C2gSt+?cUf=]*;h2^rXkKqPcSI>-=?t;_UbX[\Iq3U;o9in8uY^1
%+^Gh9Vqem47PYCnr*3*D&=ZFT8T$FP]g1+p8$$*<jK\Us@E"Ygi$JCSOEV==PRE*B%Be&UEZE[cB'E-pj9g[bH6\NHf@^IJOfXG-
%A%PMN1$cD8-MaG#N`^j]R.fYl7\.Zu'Q$;U%]rBe-gM><@F!O/;+/_D%32%eeVQY5eKI--T91p]*[&4[-+n)Rip-@q(Aa`.`t&<e
%=\D/:mEGR_F%I2[?/S_ecC]C10P"5tMhQH"8Kc,M0kdKsUOJJMa8&l;a(EOLV"%&[WCr@lKh[^B'K^5k(QMg^>MeVM;\i9Q46ha<
%kY4sB8F_N3L(r-0,GKln(dKEhM=(;K8?2pt%j_>O($[dPXFJBjp.MEeaJOGZY^[Ji1s\6T^-e;KEI%4^Itr@Jg@^YY3LVBV4+d,i
%%;BRLX?0,jJq"h7DZi_JdhbS@\#O-c2giEq41*onm0SNR.K4jH6?NQr*9ofsdn?>K1d,5IW!hR+&Cm=.4Q?kM2Ei`*pqsh0;IdkH
%@0lSkOU?H8BfI&?(VKi1Wt>tk#a[rl^"R(/#f)"r#+?]c*Igu_Pbas!O>>[_Ni9_MV9;q\AT1jB,843C"T>*J!QJU,97]hXU_V:R
%@+-[VOSJFW!YLJ]'1?V1r]hbCOscboAH"t"M32&:\Yfno'Lm<XC!0T;@T<PTP_utb$P67)r%:#(g8FT%C(`On:7cS0EZ*9;?Nl<m
%Yp&b"pNWp7L0Y`h@ILiA:k&D*r?Y#ufPmNHTQO"D-oIa,+W>?%5,ZAjoIR@/FgNXAB=78)dL91hkaUpK;a5XL3!(p%5,2lfT-iRq
%_365*.!e."@$5-u$j/KJ5KbWN>3sm<I<hF;$/JuW%tX+["c$R)P;aEnZ"%e'[2\6p3>:=ZT;'ZC:nA:E21%;Vjc!*aZ!QrV-f,ir
%N<g2*=NTJrl\,\/VTd=d0G3AgjA4TY/X\)YObf3I3*af)h]igRFrg,?lMpOHmU?l'*9t5_eGHDdk'o":#BLnMq+0WU0<!Th&(4K?
%@H7GG8OF#ebXjW$F)HKJWSBWZ3#YT!5]bLW\-`#j5q6n]V%[oBcL3dCK6A[MDeamM;-\RiMgK-*_,0(c[d50^`G_k\VF_A&iJZU1
%4@oIDP^L@1B>4i;M2[XS"k-i)Okm\@5`M/$q^bs92lX`(&jE92hXU6[K0Q5-r:!\b7`)H$7>b-t2(;$d_a]q/?T-l^Ij1*ViC8-8
%V#&+1Sg!+7Ab#D#?2%1Smukb!GESX@*]rIH6\!0El*Wn,J3`Pkd+6\5L!uF)<[,/#26u*>9%82)WP5fH:4V+Cc=t+pOE,eqeARO:
%M.$i7ch^uu;&c5%Z?,GIAV>XidLo]opJi6s_;or:Eq5/i_YU08YpK01C*/#MF<;!n;D]f;#0JX//8*;;FQqj;H5'+a&92_m;DL?#
%Y)j]!Cu7q\pi,UiTq")]D]GUgCIWDl!4`(5*QHsmP7A3!<rQT_2e0ZQkH!;M.X1s)[d27hVQ=BmDFGjWgj67LbZhE]#s/4KMjD@m
%Or5YB;4I`uM3)@YNVS*g55$R7gUU;tJ/c^:D-M*n[`?Gc_o)Hc^NWo@fSW_I)PV1^g;i@p&hBSW,3f83J0/\+?gX6JK:V%Vg3Q@$
%BoeLOTJfL^2)t&JV#.3e!Lj`Q!=oMXLZXsDZ%0?\OD1t4%[$9,PpA.:/WK+0WF;>>q)PLP=1k6+lQFuqg5[rogK*2i/L49ebBKo2
%PPBY-:]15g*Nt$D;XYU3:>oTcnUPtfX^QRpoa79baPDmj0uXBZT+G<',i.*F1!C?Np_;RCZu%T09tN>p9d_ng-7TU@6rn4$qVQsP
%T8uS=pFqSUbP:e#=8Vgdc93cE:f?E5r?jnp0SA;O!0i[kGqRPS@-?C3C-LX9:[biFG/U"uQXmFlD)g3=(Hd8)fNTl<bp_qcV>NHN
%\I:P55MlgZNiUm:#cDojN+!u,gm,IFilB/nd/5`FnSf>MG>*0Od,Qaa\+rj9?'S]4J=ce"f/DnV-7li3]XsEXDZk&l-Lj<Aoc'FF
%!]R)6Jur;HR/D(@]:K$.+)"l:r1?"U!-@<s`3T`kD;O&jpQ%29A[,a!^A\,9=h+GXK-I%ThM@,^84m$WI#k,3B$!mDV`a7:>e&_;
%gpoEOeO@]LY,sW*SbA%%3@?$r*VB?l9`W&0hM%W<9uCD(V:07PM8[)RT4P(>+FFNuHnqe1jHaBH%TQ<N^ZiILQ-mh*6!,I>Z(%KQ
%]HA7&#k>$dp(V=Hc0(_S7pW9#Wa<W8)aOaVqLQUMpmkXOO\q"<.\="m^/P-WT^@s]YY-lu4dZt='$5?#r/mFVFQMV'[-%(n<:^sT
%,BrA$aLqZsid'&`0R`Y@&.Ahrlo&!o9benb]'AgVdZB^FDpf)3Nb0[!FsYKO7sF_YgFgMn2NR7_nl#gjmNSZgo,Ae7%6'mVE7=dJ
%HbQV;Z?K+cGCaR7.TfqPV4p>d%fF/Y_PK5nGI9PUA-:oY/Js!a)Y,AJI<s]i$AC[%$Mq,=!fE>XbITh#*4]l4pOO6Pj4nebZ*%Vi
%X2]p+q5<mma"V(bku/1A_i@dPVZ"cmPr.85TriQ]#q(a9IBll!rN^/j>F'd9^^N,LrAJ@"6Xu5`4"QfEcEV_TBF.(n\(a'GMhKV0
%7IFb>hJ$E=N&7%pV8)K!79q>91,P.f,b^)Arg=.T%RKt7Is<))[XsNAESn'YN%8R_%bf>-bTmq9p45W>E@D81Nuc:Op:<6S=+=Rs
%bF?10m3@L9]29heT15Jc_R:"_hh9&S&H!=5]tRs?oP<,Y[,jg4(Yjp#ks*g76(NM'Vu>^(Z&Q!tD!g_S:e3?3XMIeQYTt=FD)^gH
%U9O->X$RdZ4Bcem-'n&OD)7*oH$R9Sg<"9?6m*L-+9(9@lR@PXL07aA4momeE6Gn15mOMkWL7DnL8dr=X@_btfc4)l\Nun#mDuQl
%(/!ijT)RL=0]Qf`ear/c:fJa<fs\$)g%\OgSBd5os.gkuh72*01_)i>jWL#G$h*id*YAk#_Pg"`>Ti.6Etudr&#hW^`,:^D-^]Jf
%^M>?J'jl(BZu'X*q1/*LJ.hdb`uKuX0a+-9'4<nEROWdH!Q)N]H):@ZR\$)sPN4E#_HXDT_B+5Y2??:nf@N%@H[fXI4n:AKMNYre
%iTA>t*"E!NC*;a#9@&[8ZRS.PjES+!(#_!W/?kZD:u),_aV4"36V^o[8>N)t?Yl2t(L?R"OcnK81Xs+r.b!Z%^:7IV[]7ML9<Ogp
%ofTi]<?1Cj]#g2`13"i'P3VATj*K\WJ)M+rlWBg^PY07G3&<G2mG?M&2R!m63#ZnQ)sAWZZdD]')-*?H;-i08O*ZT:#@'I\H&l6B
%M)hurVJ43Y)^n&QRFCd"=a>f.Sd'@cQ1&pn\FD@M`0=,i^3Ld"*!X%15AQKpl%WL5oM8=@f_YKka2dOX4%\e_<fMYg[,H-AP8uY`
%A<$MX>;,lIa]/?VpfH7_3(<)N^>bcUREccn<Ka9t,n:=W$&t=_G"-*noEYf%k._U.rYD"^bEJ,'mC2^rL<E7RRA&/QlkT"\kP@VA
%7<'eQ(]]1>-O'$AV/+A6+usQ)c=o]*QLsQO+.'B#Gn7u+7eRQ4U:liHk:lAI5cI1J$X5g7/GdPrP2,[V@t%[+U)eukJ'"Ta5/fSV
%[BCOAXj;jUeaaF[]FdW9</1`#?<:+`!;j8ikO/V$]u9`<%n3oQ27@TUqnElfl%P`&`V%s^1Z)7F(1a"D#Kl@!.'k)7q^aFan#*sd
%b%frKDnBu`R?aUtSaL>YVo8tK/XoMEeu+k`7H/bj'bp><Xe@'IT[0Ie.iGX#qA(U1/q=N'B2N4V=VpUYGhs5uMYYtLA!JiDG3&*C
%:m2'EmK[ma-(I=/#RZ\n*U4;Fd\aUPJWhcq8JWR?#mU8c+jQ-u;dOg-&=f%_(:hS;(d*ArfuW]+V7,#)>F*]UrQpWI#'cAUfYHXs
%2Q9'UK$J,Eb!Gq"b+apEGeu`sa"/[:fF_io-j/;^O["P4E3AErH:$BDj\nJ;!(AM=Acf.T:@koXRa;?jE?&rm`@?`H,/#0AJHIW4
%d-C)[ao=+6&OtHNjEg5L_6G[c_A_U:&dclX3m/H!YjjC'dAU='OR-^7BTn_h9V/TS?Ck6S_YG`fdH8YAfiJI&Nf4g-n'P-h1NFjg
%YZB)8\'!(!Z1YZ+J$+*ipt,99;==g;p[d-qJ8@*ZV,%XldiBE(>N4sh($CYu'W66N.4g#(,&abb1d'hgZ0*H4B1*Iqeo<cQI246.
%:ON<n!6h29V>0Te:g,s#<JQp`P3d5?m'Bl5ibhWEeAF%V^c)U.)6HpjKRP;GY1MkA*lUqdfhk18^7Heb8T2jEHiD*HC%Kek6k&uo
%*<5BOR6DT.=/mSp*$IN(._]H!>=5Uh/nZ!Bc>iaTirh#b,uFUtMet,.[r)L(?3n_#%1=V00q%rB?2d%:S4o7k2:k]C4)O)!?e5(h
%ep=ajfh-2'D20E'a9pNT*UrR]<l@8uq/)CUq];u3)Zpd2L_5"/`$>`aEto>@R+gF%bhc)S3a[AVIh9:mU2b&,j#A0cLIp3*p@_&[
%j;!#:\<iC\L+f-^=L;:#X"DMD=k61?DfnaV:B3nWM197s3#P3U^)boV5`f/P.mnX:%^Bi"`3$T<k7alC)3:J?mQ0N=f/n)8Y6Gqb
%TDskJ@m)%8%h[D?Mc]0D3slk;?f>$hS!dDZ,gLRJ3$_%>@s(8YOW\1meEVe7)^ZaYak@UX:/;3m-Ok.sc5bVJ(_[HfRtnFN8"nFH
%lkd,G?B(pj&p0r=\T!$:D[>8Y2ROOdnhmn-8+%"*\]8G.!UbKsogr"W_cTbQM&:ork*7oe[,G1q-)igM->hF"Jdn@Z80Y/4WCkat
%UMuMr/HV]3)@2mHaQ(E5A!0CnXBi2ilPejkYNg]UOQng_I^=opXOSI#9`Vsgr8iEkMqN[I_ltGUkJEh?U<N]S:(O/H;e3lUb_aHS
%pD\oDK@.He&pOb1Ir[g0j*SG;8f*X^Jr#2?dl[UVb!UV__Y]L+>L_qY%i#TI>_&gdO8\30l4$&EN+C/(1g.)5GY:s4O%?%mWdEDQ
%iC$\>;05r5mHES4V0ti$Ng"r-=*.roFZ]&<QSJ.o:Se]J\!;&f@=\j^V!i8M.#'(P8>l/Pf/hXGENSFlOjH-@hO6]JIAW,@0'duC
%a`+ZQ.,ln2RJg_%riW5o0PjSm/eGPNIr]JtGaTJq#="km+K#F:g<Va/96n!!"RbupoU9h(I"=MI1[!+B.cX/-i+KIj_O]SmnaS!!
%@h=?(P#nMq)VKU0YG%gXil5ZFr8pFsV]R8EI3]c6DN.&,5j)o.,:trYY1OfW`f<Pl)1'<UQ(\kAm?3/h2WikAj98:Rj-DT1lC@;-
%U'T]14RT>37EN%.(bUPL&ZqfaI+(:kG.;@-dgRQRXabMN>rC`i8(.(tfK,+ciMP4d`U)688?dqm4%0?B7.d*p)>6qE#Gt=IQ/_8_
%.fuU1jT:oQqG.bb=mJ=/i[.1oP9`iD9qo8.co4lo=?0i*C?-Hg)>FPc6m<OuK=hnpl2VQNr1PD%Xte!(8'Y(,'UliH^0_);Hs!@,
%XWM-uIjuSR9dtVa3NSGY0tiR@qBFa-BtK:5:#n767-#I%%$bMsVs^Vd37u@\3C<8[j=E&=%T9X1RgXq@@$HJVp:!s(HkdCBW8'BI
%jAA&E(4-Kb.<QcTh,5-eRhf=\%[DH17j87iD<]"i&Qco^;EEmtM'U]S!<1G*5dF#p+7M6L"&O_RI#L<2>pS;ac.0in5)ObH&XFC]
%C@%`=k,42)6c[.N[19t<,+\Uo>#?hk<ZA_dPHQ>@Qd7+(Uj*C2*f8Alpjsu1R5^>3ZMah*;1Wdd<#J.H4pJRCrCn(O2]Se#JGC=F
%o8hS4"NUhqjii,HQB(*<WQYuis34`#Wd32,he+5SoOKT4od-8Z8nLIcc->-'Lr]k?NF(=OjR%cc'Re-lk!`2"LI-'V:Id9C0B#sd
%$Ud4)ID7OG"pY?_!""I_OLC&o#+[eYqIBY9bCVqkQa]ALCe)^<g,NKc,4<i+iebhD^p(Yc'#("cm1luBi6@kNhJ'[S/Fm=KP!^75
%CFtekV*dcu-l&u'O8/m7Pd,(J%<gE9hob952O<!J]6i80q8/]3lO'STV`IH!jNh+H'Ok"kdK3@^g%VoYUJ_@+/U$QSp*kTD]lK/7
%SjrhI1mAmBSmc/qVX:C^ceFag#WcYQ&CIc)4Pf;0M)/Ad)[N((AHK&WjJ3Df<j?X>7dAt4=um9^M5Ee>-`X(ph2G*c<Pn[V-r=0U
%YfL7o5j?FVNKPKZP,TQ-NZo%p^G=O3a>"84WbKL'e"o;Sq+25`Z!eh5q4ltN^s4Li.a=h`jW('<q.onj)<4Fd[HGn*+,31:^2K'e
%'ODm`.bm6lj'<X!4pX-NSP`S4lu+f)e)BC>h*jI2qQMTU'53$4Ts-!E7N:=kDr9!4N&qQ@Q>^C4XR#[R7TQlNb+4P^k[i61l;j[M
%<CDnKVG`OaQ#@"e?g"1cGCL)CY`D]`)OtNE1FO7cXhLb5HReY/5u$FZ=+31\J_&?CZ9Q0"+rUnIb(<'/1Y9n`dbQenJn%0%oLHWb
%a-Z\-hmTh/Gb!*h&f#mg0BT=#$TSi/-e?>e5O.+#5'sE#PBKGabTn0Er2E2!j!Duf=,i6nb\6`4_p`[NP.n=YYY'%^:$_V2:+dNR
%Pp:cF3"]ed&j51>4ZHZs_jq9b<+D=Y65LSDfo5/?aC5RYN3j"!<pQuRnql`&BF,J\?p5'7rK;s^5.]2Xj%B2D8(Ci&c6oJ4,Do,5
%X,JGYAsC.-\Sd1\XCV9sV$o<L'Z<W!T:Y:T4iQc\rbocKrZGZZ/6N$eFBhXSYe*ak&bu4Cm"pmDK<3-3_Lh9M#YY>=O:OU>hhj9Q
%?CnB*MD+8@_7:a8Wp!SHIjs7e8Sghuk#8,X&W.q/X#BkZ%$OS1B]3Ds8n8-=5mo-)&)f6`E(7nC^P.>7^3c,'S0_YjoQoVjM$Ch<
%Bf8?0r%P-=P`uA8DaYafhGeR&PqLJJ)'R##iZh59XMMW`$!D!N7>NN#cps@5d,rRaFXe]6b22CiAF1#gXFQtMemfN$kHtAqrK;:o
%"saRY0V,p;6*J^*1u=Mk:Y9u>8Ke-_Yai\E#iCdE^Cq".2W<DoZ-3.k659jbE<C#[r6MR!1nod.Ak0+'&p^#EBhfn$*p+d53e%DU
%@T?(53s)MJj`SC@VLTCUpR,?IN0Gt")tf5oN<1Ef3'JO1#sm77b.S)9qX<JE=ks+?U+`?\"Vu>715<s>/#4b+&;A2k4hOY3!d3`V
%KVpLo<-EC$[IQ:!B!+i+l;6u&DbqcM>R)N:diulQNq[1j)s%"UN6d(@7.?$ZrX@"a3=oh.q:eE;B%gId@Z5aNS*s>*$dT?ZC4CZp
%"L;"GL$@IV/WusHU!DnD7hK9a3EpWeOU=>FnrY7Y>tXN6Z0qfanV*$<WK1FIRD<>(.)$W(AN7m:HE9o7c?'h>'M_[jjgX8H*Qni\
%ff`%/1m0k54p3`=\ANgRkNb!LSIX]rdKoiN:3^5\D_m0,:#4!<lbVG5-`huNH_QYM4O@@Qc%[1f?l-+K\VLc=^b\SQ:T'=e;QB4M
%*uC16\toiK?aX9ZTG22f'<M&+\-sppRGNJU$iP&3S`00lUh]UL6,)L'LtiM1AfWqm'TKljjRZ4@+B(j:$\E?8LcY$qeU4Hr!(SfT
%P-%=qO7I0S1MUhSUFfY>#>sP2FPTe^4Ef-;jWQ??'`5:$l97ppg+d5#;/<)3"`Qlk0"^iWnZqm.[YtVeNXFh(oquU=bj$%MrZ6(E
%V#@k5Z9/9^Ur/t3Tq7jS?-rsuMo9mUh?mZQDa*k2s6-O19;D55SeLnE[de;In2;XUTY`P;"FH%N)P+aH"Et#fBP.h5?h]mRfCN_?
%NoGKK7pM&E9]-:u>0@t)2Z;/^*@@$b0*/,ZjUt[@_H.>HF-eiA8>Ia<;^/>Scq6Q./b<8g-92)scE?IKdcV%8;V]MNV;[Tm<\r^a
%?,_QXQ<I#oNcQTgqTHOL(5KqNX@;.<<)X>4\#TI@Q^fE/iEF;Jm87[?&I<=`%n``^%IDI6%_6uRXrH9Z<8no.OP^XB1>(='5"?df
%Z2&Z<n0W[F=70g>TKG8:P4H,U9CZ@ND]KQ,pBRKboF%Tu^DU`RLYfokieL\tRk%lp$0q.@NRd:IA@n>Go-WM]"@815I*bet8dm=p
%#g1I>ag(.b*_><CMmG=PSG$=Q\`Ou:>N&-&ei1hJJ)^)o7FL_A<-6.!gZtgIj98;OI)0MgQVW#q70]-BPn+E%:8V+"b"h<%U>.]?
%RpFWsK@U'u%rI#8kDi$$!-cg,?#bP+ID'>"-[`okWpPC9F]kt'\F+Ut:[Ui?XTE/k-qPeebe@<lHhU=aq9tmCfTB8UY12n(1FL9i
%ep!@e3#aa=>QVdX)/4(TPiM)`$t;BmMHk;HaBnc(S$qKZ@MnCuDa):h?ZXVZf-1j*XQboZ#DOZ?.Xg!62://9m0;@:`%7RijC'd=
%\"H_;e]s$kp#WWj`^IF:$6tY)I@GlAeS\hfCL5Q'A+os@(u873Qf65s'bHE-]_1Hr"cQ*N%3$'!aC:Q+nt;_3EY[rM$"W)B2%$L<
%?Y5`IO+[j);Vda:RN7%Z,C9j]iVMW!n*koF[)i<KOhJ]5:n$VqDY#&RiGbr_;@ig=!!'8"8@8JJmKmZB&WAke=9@C,&eKES.BBcF
%2&X'0S@DO(hu@&jG>7?C@+#TlF+URRA6d_XW`^LH4+$i+>HgpcS7QC%R3R,/m\Q7n?"jRPZ?GcCH\0n*V9WbHBsO`DI-s=ddI8l^
%19>uR!F?-ghNU![l+7rPOOuDS621f82fEs8;O0)G"u$`0_#lL4S'UsaEWKXM_CZ(8^f`<M@95M+;'^$F.Ojl\3>NNg,abBKV/%7<
%@i,V4h2KH&?B65JleE*seSIq.cQkkW*OUelX/@+D-8^Y."hT+1-Cfg1juA\p1*h;1p-]XE+of47<C4?iR@Cm,&-l1=Z@n.1Du.`7
%dc'&nM,$BK+ncXAK+ei_[((e*e')p'NK[Ntfbe!MdHH_Gh3'%;PmQCrGKBt@[8D*qe5Z10=#ma3@kpQfTV0?gkH'#^:0EX2+YPrU
%e5n<N.fFCA5QB#L\rmsH0F-139?(5InF![l\df1Y!Sp'PF8>T#KpJ=fR6_\X\DTndhgt;Kci@dmClat8f3?Kh-WVF1p^:kmVMaq]
%KStHkos3>]=o)Vd^SqZ"od4@e>Ip%"cCJ^l$a:.=.EQ[]4JmstlQSG`Y;nu@4*bsR?4\kM[SoN_J7Y!V\<V&mQkbl>[H&ElSS8*r
%-P3&Ka/V54MF\NG;.b,&I?2=3+Q&,%JO?-^,K:>RkMN$CCR*k>LO(1>8J*>^UQpIt3"@)=@nk+g6d]A`ge:rLiY4O0n82'=0K-T2
%;fFjL6_Ri/j=<%1[&J%>T0OR$Mdie+-2Q_+aDa@oYd00>/Rk;,<@:66oWNmMn5koL("Oe-Y;C9+SWoB57k,"K3d3XM^YaX=<]62b
%l=mNT6IoKV_;%lV6A-:7Gud(04[%.,7n7OW/[NLEPDlJjY%Qg`2:>Q:E?.c.67h'lKpLA!%?61m]eU;^$jgmtYMZ4X[/C+n5rb+J
%J*]4g5A(t$erM11eJR-6e"1O=q_E9[lHPDKK.V,ch!h*2a?$K$]!5rBiS!Hj9LhBD8LL1#iGj&b;OKdf4]K,0=]4:.`/.*0[BJ@:
%81s1+:TrIhoKTLj;[C6#J4[a>S"<B!/Hdj'/)>+6BVkXE_0F:,06U`a1UN?\5nsfQRX^AE?%om#bm!FD,u-V3[8$Hk95E"m7tII>
%J<,B7g,\G>b(Zl+KHD^`5,2&*f-<Jl&D6cpl#WCp#8>Sp++$YYB`C9[Z'5*j>N"N\[?cQ*A3.p1U[i/(>Io''Z6@C\#jM?0CF"&G
%kQt0)XbI&=&*:p2Z>aS,Xb:2kXL$"O^5Ii7DfC1PGSub6R_7D)f6J`V`H&ASg^l["R_;abH:38E*`mRCBb4]]fhBs8inb8Cr0a2C
%eQ?U78:&,pHr-*.M64+R.1lSQrF/]R"4uC6IZ"TCla`,^o(<d?US7]+.6C<3FF<?aXrM[]SA$X[ADVqrGREkV/@Ri4btBb;.V]du
%+NIJqFWB!i%t%Q+Drf].a-Kc-&E;u5XISGU&hWhhBl7PO`h%7442(^na`cCuq2om4&_\D5QR`sC!F]6:eU["6$7r\"&E]qR94Of6
%f`a@rB=us]&sYhn)>nl;XEeq?5"@P!^m#he8cFk0^?<>Tkek/WP5Xr4Ei\<JV)<nal':jMg"#.on,f&gCf6QgK]GMt&`@d:#"BZt
%8io*]qT'#]1L("CQO4jTPI8ER`i(K(>jkB"4CD`E]uC4;b]T=3h%GR:g*G1Omj^$E_@0sP,Nl(r3UT<!6sp0"j*\jO_rGFY5jXMc
%aLe_.W.&!i$3SC"OH<b;9BWR/VqEdQb3/OP>=)>p;g7mc2Ei#kT\,jQ7^o*M13gne)nFF&7JB)h-*V]'-s1B*>#(B>@V3r!\M#NO
%^D8ci'W(cE0#>p'fg&%q%>Cj;l&kk9RI1uD<)8>1:6pQ\KI/FP?_=-&$-Y.DVW3jq,Obet]A)SB4Mk)8?hF#-3]YD.:XP6fo.@@X
%(IMgO9oqK.nBBbmej'2:PRqViUfl_k-]r;mhbeOBLU[#6\u`(ZZ$rNHKAf6sd1'^j8&_('T@3-r5(0EBktQ!Z&Uk??cQ7qA'M!DO
%K7J1ri0[nK(tpc[?n14PrNp=nBW_apJ4FW![8QI.U<W3P`@Vf6=+D%2%n(,l!8NoM<NFJ?)mq#!pmEj+1`2Y#V0eKDl6iQ#-W!B7
%H`E0XB'>OVl@mQnhb8'r<Q$21Iej%On&fVC)3r)%-k'45g=M$0)2@#@p_fO"H7hP=9Js@pU_F)L/j22bBk6ns^0(u`hk6F?5A3]9
%TeacKE8g^7<T%S!D#B5>p"ZNBouK-F("!ISWG3<\@b'M>9r0DR#D45Vmk?r?&V'PbX4-4@$)C<r)KRC5&4heW\:aK0F5i!5GOg\S
%@/Vscl8HI!F?4n-b9*f=f`>.s=ZOi3s((TTWGk^>0M"WL3$l014^4p5)V3F0WMs3HVN"P[&>Hnfrr@tk'0i@P:=;(^%IeV3"]au;
%%YuIQQ.k8o]P*laU%SGAX>,$;O-0_Qa(HVHA(1OHAUg8,45HKJ*(W+f8FHjsD5?%KRW11K7GA:aLRoDYcur@AmF&2NEkkH/Sa3Ta
%lk&<,2=P>'rYAj>f^qb/!m_cG!.i;tUi!7\;GKXN/9e[:]2iB:O[0g5[o+m^*XaE+AIast)P<9.%GEmIqTTa5m,hd;jK#0?<_6K@
%"j`BB;*`tsCO*6cY;'<EL_c'PkdW7!jBYL\$[Nq`A0#8%.5^[2m>GrmW>=,TCE]$"M9iD/4XFpePN>t,"^8/h2qV.e5N8=eB3p%N
%p/tbY/q9;hlCi"&k/3Kh.Pqq[eER)oB#c>AE8)YsM19l(ra\'m%u!b`dPpbF%hGKuZ^cL&$7.7dP1s/dPb\^Of8%=@q=@bPZWbDj
%*.jTniqH[aY^nN/J:^-%T]NC0aLC&Ccqq?5XOa?JclrPkV]r@2VUApXfP$/3p+MbQIN6/[;?OojCiSI+E[afX6JTLX=,eRRR3dA>
%+1`cB@]QT#JmFLkGh[V\PZ>]*Oa?&P9%lgMgf*1W9"n5B$rm=LVbNKoo(Eu5*a461oPaK:nd#1N&&5r+PP!Ql0M_C*b`r@tA.\.9
%'LXL!o*N:`=S";T\Ri7!![F1=g@.0.K-=&*5C[aL>I!bu_==ZZ*&!4h@I?:mYs[*-oEKuPDICA6mYMMu8%d]r2mTgB:9s1\&!^?U
%\3VD.>F!k25$GZT_%>mOFrE/06p*A).2F*>N:b]9R/(Spfeg5@b(7#7F=p"0]CuS=jE#tDIjK!WVnRnHB*[:K]<Z]UKlUY8T1GJ<
%iGj'`V>)JrOsJ#&g=+I">])kPGm!MAALP?NoU0`\Yp,WQf%]&pmi/MIUPs;ie4,H2Ri",'[p>I(_O[]i:(j,c?>GK%&.*b?UT39n
%`iUpbZ(e<VT%OICpRo/ereE;tMYCRARqRpJ6<U_>,"%KjA$7`4N`1/NjPGOaP\R4A>fSH]rQ^;)@QZAfJ<%IQL\3nBR"Wq0ImAD>
%]5Ho2&#neiE_K1tHf.c`aO![?rHmAqoLj(B_I*2ad#=\3%a5rER"m/!\uK3<^o]_n\thR^a?)N7LV>c3Z8%?(oe+ah!9Y#oe6H]8
%98[_j1o%lT]`sRobIF:S:DS#=5B0XKEC[!O3Rm/Z0a+B&TsRBiC-GMQUJOAblkI7l(%nN.du"4Wa[hNt^?eZ^'m>n<qHTU=]*RFV
%=-&HZa?up/aUj<);^qhnl<GD1&ODE=jL^MlFels5DU?h/htH^=0Lp!n(1]%6Rr-!I?"%4Ne^nu;mB]sp[p?7CKgKEATo43+!hDt[
%-rX5ar$Qk!@^"B5I3Z-^UZDBLF2lORjrIGg9Ej[@#N1L`L9S$84hVo+*ZNVX;%K,ee%b\6Dcj$&^?ZMgSLd[hJ6pFg!%dQ97)\gp
%"nhDA%CaE_\@KKQ0H*qD-K(XhW6kP%T?.X.!?TkRidj6X=P#)9WdCW''+]/9XT4U[/jsoYNM_4ghWR`pPX"m61r0&Glh\=HmuKPI
%UR].6YkLhPBP)acJ7_QtQi&bkgT!_$TQEu92En.LM/FZ0#:cL]L*"Vnl`3H6fqFERbUU8":NZPqa?hYn'V1rG\uA=e+PchbWR?AN
%AS<DX',Q#X[h?1Y!&X2gaf8ZK$D*bbJPBY9U4I6<GS$M"_C40#"'Icb^;NBQRY[IIh6*uXbmd9>Q2GhC$ncut.b=4E4(4h\:$cZ\
%YhqdSo`2-V9hTAmONo+h9S:%`I.U6-;cPush;7-&,%Z_9p%p5)YH@l#-k@Uc+=^)r\)3%J-ZME[8An99TsrtAV-5-d"BXuoga@J0
%eYo+!4k\DP(c>,KP".;VZPINlh?N_b)7)s^?H88rcCoPKELX$Z.cV58ZC<?)^K8;!/en,PZ3O1P9IMZ-S.7c)k,f2g,\t&NM,Zh&
%K(VBZ$fIfq12uOQGf1uOpIXYU':`PuMN<Y\;b*JFC.k():MW-%H85A^^`Or^.N_>g6XID-O^kA-,nh\*m3eXB6(B$tH2o_XY<q5b
%=`0G\+BMIeB:HTjTdecS?5Y6IRlJCc?bEe]rlki81UUV0"]+><Aqf+sZk#GL/kq#>JJ4N$rLOC`hlsTTF%&th`E!nAmupScC?!c9
%A.*c573Tj3Zrp^Z[)]-iKOf_*bIu\s2K4%-dOcUd;-m&1[MaGq^J%iWXR9anKOY^c\h3>/%XYIRBg</CGI6#hr_YF]PVTm=Q8T_O
%2'SIBD47o9R)GRC%HN^7B<*kpR<(hLGhub%QtKQ/&V7uR]8TFqa_fgHnd71NUB1kJkC5]m0Z&l^`iI+_[$#h=Lj82%B(I_\,AjO-
%M>W-!$@1sO4s%kdK>LMZKdT:umYc.%X8?<e=q4>7q,'aXjV8IB@3os*"QFA<KQH$JRN\i-aruEMG)F/jNh5!T?R1aCT#*L[8@bL(
%`6uSRZY=Pe>F)-KOS]EDRYX;dMZ'596%$8/R1;o67R?[Tfls-#?(]h\3)bC,$9J)cj>kKT$-AR1`>l/0P.Nh4DtDRlkS24[B5%ND
%DF'ueOmdfS54,1L%7E_f&DVIH)%<>R0B(I@\@!_C<rj<7PM@GHb"O"B-p*LfbO!cd_YUT_7^l*3F'@6nh4B[0,VbkbH1u^Oi$8ln
%d(G?=3A_8mURuK-?RR>OV+2!b>PMXG3]!JGV`V@!'m("h4t!b8DFT"/btmKg\\iX-WiR'd2"gV$TO\L(8`RuQi5#ob3ft"/;[OiJ
%7<)Bo%/^!&qbKU[cKY2?!.lh+L!@em*=^)fL'%(8h,"=h<.H5r/tjSPn^0m)n0<"V1Z9\sYoUUsK24\&0d&dV<2AJOUfs3elrF^Q
%G8+B^BPLr]`^2i^2da$X42M#iR*q&8M4FlP0g8F.6g2b*YqYUJ@3'dB1TH,ekV,1JnL8M!F)k5JfWUO`jNWY0qq[uI(k'2WprWmP
%.$3Q)1]""1(h;*FEXo9&m+e,+dP)q"=@pDLQu244A6DLe=t,c0",`@<rp(9rN[c]4=RY-*hP3,edqeba-*hKRDJr-S7_ib326H;u
%TU9T^cH5cf;4F62Qq[B4'i\3lg#MCLU=mqlD<g9;BgEa09'NBBf@r$E;@D`R%Qe8k]&BoZBu.J%LLrj\l'/D-S,GK7H4.&?^ItiH
%>t"&*D?KL5[^T-AclTA$QQPsO's^eUZ_fEO2e#(Ip5-"I;t5@mT:kPJXgh92?c_R]#Y!0dLt)daQ*:dk%gW#X8t'/3@LZYe-4;2$
%[)pPk,s@RJe6T>@Z=<kg$(3ui.ps#T]p.H#IoLZJ9u%5$FJ7*.#0Z-r/\Bg^7A(FW%tB$6A61sR'n^]==k\p/nCYV5=`WIIK_.(k
%F7Z=Z%6b+d^%X_4+e&XtD:1&r!GRcXjeq;&HnV$fp[HVCGp<p:)5H>@KbA]o&f3oLiKjIlm6Xu,<"CQo;@O,faTb!1`J9A_Ili?'
%4Kp9k0bA98m,23,U)[M5Mi2knlI'rul&uND`c@5F5Yd17*G,Pu.hT\BbMu/.KG%')?&dRWg:).>bsrtdn^G\(:&^"_1i!?WU:Naa
%Y#&dfp.=#AkOU]O<E`Ssknh(T4!m=f\=9i!@UPZg^-8N?<&=NRVc"Jj`4o1344[:tnUq[5k9i"5R#2KL<(UD$GX2B'LrOVDAB3u]
%R+TNSkbB^1c2'\G31Re8^OV,;a7fsJ`GN5^O8+a?V`nZ[9p![)_7@Y[dQrDdYocZn!g6%ijSG2l]S*M<:#H;<N%-igml_5\W<b])
%FHF?69OOGt0$_0$RdCuXBXJf3chaFL8N!b6o'Ek]aWkj<SQZ`#$r+eBYL%g#h_$q7kuc)\:]h(9A'@bd]U=%k=,'E[jS<#g59JjA
%Ubs1+;ODm^eRhk7`C]u+UKsKDKc?8E[_o=k/95"\?cjjfdcpE,n#@Z#n_"Vg`N@K!I.2*_;9qfSUL\&,D9V0u=SM=O5K]Q-@n-nM
%O!b[8N]\`&i8KHC]/d/hqji[<;h1P.iX3C`Y_ResCIVPr7AdH]&<29@i&a5^o&.)S^_B<o"uY0[5:NZS8".STk8BP[(>]2DMm7"6
%+H<`OoXJ\\dbXcBMp31&i'53E]dQ6.G+t):0'JF2pTM#j*#D81<F($K$Z'fG7;RL?rORBqN4R*52#+1nT0.F;&ga0bRPksF)C$br
%n.YnRj9qIiFh0u(!?RZho;tQ#[oI6%bABsjSB.XI%=Y?Vrli7GO-hS2%D%3[-kdUT[LU:0Tk5$4TnR`o^'tiA3ku1CI?[!fAti8F
%H>$C+8mATnFm4^L4e:t:J^toXiD`[">X`4T47o=Q,(NgR?&hp.QW/%,A)EUBM,Y)VRQNa8L/t?orQFNr9m!^lAX:!<(O&0"NM8R>
%-+[7D)hsOP496<VF54bK3,d,^RX]>Krr+i*d[D6"//8I$VLQ`oRj4"8n5+F2"O]^gVfCIiji2SB`FATnDlNd1&ZfYVI2lH7/@!,h
%SZC!:LYpZ(C3j'Nd#\Tc`Ls/g5!N(@?=/clo&m7>6N7r[Zr>#b[ArVF/B+6(knX[/O=2:uKR'"dZBV[pZh46%5,,EMB73\[0<?#W
%71.BN9&H0l!jhSu6O@N"N6sb/f+)OR3-E3Wlbfm*/0=O!Da4eq%)s$&OaZ7n]dYYAY`S?W++</KI_=Z:i[>k%p=Tc`0nu;8cY%p1
%7<)S]E2`q%ZKC=DHHP2l>i4n:Pma4_Pn9WYqVT\<7fY#AS6rh475W4T*8EC*XU'HB,?a#0p15sSL]P)JVH#&5Ni=MB_Y\,ff4qob
%!<:k:riETL6g23m34hr`;o@cj*,":^%^mMtlpJ3EUMct8O[Yj\X)W?<o^5'1ak?=q*%G@Jl!PJ,pTU3&ceQ@lh5e'/+AugWpcJ#1
%-_oQs%,FWe.0loEi+)8Xd<\oT"?IZKipCU3F1(l@Lmn*#N#=FO6Jk%;ie<KO*M"iMs6ZGK,tZgU4:OOHU="S>+SLXAqgO`oiWV;r
%P>lfCadaZ"e#?dO8U&+ok^>N_R9&6a2AW&Eg=88UY9)^9U2GKs/UBY,4O<ZT[JDJ"Ab4:=Cq@rC`'.2S=AR0^Hcl1n(KS4QY#IiQ
%+p"jn2g8alNgCTm3\7dhHtk:dq@?d=du6f2]>"$JfmCi$XlgA.&C(HMe5k:W(l9]Hi1EtW/h<AskIlBZP"+=`:fjtol3L\Z\8D]N
%:Yi&hMi!N5KaSd)A8*['"a7gZ^^@1kOjd;B$'$qW1r%]eJ(EI"N3dVAZG/gZdbtk02&WNL3m`'=;n4P#EB&-NcZT1i'g:4`@oQ?!
%=\$M)!"21c/!1>0e.mTp^XU$smZG55*d4CSH;Ke+],;:K8j;'n?;('<-]'jHkAh4/Z@p"0f\rMaLW>\hjtZ>*p3nOJ\K-E7Fu6S?
%a9Bu$^n>/KII_.m.CaMmJj#5%TBj]!XT6`#kd/HNH\OSY%Z4cm:*qq,+9&>]5m5LB03FGQ^%7A&IVFJ3+o)1dmJ8D2)&n^pk"eZ>
%:fb`*4)#+mW0n(=Y"G3dCT%-f@Gl_99@3Xp:JpIi63lZoDE@3<T*X5u*DHjgmJVkj4u8(A2#eE#7RjC?fUWmo4bmAXAq1/SBWf;E
%-WMn659-9`'mTI,B:qcPM7i#<gsUoM5j_*Ib4'i/l.&0WOTD_<&U?QEdQM_FbO.Y+0BV*IZ0&9Uo>5V)<ej-!Q@[#SaMOhtTIA)=
%ZW'G_C6'hRS"\`?r%k#&MG6PF6bE4mL^9JkNL9)R+Vle%m:53jfGh'm8V<Y@n?(26DQ*;iV6Mpg$D$;*"pRsU]Rcd*7.kOL40ak(
%dsc0XVb5O?>_KMX=h0?2lS7@%"IP&>dctrdr9)=Sr0kQopuI%ql)V$RCX]R1FWe"*h4f=D)be\#GKMQsPeXt-$q-o=RbT/EL%L.$
%6.#O<-`!Dnh75X^5rtPLXe[G2=ts$Bf2kf6%q7oEeVJOs8UFat8YYbuUuZ/L,c34JW!A>$Ra+(d>h&nM73(LaqR"0*aC,"8-BGbT
%G[a"?UD7<bkK4,ZCpPe"o#nh((2s]9lj`Ute#J;>I7f4M4]9'3MXZ+ms5=T#gb5Kl]7!ZI7(o5\.c4q[f.&mq]'c&ZBD4oHShcth
%%]4#h.9lQJ&:6f&6u@+S<7RoG4,m!rQqL&U2rn6_7,RO60!"5CVe12Qi!C3.OIhV8`?XZpd6laJZnum.1c0l,h+)0j>S(e.M8>!E
%!Q:a4LmYC.S="28N)L!+j*jbbV`T_7#O25DG``X+l#H>`d/Tjp6(:Q'Y,a5foE8QtSYR9.-R&4I&/P+tX7JLhi2mc#(r]1^.;l-t
%1_cE@g0BTnO[WBk@<n`(qm^R>2!Q098Ngk#MVnb!EM1:="`D^SM0e[0U-Aq=K(jOQjn*-'ag_,)+-HdDg6:Hu)RW(T[pdkbPl*rh
%)]=,YcB>cb'?Z4G'Hl\,XWZFFp1Fm-%L\o.^^!1"S!Q-4?*s813#m%DCtN1IA`S5gCrrH%W4X_<?>8+6=:.$X<m>*/)YlJ_qBJIg
%k)8CTYo\Dc&951k:k/Z'Xe4PI0JaTS1<u;^+q-iB)`BJdVDh**1"YU[4m>g34VspT6f`9@K-IO%i'&)9$#&bkkO=!IfYQS<oscM<
%dakM#GrD^c/`c[;g$G4OAKN@T1$fla-XY1ElkI(MA!9*d-P0CAh6_9uZgMo/nn$+,;@]Jb]$!_mC!C"34nU0mYE@FH;eet(bh>a_
%!Ol1c,m,Z)k@*aA)&gmHpG8Mep(TgO##aui\)R#4R`gTOP>oDi,j[k8jWX@CZtA&E37liJG^hKQ3,jB/UPrk.hR9+Qk?t%Pj>@)U
%7:MBDS,Q8?0u5+*8"\<>0Imq<B/#h$E(L%9!e0kh]irWYM*;>RG@YN6k$;YP*>_mu15B*IpkS0tiMp6^0NFAV_JmI^^$"USg4,3l
%.kBapenfYP:kG9eAg.V*UU5t!i%Ah#7"J`&Se)_gNDB'<R<EFcRD]9;k`IkFL<^NAmuQ*D-(rM6$Xi)"`KJA)`TI2k-#7cRcV0-a
%S)o+fK$p8lb.Yie0#_ZC>l)NadCl9P)mJd$`L^56dnf.hpCOD=T2.hMpY_EMX$dgUP<(mjocgH0)tD[HD$u&R:;![*AP[Fb[u$8a
%PnHoZG,em*L_HBP3o"!Ni(M443U*tP*7U5>:jLgi.SU?n-,DbNONsQ>5!.mF,#6`n/nEjm:3k:ZaZePn:B[5q=8bQ'mT!@SU2MFL
%a]Fdr(m$8W(A(Vt*]pt;`7#8oGt&_#BaTH`'Ps)$E;\*dqO4hmjTknmO?sn'>1`U3X.kPK^AZWqgPpJ*F`N&qrLPfU.b.%XjA:\A
%kZohh\V#Nn22b=,VAYP&,%Z`$k];/S9of_X<`Htb\NZ]tN)K-b'pC?J9RR/&7s3c#:_IK]S9lVfYQTTbQ15Yj[_PK+10N+Y8oO>@
%!56Ns^!"1>E4SHks(.e$G-E*'_0uW3Cu2X*_k9BbZLNf+noX#2s!J!XUhqEnm2g(0aJ(DK<>`=8O"Aoe8nQFAA@9ip>:[6H(=Hk6
%jVWJbHbZIE)@,c%TlLRpN61K+;;QV%mq1<G3Gh.sh8q/&=!_=<LgkEQ>rYi!XENnWJDV'aEE`@aD-GgCb%An^g$01G!SWUcrQf:9
%'is?!9tLWpe]K1QEum/*%>MJ%m>Yp4SV"J5X;+G^(dIDR,<aMp/C9.L2F4(L,T@dp'b.rY6&+jF/<]>_M(#<o&Nn8J9`p3g5-rt'
%;d94)!;<^*4*L:sda<Mq";k`nK6$(\U;=*d^S;dDS$W>_ZAO;fbSsI--d7B6B!qEd:OVrP"]X[3T:gm_9CjjS5;JSt)=Ot>:F`j2
%/*'j\\$cr"J+<L<DC@B$YkNqRVORe3!XlOO)r$uqPmJVu&C"jpeqd[KjRFHjIA\nH_j;G%5fZr*GNi`7l(<s;\4_JD),W82G0]]5
%b)V5Ukirq4$c72@Q+OUhEb2T+3uVnPD#2T;aq?KNo?ft=m'6PO5o?GS3)T-SkQoej.'6f+!aD,;kH<\P<IS2XKTi1cRf:G2)kOA\
%hesn;MW\i8UYs0An[FXl&Q.32=2Ah[+[=5sDjb'$9h'(a7&+t;]^uq>mb"So/J(Dm8l#:Q'!798mN[neZWglf%`*]IKY5TAK9MMo
%G)St:9I)[e[%/r'Np%hipokAP:f)o38@DaD"&_^OS_p4Grhn\n3HX/Nm)9"G$Rfsa-n@kNWZ4"D1X:^A7MpEN+cY460ZF%8OZLDG
%]h@(;e'AP><P7-:9OPHWSPBE?$je;s10;2M%D1X?>]!Q1rr:_6QW?bB1qV$@l9F&q%ARkuF*BDZWfn2T"@rV,O<]m@P*2K58n8[a
%oY9k$f)GSj8o\L3(?aK5%sr\brKngU&Hpn`0G6@!BACMb:!b=VdW`dS6I0(R;n2J3Z=rR9S+t@(WR0%l?U41m-uGM:SAMI$#Y(J9
%AFAB+c_[Fc;93BG^Vh,N8:I</ch[:NF&(-66al4I,<Xq'\]QcO_$LU4;rtJo<F<;2'i1)Ke56Z@:],m-*+&gqVrpLkn1[7g$$#"t
%i!Z?rK*2Hg`AK0G\-^,(KK.s1KHga[d17ijF6^?_lnG[k#7Q990ff=)k&+fgkbuE>iOb2@>u<;ghYY+^L?ZnY([nttEj.o5SLXd;
%'_"VrndNc\K9\>=BZlf_T=$VekW?!d*`9FJD4$C_Gg.>H"7;#J?)dS\"akB9`.Gd3\T*`tjd)HaAe@fR+M3*YUI5o:Jgnil?&PJu
%aS[**nUQpim?ej**.pftoK&Q:GZlpm4.N5lZF+=\9!cR[2"i?6@K6\GZFalk9A;k6>X`]0duF=c7gTn>hJf-^cKBls%YCF'bs/CS
%KRMHpqo(N#Em0Ek%XW_@WmpFIT6!A[$VaRSn3*X_.lt+CSj7Fa-R2,QBRtbK,CY-%c+0aRam+IKfX0(c,c:](-%mp"+lP>4@s4)+
%kg@iE,l<-Ei#O6Zpuj/ei<=b)S.C=QZd1`U*LWC1k7GRA/:loU-Y&'-_08,$"'la"<si9;4[?e]WS,M[(aKI1OnKSfOLE/&<i4=B
%d)BqMm@KB;/,bpm$a0\_iX.u@DE9'REo/5NU^D?I1B9=Bj`bN5aM%IDY8:C3kg?E<"6^p/8AI[#+,.T54JqrbRn]g,R,MAK=JT]p
%/]NDb4//,t1@)RWKAPprN!fdO][k<392E/[rIpT:oI10UMB[LkA7L8!H.m+JDbc.%QnS2SNhRC*r<&mdYM]Qo0c88IY$T1/EAL*8
%k48f1iEpHu4BfZO:X<9o**Q<1'lO,C@7H8E-_Nfg&r-2d!E3j?790R:PXaE%Sd>"PfK2>AU'TX5F&'OSc`gF-3l!_kV$mYJJ2j%,
%I%Jj[1ACa>YT']I^lI;/pV_1o8lWHuk^G,iMC2P+"9jO!E.^Z==BJeRQ!t)@NG&?i25p=BBomm!G[N7poqak$df41<05mbWS',(c
%/7WFm`3*h84?K9UDi*U+4"q\(mo#)0_j:]@+Mq7H8@cj'c;A7b?(Wr:PM[;l54kef8dTjiVu=KEk-:\0q.Ir,R=@9jGc<Gg@p5[V
%+J&-^KDE"Hem&)IKXm+U<1hMAWbJrS8i(e,rEMS%UZ0'ZcY'4SSe[5T@F)U!l+J*sOY_.=9ZgW^E^VQn5,l6D6PU^A.M*)GS//M.
%jGE4[;7j1Q5&=HaU,Y<]lWO8)/Sm24;,=EdR5MhNEl8lR-A>*E8Xl;9iHqcSfiR!4qMR*/:.2oH#hWG'-taYV5W4Q85p4-a*7jFZ
%,pfEe2H#%W+kOG<JH&Pb^@QU!Gm=(HduL0ipDS(UI@B3/cY")'3[T;(4oUV@lD@(ZRS/N0T[NF19o+8-dRbHbW"piemEn%"6=>']
%])jBT"G0V#5-f?]Gh?Cu#^]mWk!POZ.W43KKaIj:k,rV9g?tsi?'J^0p)Qg[i=hVH:+h\M1Ej+[S$*JL:@OSSX/f!?h3P31Mnj^V
%W'&sGGjQOKS9tt;l7D):R_B@bQD-UY23b9M6[W]@WN&S\=67LEO.t4,m>(mm?]Vn9jj$/gA6tsW.M`UcK5OT]Wf$bO4\aP,ln6g!
%qtU.j>35i>=;&rj7E&bC3K9u[/0>7"0R"s2'4?5DQ@:V1TX1:X[)kcGioj4kF!aADEUpG(!E'&5c#.YiK;,ZDDH5$HfalXrlV5]m
%M($/Eg^2HF1EoYNXIp>Hia'OWF,p\*%ZU5Ng<=e@mO%3T7Kh;hU?ib;*"+S*%$C1Ee76^tmM<>k0*0_]R@?HTNQ34gEg45[oq8]A
%QCO(f7'p-"<7hq0+in:LY`co/gK6UATjt;'3cee'1cfeQ#[qOScO6D';T3^([>pahm9--T3])k1EU"QAhkf+IKqh;YHKpBE/@U)o
%L\`tjbUa[(X\Qri;n^.Z?HHA4F/&e4WfFMuq5=IY7LA6U,DHteidbD$YP*'U,c`bok__>k1h$-[f0;)&c4Ll\Lm<kPKeCHk#a`eZ
%5.1F<=p<`V>u^&F0oZ.qMQgJ",gK<:Vn4;O]T2hHFXLJC9tinp[;L(GE]Qt:Oa_+8`J'$]JD[QV$B+g3\2QV'bBJo"a=)['7dncg
%RN.Z#&'747E%F#-*RXPqX9^@3Lum1^j6WKerENDfpSoj)H6ZSbirSc#A><e"iCT0CF>N(liGj?BD6%dF]$j%R%p(!\)tfpY[<)"S
%Gb$<]n58:XmFr3@Jp1l/.k83`V0BnU6F`^JL3^aT^;_05^>pnABYXSo%\]UsUS:WR&&2@TbSgAa-If=A`S?e=D%\aZ.QSu]TCo_`
%8W92n\q`l;<#<8AO.ej*oWM/q8Bq;I!n_6h47.TX*p6gIM^P-==XP[p\1*WQGQr$X=ur5[]ft_aPcq,0W4p+<SD%@d<btiJWq'4+
%!(q6Y`SeeT[Tc1[MT)S8r!\P.(:XDVa^KB5>$budoZ)5R=m5F,kj51k'>-$><[kf\_-+CF8ENQ860rUJCP_Osni'.&c=4%UpA_)B
%nGW)(Fd+DJpiQ8:R#:f;HYfR&'0M4R6?5J#r#JoP_eH4lm6+2Fh<*V,`,3bFc1stUR/+@O]5TpUVo7cM&eN7c'!GDAMIlqX6\\.W
%Pu^QlHA*Rc*>(e"@_HASAi%FtE-dlB!XnuQVDaVYpU_R;>oDs'dk%A6PoK_lO?OJ8N*:%\;j:53'h=gLk3iT'$o'Yt2Z/OLJHlP]
%.oAC)gu,]@U8RV4.'DEPVOb&M"'K;Mig*$?k"Uue*J&[6[:aY1.`'K'l@I'j>265J/`n(*]#/M_(G0f%7/6;$$4k933[0K,=ok/`
%%MIliT\iAg<G,3eZoA5rV\6ps<YBdCg+j]kG@2=3995O]<b#[5aJ`kLX'ufI2T?-`UR[s@G>0Dtq7AD3][XgdgHl4$=:b8,!OODO
%?CB!Q:=NBsa,DM):7!)90].euL]Tba*H(JMY]'WqGn-%kT):q\Q,J?h,5jOX>8Sk`2O)>?pZisDGRr4>EaSmQneluT>:F75BmDY;
%3:?;X^V2>mc?.OffbYk78IVY37I2EcBrc3R1#E)#njs%=aW`G`lTqeU]]rAoirf8V4DK0YO)s,h'n<8tA*p2WInR,5N>6)&5n:Sg
%(RdeknQ**DSe*IBQqI\1^e;9XUTMC*NIHj97msuBHWH:%F>sfZ"k[V6#>6I1T$*WAM\(]lk7d2qOdX8pZO;iAme1j9XNN!<D^T=^
%'(K8i8%P3\BRipM*iU%)]oJ76gkUB"+HpD"Ml?*CBSTZPX[s'4W+95uR8P(;*4Zb7Zhqi`(<\DhVUq>7"+@>#--RmkkZ_c#p%HdK
%qs!V\UTAQ<G>%T;?`<A*+>ToC)8ZDA&-Sc[cVCC@KeaY)2"1k[F>b7bg1,=`!E'+<!Gk""H;[Yh;`V+!3if(ic8)Vr^tl/"d1XLF
%)%AR["`GJgrj+$j\FrE_(g,M$)K+a8k'G6!XdkHtoBrBJ)ijU"bN5U\"<s)@]\,;t[f'*.bp>E@T]98],*KAc*\V5S'uODIC.VBX
%[=B$(&SF.d(C@PeJX5,:RAp8tH**jk(1?5N@f51c^O4D"3$dWN%*SaL9Op-bA+<X^%&Ihj-+BeGF,Q25qX%G_'ER_MqL2D,bgt@K
%fTWs;!HEji"o%'d`V<>ect^D.MYdc`,"h.ga8Kj*6Zc<%[^YT,Hg8R01*[p/^27ToM,VHc"Fq"\8dUW?RE&@C#pWM%7DMqmZjk,&
%?<oV1a<b_UZ:DJEkMr4+3APF\f$4WCn.=OVB]k?H\+c3Biih\'AYQEX!&'GT68jaqX'=pLTA@LCN4+L$\S/!Z=>TK0)I>jk.;:8%
%dp2(Hf@/^[h,[.3g>nOh0FnPfJoN^"PVAILWb+33^F-PSn\])mgs6kOKJGg'K"\Q@@E-A!,1KKY-LdUqd<e87FH_9XE.AZYI(`_>
%;$52,:sW:Z[=<FSp^oL>aGe+7iIJuF]#];Vpa@!2>uG%!diqQ+oK3DV\%Y]M:ZpRHGMd3]VjS1_;!m<sNm*2Tk7<2qd@mNG43N61
%^e_.InUpMKddGa%NIldQF9Pphk5:b6^FJBRStGGgdmZp,Q(OYqP_IkU2[*$$jmPK7H;3!cX)j[#`<,eYqb9e[l-RoM'W?YkK"j4L
%r[h@=-uQm6o(!!Z'h/_k7et9;Hp&pWqa8`"][N8[(>1f4*LI>s8<rQLeb=F)^7q7HODB?b.9dG?<@maB1_R83dL&8NTJjM_)hT%a
%X\fU0b&7RnDlOL6#YARkiESYlD%T?Rdqa-]^$SbG7HL1H.XCr41`I1!URSSs];QE#kp'uipPHPG:D8X!Ui:[)M.a^sIm*<BP^aG*
%q`=!gn8KH]lO2.ZQC)P`U=6#)EQY&\"?5?U`7#b_$q<j+7u=hDk4/EM8Jpg.b*`Z`YlSZf,H#*rY*dk4rI9Gdd>m28(GB@5%2)<W
%cRDsODjs:#TZ(7%%.<^8Te]nc-u&*JB$lm,M::W<2cRsGr=q8'A4)RgjW7>Mn@mL!5.='7[Xtlm!2WcE*k)d9:'u->qT8ku#u2W/
%\;Z#V%:0oM@*""KcnI[i3=9?Pb"XC+M5+n:h8b*bNXqcN)+IYY-EHN@1:^WeXiOIM::a[_CRXK^jgu`=`Kh+q]ZG2^6*L&b?75^V
%+r_6$gDS$3E.Y.M[fKn8CC[s,&cF:lCjIR;BBeVe4_Y9Oi/AZtG7L*u""7S3V*_gU\.+!GX6S/k$LksH.X,;!=reF3[Q$A;E]DbK
%=GJ.[@qW5ah1kGkOhH&Kg[$h'YX2CY#jYJ'!f`?FY".=W2,X4p?gBo$,2mY[,I_ZrZS4^d6hY\5YBi<4`&H(25)\S_RGo4Pnh!H9
%DJ&aE)tiis3YPuChRFq/IKf6g&qgd^0NY\3Lnbn,ZMh!3pO/Ac[/Hp9W1:Z)5<h*T*m%q8fipo0j6:@(<X1eBdnXLiO3&Vkpf5Il
%^"(]AT@u-&L#b9jIlrd2en-nf`t@ahN9`>Q@@5#??mp]"PE9$#:$/-tSU]"AcR(bj]Q&+ujFlsF4BFS8]ngO6k*\P5S"om8lU1s3
%-BT3-min=UZ)Pl)B2@7,$U/H4F*'IG]XX5[)9`5AgX#70*()cq@"0;/I$Q,5JtQLj8o)B"jZHmCc>RV3MNG*Lo#a>MP"6_OTg?H5
%#Qf4lD4K4Q/OU1nQ3<E9KgW,#<njF7]bjK)80r@,FsO=BDR[TT8oP3a@oe+A!@g)&0_7lK+uu=ud'4d[Me86mg)m*bhlB\g:43\l
%V/eX=,(H>;P)VMrL\]&8*[U[P*kI!DfFP3RrR,'>;:NU)GLbP`gFsaX&.Ug?iE+$*0`U[Sc^Or3<B:ikb);DL;gK21p$Ph/'o%Eg
%odR30`u@WgZXjci%iAc20J]Dcnf("aoNKq`,.RbcZ)ZS#p%)&8SZhD@NO:[ms!GZ0[!,C@@N1:_<?)4(Etp:k*'9YNRZBbZ"i&8h
%X+cd$UZ][HV%e)t^e3j#ThW)R6OSDZeSH$c/A>FgHO#?'O#L;SJk^Ti)1P(>s'%)65keBt3#6P\a]O:O\0JW2\SMY@I\e7*<M!p"
%5_8WfdnS*ikYu-XI'3%]m8sqULA3n=^GrRTFflj&'nIX!VV\bpb.ARsQ6b.P7Wog60N4h(@PQ<lJ.g2RL,/]5%K&Bf_6gq@1oZkn
%1"oin8++RR4Kn?:=#:Hfi:25tk=X(^$*,q9n[YC`k[E?s+cXZL=n@ar]luQ1N3ss"6(`@$Uo,tW/l[ono8[O5(DQLFYpea#$>f;/
%o_V5\*rBu,RQo')TD'o(;<c"`AO;?G0$Pl@T,S*%'li4YSh7sRnTA+PZiFkO15Me]'@<HOHr*o`6S5]j&85,jOgdl[b\`Fq4^7qG
%4dF_5%PS-(9.R+n5uHgTm.rN5Y5n.d<2k,7]*R06Uj2+kA2S!^+b%R2I"n,Nr=jAocKq)5*HWS=NNLmt<Gth3(69u)b)T!Q'k6tD
%Y<@j[@Yf:mc^MH,[p40ClJPnd1"!>[O+l;A^Uc4JNFM,<?CSdD@R;0n%RMU<j*$+,XV5B&jBRH/;jsF]8`J2EL5LXb:=#m%YK,Gm
%Cij=9ePK*i0=b)A3j\Qd=KAb%>uBbfKaDSqVaMVh$O\k6%6mtOk[a?ulO;&84jcL"poqLAMUqCkC4:-YT#M2hcd%abQ\)LXrka^2
%Taj*u:95+R$DR`ID#?2F-WKPSrGH]-a2dY;4WE8]QmqC4+rhlsY8TRIq.'lgbB_p+-m`1?+_l'@oeb9g9;TFGCZW4!egp.,91K&<
%S1c)l,lE(e$r@'J&$^@U:%EB9Wgte-Pq5_Fo=0^mgi:J^I?^1oeO-pG]03t@^#!Ec,)g.DY<CTA!bc9&)'j(^VQ0!,0DQPFShieY
%Ul-\gFg\7Wj*DJ4+iQcNX&^m-^Ms!WcIq8A`hSHJD.e3%L#Ne3Xs2_5e[OW!%T#_OYU080%/t7OI8J;o3RN'+2.5e^@t5V]VPc+<
%eOR@MiEUq<EMY'/^rJ\K?qe2L]p=H0,PS>1n:"m2$9s-2itZll4Yl'EVS;3Yq=5=H!!'0*3*Z>VTC8Ofra(Lj/.e8_7--\i!uX79
%X39%Z1eI0*7!dXH<cAK^mfrIXQ(P:s29M$AISG/,0eU7b(YOjb;%&3HTh5->VlTDp#Sq:.S+oDe;CUg(Wd@"R5bkqG#Z>t$9p&h,
%/":X@J;S$BT=R;gQ.;&P+h]l!)UFZWLTgFfVihed$-R-7D`<Ts=+7\mDu\<RAUci`p^WIDptR24i=@,!Bs3^iE2/6T<,HnAWmZ./
%##c'rGnb""pIZV-&f@^5DrLV>'QVW$Xag:<]6:3@a^.C]cER%a/i,To0tn@hgp'8!d6M&O&iOl9m4L<1:jeGe3XXK>k$T<FXN)[9
%1c'A^DNJpcLd4".WV!cpVQ[foeSAJn!*/>_H/B27:aM?SeI;0HC!rJ21;e\A[/`gA[BS>8_HOSLRtU8e,E%EL4YQ\O:I?2k6=r^4
%WTdC2FRf#=E?t\QRjJOe&4>niM?WiB?E61JIfmDPj[(,Snd_!ug!^7V$QjtB1I@GmWaiB#!dg[)6Gk(Qii/s9S(=(G?Be9I?7D)s
%d]:i9co]nL=C6QLj78/"QhX%nnV$YdMeER=Asr.Y<egqq4-\s3[8]ZU^qh(+jU-u`8=c'qi!]0ife??31P#27\EYYBARm*)kPN>X
%"`,mY+mfki9](jLMi&Dn<smpimTt?_HE_tfE,/XdhRQ_'-D+g:]YDr&\_n,aZ.J#FNgq/m=;dF8-GOe0*/DF)[m_R&h#M1k'Fqmr
%0&n9KA?\GtNIj.U5-<Z77bt],_!C2gH#.F*=_,%C5oARcObVL[pSq%Mp&^KVO5g!jU5AL+OqrGYBpPW>YJg/L+c+I!,mXB1&,\Y*
%3H=?;GYPZdl8uCa^=u9;Q[i,)m8'X)hFeZi*Ieq\dH,DG[Mq)+[,RiSbZDu'MoNlQiWZ24Cf@hn!qm'6$K?Qr\oV^e=t3gZ1T5RF
%PBGqQ[g$4JnXr\?'B^$/HKN!i,krYH1#<U^gK2'#Ko.EZW(9<m[#abDIIUpF76)R&b*'p%7*QK,EK:8D,<HCTlI/mm7-K"EC1VAG
%6a)3K?,@tIJ[IKujh$uXPc%Bih6fbW[)`q`(6dle%h"Gh#o",cfle:Ae^Dkq@L75+8c0R):X$ihOo%a<j9uZa8#iH,1QrZWUOlEK
%>30fh0;2f(GdC>F?[B<W:#S5%mrGe3&6-r8U,ab_/l11[<FnQW:K9o+-K#4;)4SZd,9\16<>h!)4lH5<fbFn6T'5<8g+:N3l`hp%
%_-36nW*3r"h^!=3=j_$h%!5P(VrRk?T`eQG*%srh3Z].o@-jkC:9.G?P\oO#@'Q98Pb(Um_a/u>+.G_VFYI[droqYt<BP]&p@nkY
%KD5Kkao^b7YbV[>-f$8WCX`D<h]QsL^`D9FATmTUD.le;'8%C@l6t48g)JVl!/T4FR8JN?W)&Ds@lp*/_AEEMM812.F(Trkjb^8S
%PE"tbX9_P&QS80-%_o2E%b]H?R1F&>L/K>KaUXl(Sim,ipmUZ/J2%J>KVS,S%Ut8o3%H1.Hfn"ESREFUqG!()jE6'I,oR?u?M'$?
%Zg6[=iMf^-KkU.6!IG'S1UEns.0@.sX'Y\GAGXg*!NdRr^-/f=hnf``KcX+=j_p0`_Kkm2I\BIhgVf^or]*7X5*@J4cZp(=)%J6'
%^Y#9*/W!Ct?f4A$ampIW[0(f-<DV69M8B?\]I*C#e`D!8Z?@^'igcK56h[m14]uc^I*`cTpC4&jms9g?<&/..mmnOq-PHWf&:nl!
%;iC>A^mf4'qlM+EdKft+;ijcLgik"\>XE#8"9%8-q]NrT*R9k>0hb!SMdtPe!nl/"2N/^VLhC3!Zm3/A/eFLJ4YamLT[\,2hKRtp
%EMZ#u`$C#K@PkD!g2uATOK\'YhI^@3d30g*0(E8A1^Ye74^2GuXAsn.m147PF!`M>K?j[A']`j1)nP7%6lHOcBli^O+.kfuGGN:.
%S5L)3qEWrD-f!lf4%e\N\mEGd'[l2lIeYbnF*)^^;8r$n*Fa)%8Db/;@(C^1))m!"N*\%8AI(+!AVeVk@Hp[>K2$@2BRZ.-6l[Z'
%p%k3_=OYAKQ35"#O'E&D#'6[;=BtMC;#Hh/A"*-M+d6^^0s/!lr\X]=MOPb?H.9WDU^l3X2Hl@/fhL*dqKjQqVWZF1nj@bC!'fTD
%:=Z.61'oN)p!Z&:XE+^g)?g-Yp]U2md8Bi"XaQH.Y<p2s3/&jD[tH4]dV]1lhAJ]G^^BSDmQ)20BX?4FoS]u7'7GojP!;Gb-cd0*
%CKat!kB>IK3'tTLo1'fqQ)r_$'Go>P@Nmf6?,FTZ;X'*sXsY`h;p&8X5(_rg!@++CSOB?e^p/*WG2-*EVn_sNNSNR'UhumsJna^s
%k4#mT/)dV$GD718EqR]mVJ/OL]%sRrh/+A=5C89nFU7]JF64('@S.)"+TThE>0#2a;E?%24l83k*>fV6%]Vu.SWRGpZY7r(D=(G?
%)X=eLR$09=(kEkeF-1eU!/*alMmN^Z2I(YdhQ&.i/9Ij&,Niu@M,LC0aBgQGHI-+8%U"2Ej/"@fe=ZZ1dqtD4i5n<2hW@f^kc=2;
%K)>FBDmKHUkFfPL<g/=P*QLg"HA\k8?4"F)i%9e4fsQO1#"]"Phll`tl^iA+_n^Jcro@^lUDpNDPQLR,:51`G"pEdm>'B$uA1>[`
%Rd\N(B9g*?K$u6"nKncHEc^%/_$AH0.2N2G2+AWDUb;o2Uh"FnI*#6R::(`FW(1.*Ye,4kPD`GYZcs,jco;9g.nO?qp2F-,W$"pn
%hg5ui32arILmlj4,D[_-ep3=S@6i-+W+D>/A8SZS"Gla>QtoN_4#74u-+t<ESjn--Kn8oi1#RcVT[SK'*ANf4D<"n%&ZB:)*:Wl=
%JLp6&lKUH+!,n#X]$(46rr-jb-8k8\\al;_Or^areeDs,5FMcoXF8U]iY%uh>,ak?J_)-A?!<OlkS@YEe%Vime6(/"i1*60`F>3G
%HMo,Xe:NY0_M(CFKuO9`B)pi%<"Q++7c?#,g!!tJN.sq0o]K,UIu20hW'&iQ\cR/Sf(6s):jML'_pG.3.NeJ2i7_fOE.coWFX>su
%QL$hK[#^T%[T(jnF?H5\6"S>fm2:Qhm+Wcs/Yp9h,W-/%3*\IlAY3T`a[7TlrA],hD"'aiDhW+:hrUds*\>sc(=2s<!&urOTc"><
%8IfNeYl?@8h`JB+,.N!G)kG'Xqq\Ts4r!JtO9O;5W9Ff7+dSm\QCrWN.o8E[;G+dmOe>7#&[%!B<_:0R<_B#RdZ`9/gQRe!S*t--
%6st<a^?<GKrZ&j!1ZM/m?PsNB]d/;8W$7%frF+!hmq'ht47$+d12_RA-^p.%9:>h37aa.Fg)2Z7I)>BE7e\eRTY@!VU'a\G0B'Bb
%=nPDNbBI9=#!G/npEk[\?&mj"P[tl/[nnRu?oV@]#/Mlt'aL7!#a6D$.KV\i3@^"d(UNT<@alYfUch5lAN!YRgND$".<kt%%[.2:
%It`rRB1-8J4j"o\B'3F@d,UgHlSruM48U&*!**6fS+n#CgYA#mWl^<S0IT8D7bIMb35]Nt(rGX%XqJWWA-p/moqXoCU286IMo1M"
%S3qcqpFOjOBRt\2\<>u]&a^DR&`j`W+Ha)bJW;T*.>]tH>?!;f9[:#*Hf.Mn+T[Y'Y?5?Qo7jl1(fe1&nLC/D7;26.5s;F7S>4)?
%r@H#/%d,Vb2+#*oX]GftI"&*"@0WsX<:@Xd+qce1n!W$r&l,K(EWbp3*lh)WPXo:maeX/bP^?MJmAsQS@f#+97&kZ.1b/'KN01-R
%oS>RY?>7HU=^P2l#[INoV.Y+5Lm/./+HIWt'kDR]!K>=`^)]2gbYTE\WaS<QQdH%]%W:LAI+5>rnW=a(ZFP$6HTYWm*@QWlUA1)(
%0LhA'mUJ`&OS[8(eFu^GHDM(GCIg;YaG[4"bOm"F9"J\'P3.d(`/LCN]e5Jq;Kf^!HG?aVXr-oWK_'S/#Hrebe6+@SD-"V`SLUG+
%DbS/kmQ_Fqe=9PVFXOj?=S7*()Z@BT!3O%8KUVB6Yk2/ZbZR&pT"$Y(NAcHH$ODZhd@;L2+cG>RN4N`Up52_HYY0D*a0Dd#'a5\?
%'B1KYEB.cs^'(`I;.sq#ZE)-M>iX,@^[=T/W>25X^q[&[1G9:h(4tsET&PM)p2"YuYAJoZf*@*',Sqp;antIX-W>s_@ai+f&YqZV
%k?CE"CW/^^3eeeSF$sD^P;dJ.C/kqOO].kIEtFH;ZRV,Qqmgbg7CQ3VLE!%q&XIs5SeMg!#IP;BV-foR;1)_p;"&5rPl)'::>G`?
%*(T3/l'21?L$]H:`O$!V9]OT2eZnEk:rJI)%'$FoO_E26")#`I1EooDo,a9mE<-d+USopl"`p&iZuc$#2JM,t3KLa8HTCN-e0_jq
%]Mi:'J-u*#<?hiTnLHWG&n:Y+4_<XE(KR3X1TaWR4OW(V.nK^fX&sq@+RY9HAVKD"&hoOGXYKdFCf\9W:X@+sM+CY-.qHtCBr$2E
%&rZ2AM-RI;5(/B0r<+BpdU[NY^p]S=W]Ves$ja^)*i,:Op>3bCj^GLUhj+!,>q_79>Rcqj^[eTp@BmOtO]Xc&.T*Y-=28l^X+DZD
%f7&*jJXTc\SThooa&1Rs9ZE[.VXq!J_@hEYg:'/sE%`5fIO,GSQT7FnIQDJ^=-Lh$7CB2:n,?"Ni0(6:G=DC]UDjkGQe9B@!j<>t
%P4k;#L5G`[dgibUP93Cm90F0aL:g8sQ<2X9]$r!qQgHQt?DD$Gmp5l=E+s)MLf*^OP[%+ZN.`,T$T<GE,A<AJ'mn@]mp\n^XQ!/I
%[0NVB",YSo_;9jXA?mE`8'f5\;81]W]VR-Smi<C:mk'oNOnQHI+'rN7U%TI8-3E_=7<HrXnnnX+eG"QQS4EL`abno0(QbZ6S98cQ
%5?0,E9^cqu*0u%SUtqelI7:5(e_QbTqi2I!]X]H!$05]IH\96?Q6\/3@.M9VYa7WBNL3N`_bm)%CWFjlK))gS\?[_K*r"\l5o""F
%7u_)S$d#>45'u./T(Fn@.lY?B/-0\7'II^pYb81t5KLJDLT<iajDtrm*Tg6epZS]ifQr)>nG<0kNYPXf(3O1aqYmuK#q5i3mF>uH
%h4T;MpD"C;Sn\-(TUhC6oLaG>[KD*`YD./TG:9C=;3HSHK92Ape'D$Cn'NQWF=&=Y'fH+U[0_(P'F;BLcR+P,nI"6/N5Qsr)*H=X
%0)Oi+]("m4qVr[soO%UZqOdfcfDkO>Q[f&.[niW&"+U19^\m3Fs7+hss6!a=rU#YqprhQEq>T^707Wrdhu</h5CWRGYCClqbAY/p
%r?$OdmFSh^s6m`$)^Bapr<n,Odm*lAs8'c#r!/?//0t~>
%AI9_PrivateDataEnd
